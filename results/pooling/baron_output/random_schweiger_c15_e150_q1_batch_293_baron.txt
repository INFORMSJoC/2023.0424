===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.32     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.35
 Total CPU time used:                 0.33

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -81.5235
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -631.031
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            18.16     -641.270         -631.031       
         25+            2            48.08     -636.811         -631.031       
         31             0            60.51     -631.094         -631.031       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                    60.91
 Total CPU time used:                60.57

 Total no. of BaR iterations:      31
 Best solution found at node:       4
 Max. no. of nodes in memory:       4
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -217.122
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -637.964
 Preprocessing found feasible solution with value -637.964
 Preprocessing found feasible solution with value -637.964
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            13.52     -640.708         -637.964       
          7             0            30.21     -638.028         -637.964       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                    30.59
 Total CPU time used:                30.36

 Total no. of BaR iterations:       7
 Best solution found at node:       1
 Max. no. of nodes in memory:       3
 
 All done
===========================================================================



*****Running Instance #585*****


objective value: -631.031359212
objective bound: -631.094468657
BARON solution time: 60.9

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 0.8710496836647945
 0.9062899534296531
 0.0
 1.1289503165593102
 1.1746245352092557
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 1.0000000002975915
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4348094338566384
 0.8608856600651569
 0.0
 0.0
 0.0
 0.0
 3.565190566983785
 2.139114339571983
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.938220646190051
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.912991758643129
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5064083820321355
 1.519225145987469
 0.0
 0.5310718972624023
 1.593215691673889
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9625197210103912
 2.8875591628594166
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.8680554862603891
 0.13194451367813914
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.510441974027415
 2.8396185799211437
 0.0
 0.0
 0.0
 0.3988421783736053
 0.2510972686684644
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5838082744134636
 0.2919041371594079
 0.0
 0.0
 1.4161917258478691
 0.7080958628091292
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4532127889934463
 0.0
 0.0
 0.0
 0.4870104084529134
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5129895925180472
 0.9330705450899117
 0.5539398626895038
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4079104478934468
 0.70395522357397
 0.0
 0.592089552498023
 0.2960447760922589
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.008328847920903958
 0.041298147095929334
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.1933472200060083
 0.9587018527547322
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 2.446060139104776
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.5467872116603579
 1.3500605535010484
 0.0
 0.0
 0.0
 1.7983239324228697
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3035748515078975
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6499394473310549
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0597768027265233
 0.0
 1.0907158489156221
 0.13194451441610303
 2.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.696425148873206
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0617793541317986
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.08700824224096718
 0.0
 0.0
 0.0
 0.0
 0.12268593812334204
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.06692945549383095
 3.787140998858581
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.111865671719123
 2.295695093904091
 0.04962699501198409
 0.0
 0.0
 0.0
 0.8881343286961497
 0.0
 3.0
 0.0
 0.0
 2.025633528001377
 0.0
 0.0
 0.0
 7.35006055368235
 0.0
 0.0
 1.1520490725649541
 3.0
 0.8757124115728716
 2.1242875889167054
 0.0
 0.649939447020446
 0.0
 1.9402231980620435
 0.0
 1.7773396370515022
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.303574851712932
 0.0
 0.0
 0.0
 2.912991758574958
 0.0
 0.0
 2.1242875886569985
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9382206461057885
 0.0
 0.0
 5.70430490651175
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.8500788838173947
 0.0
 0.0
 5.446060139303546
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 2.0
 2.446060138927266
 0.0
 1.0
 0.20167606796791815
 1.0
 0.0
 0.0
 2.0
 0.9999999995689012
 0.0
 1.5129895923694527
 0.9330705449982822
 0.5539398626352114
 1.4532127889023985
 0.0
 0.0
 0.0
 0.4870104084223033
 0.0
 0.0
 2.0
 0.9999999999361979
 0.0
 0.0
 0.0
 4.9092841520371175
 3.0907158483605253
 0.0
 0.0
 2.0
 0.8680554862491386
 0.13194451367643092
 2.0
 6.0
 0.0
 1.9129917584530596
 0.9999999999970358
 0.0
 0.0
 0.9382206461608287
 0.0
 0.0
 0.0
 5.000000000658727
 2.9999999995281206
 2.0
 0.0
 0.0
 1.000000000229305
 2.0
 2.0809144885421103
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7039552238774505
 0.28696188673352024
 0.04129814709254826
 0.0
 0.0
 0.0
 0.2960447762198721
 0.0
 1.0
 0.0
 0.0
 0.25320419098966307
 0.0
 0.0
 0.0
 0.9187575691979034
 0.0
 0.0
 0.9587018526950213
 1.0
 0.29190413717802743
 0.265535948603747
 0.0
 0.08124243087622013
 0.0
 1.0
 0.09629298184380225
 0.4355248418038716
 0.0
 0.20470322333600988
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5644751582426781
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7080958628543128
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7130381133028182
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6990037948201879
 0.0
 0.0
 0.4812598604639297
 0.0
 0.0
 1.0



=====Finished running Instance #585=====




*****Running Instance #586*****


objective value: -637.964399723
objective bound: -638.028202536
BARON solution time: 30.58

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.5270147937523522
 0.0
 0.12621626301543995
 0.32343018006424257
 0.0
 0.026733302680349846
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 1.0000000003122878
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.46418431355772943
 1.6105328353350032
 0.5021353873431798
 0.0
 0.0
 0.0
 0.9769049441511889
 3.3894671655275963
 1.05677535453355
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.13330097890515222
 0.4297411497952725
 0.0
 0.0
 0.0
 0.0
 0.8894685067455503
 2.8675049645899846
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9746468469229879
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2729594050291107
 0.8188782150438231
 0.0
 0.7500000000995418
 2.2500000002383054
 0.0
 0.5092925365623026
 1.527877609635184
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4677480586083959
 1.4032441757748986
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.847050435185524
 0.7966666601307104
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.825651803142243
 1.94188393401459
 0.0
 0.0
 0.0
 0.17434819794120518
 0.05811606596633572
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.1434356022470573
 0.0
 0.0
 0.0
 0.266932094987797
 0.0
 0.6418865695808432
 0.32094328474573663
 0.0
 0.0
 1.3581134306866003
 0.6790567152447669
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6809320060979778
 0.0
 0.0
 0.0
 0.6163141071382044
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3836858938660417
 0.8709922343400078
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4881938136566382
 0.6328134739078386
 0.1112834327994102
 0.5118061867661056
 0.21763149936703732
 0.03827159397550817
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.912265143417048
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0588700834852889
 4.441089259716475
 0.0
 0.786112219187057
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.3190679946440644
 0.32644647893845063
 0.0
 0.9411299168872898
 0.0
 1.0877348569588936
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.22705594250238084
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2324642641765763
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7027538868959894
 0.0
 0.0
 0.20333334060843825
 0.5896323032244026
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.772944057879544
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9772305146783445
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.025353153966697115
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.14955502730726444
 0.0
 0.2138877813544708
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.12900776624518237
 6.0
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.232290720363887
 2.5768525362359127
 1.9122651432852518
 0.0
 0.0
 1.0918376200658089
 0.767709280108651
 0.0
 2.254678128124761
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 7.767535736890851
 0.0
 0.5630421286874964
 0.0
 3.0
 0.9628298543265799
 2.037170146166587
 0.0
 0.23246426389018143
 0.0
 2.297246113882859
 1.1434356021701424
 1.6532310571971822
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.35016348283835713
 0.0
 0.0
 0.0
 2.9746468468392786
 0.0
 0.0
 2.0371701459313667
 0.0
 2.64371709522597
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.7569734712519085
 0.0
 0.0
 5.423147464212335
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2669320949704091
 0.0
 0.0
 1.8709922343566239
 0.0
 0.0
 6.2860715622904415
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.0588700834108278
 4.441089259358727
 0.0
 0.7861122191348636
 0.9122651434337243
 1.0
 0.0
 0.0
 2.0
 0.8504449731866829
 0.1495550267662906
 1.383685893720852
 0.870992234247707
 0.0
 1.680932005931556
 0.0
 0.0
 0.0
 0.616314107072812
 0.0
 0.0
 2.0
 0.99999999995829
 1.410367697168345
 0.0
 0.0
 6.0
 1.9999999998169675
 0.0
 0.0
 1.8470504349984411
 0.7966666600513871
 0.0
 2.0
 6.0
 0.0
 1.9746468467239255
 0.999999999997313
 0.0
 0.0
 1.0227694856133767
 3.2972461142641625
 0.0
 1.4410892576558152
 5.0000000006575664
 1.558910741818769
 2.0
 0.0
 0.0
 1.0000000002319238
 1.8504449737271822
 0.0
 0.15294956568069906
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7440969067560249
 0.32210656702399254
 0.9999999999826759
 0.0
 0.0
 0.13647970249769198
 0.25590309335573097
 0.0
 1.0
 0.0
 0.0
 0.3750000000214645
 0.0
 0.0
 0.0
 0.970941967098955
 0.0
 0.13033335544354988
 0.0
 1.0
 0.32094328475734624
 0.2546462682586474
 0.0
 0.02905803298661578
 0.0
 1.0
 0.8107358134638571
 0.8252149161041246
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.174785083941194
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6790567152787178
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8696666445931654
 0.0
 0.0
 0.6778934330163516
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.18926418658311275
 0.0
 0.0
 0.2338740292826832
 0.0
 0.0
 1.0



=====Finished running Instance #586=====





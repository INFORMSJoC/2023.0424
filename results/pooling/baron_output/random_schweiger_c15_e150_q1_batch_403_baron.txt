===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.32     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.34
 Total CPU time used:                 0.32

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -636.454
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -637.049
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            14.95     -645.022         -637.049       
         16+            3            44.84     -642.793         -637.049       
         33             0            71.95     -637.112         -637.049       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                    72.39
 Total CPU time used:                72.08

 Total no. of BaR iterations:      33
 Best solution found at node:      28
 Max. no. of nodes in memory:       6
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -190.384
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -629.297
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            17.62     -639.145         -629.297       
         22+            4            47.50     -636.024         -629.297       
        236             8            77.40     -636.024         -629.297       
*       432             8           100.10     -636.024         -629.307       
        696             7           129.98     -636.024         -629.307       
        948+            5           159.86     -636.024         -629.307       
       1221+            3           189.75     -635.347         -629.307       
       1464+            6           219.64     -634.998         -629.307       
       1743            10           249.53     -634.949         -629.307       
       2970             9           279.42     -634.949         -629.307       
       6362            10           309.31     -634.949         -629.307       
       9961             9           339.19     -634.949         -629.307       
      13398            10           369.07     -634.949         -629.307       
      17237             8           398.95     -634.949         -629.307       
      18158+            6           428.84     -634.345         -629.307       
      19507             9           458.72     -632.769         -629.307       
      21956+            4           488.61     -632.769         -629.307       
      22274+            3           518.52     -630.697         -629.307       
      22291             0           520.97     -629.370         -629.307       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   523.16
 Total CPU time used:               521.05

 Total no. of BaR iterations:   22291
 Best solution found at node:     432
 Max. no. of nodes in memory:      15
 
 All done
===========================================================================



*****Running Instance #805*****


objective value: -637.048699643
objective bound: -637.112410877
BARON solution time: 72.38

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.728070302699001
 0.0
 0.0
 0.27192969385334104
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.8924417719324567
 0.0
 0.0
 1.1075582248167344
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.21918520236570838
 1.527980798207164
 0.7513504752862855
 0.0
 0.0
 0.0
 0.48262390532957194
 3.3644609774083283
 1.654398639975382
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0785840607855557
 1.5043076876125845
 0.1075582278487278
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.956197410601719
 0.9999999997854582
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.06786952842811429
 0.20360858519528388
 0.0
 0.749999999691584
 2.2499999988470587
 0.0
 0.5055745847948735
 1.5167237542217977
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.676555887119215
 2.029667661149693
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4490926015229737
 0.8244980348737933
 0.7264093618933947
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.612988496686297
 2.9129346342270197
 0.0
 0.0
 0.0
 0.29058377175620287
 0.18349309420093235
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.03622303424619822
 0.0
 0.6518011077100646
 0.3259005533450023
 0.0
 0.0
 1.3481988921832981
 0.6740994450385824
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999975614104
 0.0
 0.0
 0.0
 0.549004143361093
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.450995856687782
 0.9999999999110922
 0.5490041434459537
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3267139019550458
 0.6633569464900108
 0.0
 0.6732860974574997
 0.3366430464450139
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6748424795650604
 0.6813035510952562
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.52680833615412
 3.0452467415702733
 0.0
 0.9999999999023133
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 0.8241140236408098
 0.0
 0.47319166405752094
 0.0
 1.325157517142642
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3324572232046879
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999962314043
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.47407686810792893
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.450995857792432
 0.0
 1.0964277303980803
 0.1755019631644822
 1.963776962528591
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.6675427765658173
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3186964450200637
 0.9214159379155212
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.043802589779532976
 0.0
 0.0
 0.0
 0.0
 0.9482687232990007
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5307215785076214
 0.0
 0.0
 0.0
 0.0
 0.020185818783112736
 0.0
 0.0
 5.2735906331
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 1.9900708506691358
 2.498516475859158
 1.3561460308147901
 0.0
 0.0
 0.2714781136808726
 1.0099291450799894
 0.0
 3.0
 0.0
 0.0
 2.9999999988374513
 0.0
 0.0
 0.0
 7.525923132411076
 0.0
 0.0
 0.0
 3.0
 0.9777016610550668
 2.0222983392476097
 0.0
 0.47407686616781597
 0.0
 2.5490041427444003
 0.0
 1.7280703044323344
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2719296942206692
 0.0
 0.0
 0.0
 2.9561974114096765
 0.0
 0.0
 2.0222983372218803
 0.0
 2.999999998289814
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.690449976246868
 0.0
 0.0
 5.501483522713282
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.036223034341144
 0.0
 0.0
 2.7062235485474626
 0.0
 0.0
 5.572055077905109
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.526808336194348
 3.0452467416556903
 0.0
 0.9999999999136168
 0.6748424830552419
 0.6813035546188239
 0.0
 0.0
 1.99999999989551
 0.9999999932026777
 0.0
 1.4509958566747312
 0.999999999912108
 0.5490041434121556
 1.9999999990309436
 0.0
 0.0
 0.0
 0.5490041437621546
 0.0
 0.0
 2.0
 0.9999999984510327
 0.036223037636525
 0.0
 0.0
 4.903572269453934
 3.096427729132351
 0.0
 0.0
 1.4490926023406592
 0.8244980353426724
 0.7264093623060314
 2.0
 5.999999999411397
 0.0
 1.9561974107458273
 0.9999999998853965
 0.0
 0.0
 1.078584062148032
 1.5043076895133372
 0.10755822794640156
 0.7018091076088344
 4.892441775658973
 2.4057491152881862
 1.8924417720609772
 0.0
 0.0
 1.1075582249269436
 1.9999999970536142
 0.0
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.6633569510235818
 0.31231455953532944
 0.9999999948311905
 0.0
 0.0
 0.0339347642010012
 0.3366430487576737
 0.0
 1.0
 0.0
 0.0
 0.3749999998487703
 0.0
 0.0
 0.0
 0.94074039154104
 0.0
 0.0
 0.0
 0.9999999999750684
 0.3259005538535618
 0.25278729239846803
 0.0
 0.0592596082603969
 0.0
 0.999999999272174
 5.850719141461425e-8
 0.8640351526236695
 0.0
 3.5090897983977856e-8
 0.0
 0.0
 0.0
 0.0
 0.0
 0.13596484712825138
 0.0
 0.0
 0.0
 0.9999999999482033
 0.0
 0.0
 0.6740994460871891
 0.0
 0.9999999994508288
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9999999987373082
 0.0
 0.0
 0.6876854404599088
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9999999064019465
 0.0
 0.0
 0.33827794356206303
 0.0
 0.0
 0.9999999999769009



=====Finished running Instance #805=====




*****Running Instance #806*****


objective value: -629.306772959
objective bound: -629.369709928
BARON solution time: 523.15

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.6267746991560912
 0.0
 0.0
 0.37322530108043817
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 1.0000000002635876
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8085351336647439
 0.480911560197482
 0.0
 0.0
 0.0
 0.0
 4.191464867211639
 2.4930566711025492
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.33483178005510156
 0.680577580685844
 0.0
 0.0
 0.0
 0.0
 0.6023291409689517
 1.2242915217598922
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9997328049047427
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.09827924378800985
 0.2948377313455847
 0.0
 0.7500000001140942
 2.250000000207245
 0.0
 0.554984929751356
 1.6649547891422023
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5967358266412037
 1.7902074798066583
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6438412509184324
 0.9692154429623272
 0.38694330630210294
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.307645321272225
 3.0913292634791043
 0.0
 0.0
 0.0
 0.34991393637940743
 0.25111147983496307
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5200401877789963
 0.26002009384514546
 0.0
 0.0
 1.479959812482054
 0.7399799061148057
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.24730984448939122
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.752690156477922
 1.0
 0.2473098437239429
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3399706015464543
 0.669985300532246
 0.0
 0.6600293987465004
 0.33001469925455
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4547411027590919
 0.8517440094084201
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.475798128822294
 2.778721926413661
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 1.3989745843396166
 0.0
 0.5242018715886847
 0.0
 1.5452588976397417
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3126585347980201
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.601025416510214
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7526901555044146
 0.0
 1.3424407436668677
 0.03078455770651845
 2.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.6873414655848127
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.14825599088835242
 1.0628390792926878
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.00026719598725483254
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3561587498148015
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.613056694790618
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.009955902291623
 1.2894466938498417
 1.3064851119703333
 0.0
 0.0
 0.39311697512876453
 0.9900440981059297
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 7.398974584501837
 0.0
 1.0154093607067118
 0.0
 3.0
 0.7800602816241418
 2.219939718870139
 0.0
 0.6010254161952843
 0.0
 2.24730984528631
 0.0
 1.6267746990104142
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.37322530104701546
 0.0
 0.0
 0.0
 2.999732804908592
 0.0
 0.0
 2.21993971859686
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.826620662667256
 0.0
 0.0
 6.68452153824999
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.3869433064210157
 0.0
 0.0
 5.254520055270354
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.475798128709872
 2.7787219262007716
 0.0
 1.0
 0.45474110275214563
 0.8517440093960549
 0.0
 0.0
 2.0
 0.9999999996906145
 0.0
 1.752690156313966
 1.0
 0.24730984370052078
 2.0
 0.0
 0.0
 0.0
 0.2473098444722448
 0.0
 0.0
 2.0
 0.999999999927751
 0.0
 0.0
 0.0
 4.657559257308828
 3.342440743068061
 0.0
 0.0
 1.6438412508711002
 0.9692154429344201
 0.38694330629096146
 2.0
 6.0
 0.0
 1.9997328047068164
 0.9999999999982713
 0.0
 0.0
 0.9371609209958587
 1.904869102388443
 0.0
 0.0
 5.000000000692951
 2.973968231190927
 2.0
 0.0
 0.0
 1.0000000001953993
 2.0
 0.0
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.6699853007395299
 0.1617070267105378
 1.0
 0.0
 0.0
 0.04913962188924805
 0.33001469935665195
 0.0
 1.0
 0.0
 0.0
 0.37500000002232253
 0.0
 0.0
 0.0
 0.9248718230503447
 0.0
 0.35728312241113563
 0.0
 1.0
 0.26002009386393166
 0.2774924648469916
 0.0
 0.07512817702325636
 0.0
 1.0
 0.05616792570205526
 0.8133873495070393
 0.0
 0.08194208441856263
 0.0
 0.0
 0.0
 0.0
 0.0
 0.18661265052392834
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7399799061682686
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6427168776189377
 0.0
 0.0
 0.8382929733261487
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8618899898793821
 0.0
 0.0
 0.2983679132905912
 0.0
 0.0
 1.0



=====Finished running Instance #806=====





===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.32     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.35
 Total CPU time used:                 0.33

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -168.133
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -627.833
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            18.50     -639.718         -627.833       
         48             5            48.41     -638.646         -627.833       
       1238            10            78.31     -638.646         -627.833       
       4499             4           108.21     -638.646         -627.833       
       8182+            9           138.10     -638.646         -627.833       
      10040            11           167.99     -638.646         -627.833       
      13793             8           197.89     -638.646         -627.833       
      15258+            6           227.79     -638.646         -627.833       
      15519            12           257.68     -638.646         -627.833       
      17175             7           287.57     -638.646         -627.833       
      20459            10           317.46     -638.646         -627.833       
      23650+            8           347.36     -638.646         -627.833       
      26813            10           377.25     -638.646         -627.833       
      30340            10           407.15     -638.646         -627.833       
      33921            13           437.05     -638.646         -627.833       
      37052             8           466.95     -638.646         -627.833       
      37126+            3           496.86     -638.646         -627.833       
      38795+            6           526.77     -637.403         -627.833       
      41042            10           556.66     -637.403         -627.833       
      45416            12           586.56     -637.403         -627.833       
      46608             9           616.45     -637.403         -627.833       
      47686+            3           646.37     -637.403         -627.833       
      50022             8           676.27     -637.403         -627.833       
      54149            15           706.16     -637.403         -627.833       
      58477             7           736.06     -637.403         -627.833       
      59647+            6           765.97     -637.012         -627.833       
      59883+            9           795.87     -635.802         -627.833       
      59945+            6           825.77     -635.412         -627.833       
      62280             7           855.66     -634.547         -627.833       
      66893+            7           885.58     -634.240         -627.833       
      67265             0           908.35     -627.896         -627.833       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   913.11
 Total CPU time used:               909.84

 Total no. of BaR iterations:   67265
 Best solution found at node:      82
 Max. no. of nodes in memory:      18
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -189.469
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -415.220
 Preprocessing found feasible solution with value -623.921
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            15.52     -641.654         -623.921       
         24+            3            46.60     -640.482         -623.921       
       1936            13            76.50     -640.032         -623.921       
       4222             9           106.40     -640.032         -623.921       
       6058+            7           136.30     -640.032         -623.921       
       6185+            4           166.20     -640.032         -623.921       
       9762            24           196.10     -639.898         -623.921       
      13582            17           226.00     -639.898         -623.921       
      16824+           11           255.89     -639.898         -623.921       
      16839+            6           285.79     -639.898         -623.921       
      16849+            4           315.69     -639.898         -623.921       
      16944+            9           345.59     -639.748         -623.921       
      17052+           11           375.50     -639.748         -623.921       
      17111+            9           405.41     -639.748         -623.921       
      17148+            5           435.31     -639.748         -623.921       
      17196+            4           465.21     -639.748         -623.921       
      17313+           10           495.12     -639.748         -623.921       
      17410+            9           525.01     -639.748         -623.921       
      17501             4           554.90     -639.748         -623.921       
      17590+            5           584.81     -639.748         -623.921       
      19044             9           614.70     -639.742         -623.921       
      22856            10           644.60     -639.659         -623.921       
      26757            10           674.49     -639.659         -623.921       
      29142+           10           704.39     -639.659         -623.921       
      29341+            6           734.29     -639.659         -623.921       
      31526            11           764.19     -639.659         -623.921       
      35695            10           794.08     -639.659         -623.921       
      37794            12           823.97     -639.659         -623.921       
      41475            10           853.87     -639.659         -623.921       
      45271+           11           883.76     -638.975         -623.921       
      45625            14           913.66     -638.975         -623.921       
      50216            12           943.55     -638.975         -623.921       
      54657            19           973.44     -638.975         -623.921       
      58326+            7          1003.33     -638.975         -623.921       
      58386+            9          1033.23     -638.975         -623.921       
      61686            14          1063.13     -638.975         -623.921       
      62967+            3          1093.03     -638.975         -623.921       
      63083             7          1122.94     -638.975         -623.921       
      65710            11          1152.83     -638.975         -623.921       
      66708+            3          1182.72     -638.975         -623.921       
      67294             3          1212.61     -638.157         -623.921       
      70623            12          1242.50     -638.157         -623.921       
      73962            15          1272.39     -638.157         -623.921       
      75759            10          1302.29     -638.157         -623.921       
      79023            14          1332.18     -638.157         -623.921       
      82075            18          1362.08     -638.157         -623.921       
      85319            12          1391.97     -638.157         -623.921       
      88558            14          1421.87     -638.157         -623.921       
      89182+            4          1451.76     -638.157         -623.921       
      89345+           10          1481.67     -638.157         -623.921       
      89940            13          1511.56     -638.157         -623.921       
      92363+            8          1541.48     -638.157         -623.921       
      92433+            7          1571.38     -638.157         -623.921       
      92574+            9          1601.27     -638.157         -623.921       
      92765+           13          1631.16     -638.157         -623.921       
      93485+           14          1661.05     -638.157         -623.921       
      93570+            6          1690.95     -638.157         -623.921       
      93771             7          1720.84     -638.157         -623.921       
      95344             6          1750.75     -638.157         -623.921       
      97249+            2          1780.66     -638.157         -623.921       
      97334+            8          1810.55     -637.553         -623.921       
      97513+           10          1840.45     -637.553         -623.921       
      97972+            9          1870.35     -637.553         -623.921       
      98201+           11          1900.24     -637.553         -623.921       
      98299+            6          1930.14     -637.070         -623.921       
     100431             7          1960.04     -636.942         -623.921       
     103187+            5          1989.94     -633.039         -623.921       
     103195             0          1995.96     -623.983         -623.921       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                  2004.91
 Total CPU time used:              1997.52

 Total no. of BaR iterations:  103195
 Best solution found at node:       1
 Max. no. of nodes in memory:      27
 
 All done
===========================================================================



*****Running Instance #891*****


objective value: -627.832868584
objective bound: -627.895658144
BARON solution time: 913.1

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.6829726763637607
 0.0
 0.0
 0.317027323917224
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 1.0000000003189862
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8505446245152546
 0.3045775204391522
 0.0
 0.0
 0.0
 0.0
 4.149455376352046
 1.485907726977175
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.09266109508872189
 0.3180613880954667
 0.0
 0.0
 0.0
 0.0
 0.9585083682086335
 3.290102516097994
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.8466440998245583
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.04686500659759566
 0.14059501975725877
 0.0
 0.7500000000332979
 2.25000000028567
 0.0
 0.5678814613454727
 1.7036443841625293
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6352535322011327
 1.9057605967513838
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0772280647123575
 0.7784291522969082
 1.1443427828425934
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.326978944192813
 1.5789424406742019
 0.0
 0.19671720706537477
 0.0
 0.6730210569073084
 0.1994867112152854
 0.0
 0.02485364107538173
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.31702732373551
 0.0
 0.0
 0.0
 0.08786695388794928
 0.0
 0.4856494366773002
 0.24282471831509178
 0.0
 0.0
 1.514350563594628
 0.7571752817006973
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9307063391675394
 0.0
 0.0
 0.0
 0.4558867159875431
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5441132850031836
 1.0
 0.45588671520964935
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3598027116722975
 0.6799013555226494
 0.0
 0.6401972887566547
 0.32009864423122436
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6997846076843928
 0.9984919645571158
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9357813720152571
 3.7536280389208634
 0.0
 0.8624105013779428
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0692936615746696
 1.5976035049924957
 0.0
 1.0642186283631312
 0.0
 1.3002153927132307
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3211195786326889
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4023964958353927
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6134069449870029
 0.0
 0.0
 0.0
 0.5951057228154204
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.6788804216973946
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0015080357297943287
 0.9488305369811364
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.1533559010476105
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.13758949918200022
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7998603313248723
 0.0
 0.0
 0.0
 0.0
 0.12291160443425257
 0.0
 0.0
 4.8556572181525155
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.0397040673966003
 1.1551221449544067
 1.6982765722415085
 0.0
 0.0
 0.18746002636178083
 0.9602959330806804
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 7.10263859193239
 0.0
 0.4107224831841886
 0.0
 3.0
 0.728474154992392
 2.271525845508002
 0.0
 0.8973614091979755
 0.0
 2.3865930560566038
 1.31702732373551
 1.6829726763637607
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.317027323917224
 0.0
 0.0
 0.0
 2.8466440997663374
 0.0
 0.0
 2.2715258452953253
 0.0
 2.9999999998518927
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.248610884306627
 0.0
 0.0
 5.635363103329221
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.08786695388794928
 0.0
 0.0
 2.5410141289525163
 0.0
 0.0
 5.551819912314063
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 0.935781371933929
 3.753628038579876
 0.0
 0.8624105013035362
 0.6997846076759138
 0.9984919645462504
 0.0
 0.0
 2.0
 0.9999999996390566
 0.0
 1.5441132848542034
 1.0
 0.4558867151731041
 1.9307063389760208
 0.0
 0.0
 0.0
 0.4558867159345207
 0.0
 0.0
 2.0
 0.9999999999816925
 1.4048942775736424
 0.0
 0.0
 6.0
 1.7784291517422974
 0.0
 0.2215708481391115
 1.0772280648194226
 0.7784291523792813
 1.1443427829552095
 2.0
 6.0
 0.0
 1.846644099631505
 1.0
 0.0
 0.0
 1.0511694633065718
 3.608163904230272
 0.0
 0.0
 5.000000000632387
 1.7904852473345214
 2.0
 0.0
 0.0
 1.000000000249078
 2.0
 0.0
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.679901355773447
 0.17010892488173163
 1.0
 0.0
 0.0
 0.02343250328830851
 0.3200986443487607
 0.0
 1.0
 0.0
 0.0
 0.37500000001626355
 0.0
 0.0
 0.0
 0.8878298239522937
 0.0
 0.08815048222258076
 0.0
 1.0
 0.24282471831135058
 0.2839407306691476
 0.0
 0.11217017613843819
 0.0
 1.0
 0.9374565365944434
 0.8414863381044643
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.158513661942665
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.757175281733418
 0.0
 0.9999999999148573
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9118495177675172
 0.0
 0.0
 0.8298910751656425
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.06254346344105823
 0.0
 0.0
 0.31762676609811324
 0.0
 0.0
 1.0



=====Finished running Instance #891=====




*****Running Instance #892*****


objective value: -623.920890918
objective bound: -623.983289243
BARON solution time: 2004.9

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.1016128454607474
 1.6158481576702763
 0.0
 0.8983871547705673
 1.3177562652089896
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 1.0000000002408755
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.907088465492843
 1.7343763079703671
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.092911535405668
 1.248636298746971
 0.12652606435457772
 0.453882220389177
 0.0
 0.0
 0.0
 0.0
 0.8857198007888765
 3.1773095280763193
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.16845519557722158
 0.5053655867208425
 0.0
 0.7500000000487679
 2.2500000002645484
 0.0
 0.5752986203292624
 1.7258958610663164
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5062461842740476
 1.518738552885187
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0449146518279562
 0.8276817154415181
 1.127403632258666
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.304171382846389
 1.3111092224757401
 0.0
 0.12361457150304458
 0.0
 1.6958286182244247
 0.516572492898996
 0.0
 0.048703713062714225
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.28253899661575294
 0.0
 0.0
 0.0
 0.20020523480326716
 0.0
 0.46587034610350003
 0.23293517301554814
 0.0
 0.0
 1.5341296541548202
 0.7670648269510191
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.8206309431394412
 0.0
 0.0
 0.0
 0.6382425196543926
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3617574813170925
 0.931189987819126
 0.7070525311568335
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4866333307525388
 0.7433166650220627
 0.0
 0.5133666696493456
 0.25668333470208154
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.006717032896384478
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.993282966188524
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.008724967308612957
 0.010077053083512859
 0.0
 0.004362483652913571
 0.0
 0.0
 0.0
 0.0
 1.991275032997494
 2.2998578104018033
 0.0
 0.9956375164939049
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.17936905758240587
 1.5401587647092359
 0.0
 0.0
 0.0
 1.9745143767234126
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.23930792382571467
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.025485623463108183
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.45984123586780656
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5411265373046752
 0.0
 0.0
 0.0
 1.517255768941896
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7606920765078756
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9877541351505876
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8971758844422929
 0.0
 0.0
 0.0
 0.0
 0.057909464107830017
 0.0
 0.06881001275335802
 1.938991945763198
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.2299499959961824
 4.641464773545572
 0.006717032899730446
 0.0
 0.0
 0.6738207823041438
 0.7700500044288818
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 5.7388951768251735
 0.0
 0.5804082847437547
 0.9932829660990281
 3.0
 0.6988055191190482
 2.3011944813955787
 0.0
 2.261104824186135
 0.0
 2.458873463713103
 0.28253899661575294
 2.7174610031310236
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.2161434199795567
 0.023164504045039384
 0.0
 0.0
 3.0
 0.0
 0.0
 2.3011944811058394
 0.0
 2.9999999995280597
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.063029328865196
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.20020523480326716
 0.0
 0.0
 2.024984737159235
 3.3415478342107736
 0.0
 5.286770359893202
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 2.0
 2.309934863357284
 0.0
 1.0
 0.0
 1.0
 0.0
 0.0
 2.0
 0.9999999996262815
 0.0
 1.3617574811865516
 0.9311899877299687
 0.7070525310892057
 1.8206309429773744
 0.0
 0.0
 0.0
 0.6382425195941575
 0.0
 0.0
 2.0
 0.9999999999363297
 0.48274423144077044
 0.0
 0.0
 6.0
 1.8276817152301128
 0.0
 0.1723182845555927
 1.0449146520253554
 0.8276817155980398
 1.1274036324715586
 2.0
 6.0
 0.0
 2.0
 0.9999999999943198
 0.0
 0.0
 1.0122458651299175
 3.6311917484145204
 0.0
 0.0
 5.00000000071064
 2.983012606611373
 2.0
 0.0
 0.0
 1.0000000001638525
 2.0
 2.9336044227690548
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7433166653073588
 0.5814176930156908
 0.006717032894232521
 0.0
 0.0
 0.08422759777740067
 0.2566833347987024
 0.0
 1.0
 0.0
 0.0
 0.3750000000146217
 0.0
 0.0
 0.0
 0.7173618970716569
 0.0
 0.1249953876953733
 0.9932829661165915
 1.0
 0.23293517302727093
 0.28764931015419837
 0.0
 0.2826381030083895
 0.0
 1.0
 0.5852767952016026
 0.5508064226851603
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.44919357734809956
 0.004362483654365932
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7670648270065478
 0.0
 0.9999999998123172
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8750046123187402
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4147232047761056
 0.0
 0.0
 0.2531230921263792
 0.4185823070213994
 0.0
 0.9956375164015226



=====Finished running Instance #892=====





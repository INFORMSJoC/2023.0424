===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.32     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.34
 Total CPU time used:                 0.33

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -241.891
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -362.441
 Preprocessing found feasible solution with value -620.001
 Preprocessing found feasible solution with value -620.001
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
*         1             1            11.96     -643.183         -624.047       
          1             1            20.15     -638.172         -624.047       
*        30             5            48.80     -637.133         -624.334       
        707            10            78.80     -637.133         -624.334       
       4078             7           108.70     -637.133         -624.334       
       7409+            5           138.59     -637.133         -624.334       
       9161             7           168.48     -636.612         -624.334       
      13352             9           198.38     -636.316         -624.334       
      15088            16           230.28     -636.316         -624.334       
      16447+            8           260.19     -636.316         -624.334       
      16571+            6           290.09     -636.316         -624.334       
      16826+            7           319.99     -636.316         -624.334       
      17655            12           349.88     -636.316         -624.334       
      21172            13           379.78     -636.316         -624.334       
      25368            14           409.67     -636.316         -624.334       
      29517            16           439.57     -636.316         -624.334       
      33870            17           469.46     -636.316         -624.334       
      37887            15           499.35     -636.316         -624.334       
      42219            16           529.25     -636.316         -624.334       
      46235            12           559.14     -636.316         -624.334       
      50541            11           589.03     -636.316         -624.334       
      53784            11           618.93     -636.316         -624.334       
      54240+            6           648.84     -635.956         -624.334       
      54355+            4           678.75     -635.956         -624.334       
      54529+            4           708.64     -635.956         -624.334       
      57509            10           738.53     -635.956         -624.334       
      61691             7           768.42     -635.956         -624.334       
      62474+            7           798.32     -635.956         -624.334       
      62833+            7           828.23     -635.956         -624.334       
      63013+            9           858.13     -635.956         -624.334       
      65916             9           888.03     -635.956         -624.334       
      68257             9           917.92     -635.956         -624.334       
      71464            10           947.81     -635.956         -624.334       
      75825             6           977.71     -635.956         -624.334       
      80203             9          1007.60     -635.956         -624.334       
      84530            11          1037.49     -635.956         -624.334       
      88029             9          1067.39     -635.956         -624.334       
      92168            13          1097.28     -635.956         -624.334       
      94093+            6          1127.19     -635.538         -624.334       
      94273+            6          1157.09     -635.538         -624.334       
      94429+            4          1186.99     -635.538         -624.334       
      98252            11          1216.88     -635.538         -624.334       
     100718+            5          1246.78     -635.538         -624.334       
     100880+            5          1276.69     -635.538         -624.334       
     104069            14          1306.58     -635.538         -624.334       
     108224            11          1336.48     -635.538         -624.334       
     110429+            3          1366.39     -635.538         -624.334       
     112430             6          1396.29     -634.362         -624.334       
     116962             8          1426.18     -634.137         -624.334       
     121114             7          1456.07     -634.137         -624.334       
     124029+            5          1485.99     -633.936         -624.334       
     124240+            9          1515.88     -631.196         -624.334       
     124415+            9          1545.78     -631.196         -624.334       
     124524+            6          1575.67     -630.920         -624.334       
     127021+            2          1605.57     -629.578         -624.334       
     127033             0          1608.60     -624.396         -624.334       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                  1614.53
 Total CPU time used:              1608.68

 Total no. of BaR iterations:  127033
 Best solution found at node:      61
 Max. no. of nodes in memory:      21
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -179.291
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -480.824
 Preprocessing found feasible solution with value -520.938
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
*         1             1            10.88     -646.439         -578.830       
*         1             1            13.05     -646.439         -627.678       
          1             1            15.04     -646.439         -627.678       
         18             7            44.93     -636.776         -627.678       
       1585            11            76.51     -636.776         -627.678       
       4777            12           107.80     -636.776         -627.678       
       8174             9           137.69     -636.776         -627.678       
       8249+            3           167.58     -635.775         -627.678       
       8329+            4           197.49     -635.775         -627.678       
       8372+            2           227.39     -635.775         -627.678       
       8454+            5           257.30     -634.299         -627.678       
       8518+            7           287.23     -634.299         -627.678       
       8631+            8           317.14     -634.299         -627.678       
       8654+            2           347.06     -634.299         -627.678       
       8797+            4           376.98     -631.544         -627.678       
       8826+            4           406.89     -631.544         -627.678       
       8873             0           437.12     -627.741         -627.678       

                         *** Normal completion ***            

 Wall clock time:                   438.71
 Total CPU time used:               437.12

 Total no. of BaR iterations:    8873
 Best solution found at node:     124
 Max. no. of nodes in memory:      15
 
 All done
===========================================================================



*****Running Instance #703*****


objective value: -624.334025996
objective bound: -624.396465635
BARON solution time: 1614.52

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 0.9045493350907947
 0.6909137370743225
 0.0
 1.0954506651980465
 0.8367281733687872
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 1.000000000299372
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.242655029287958
 0.4875616256866355
 0.0
 0.0
 0.0
 0.0
 3.7573449715872593
 1.474212214521189
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0931227926111537
 0.8230452930412941
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5814720685694865
 1.7444162055851236
 0.0
 0.505330427238205
 1.5159912816026242
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9131975045065832
 2.7395925133509333
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.8748518926495159
 0.12514810725929595
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.453487783204571
 2.399123501499442
 0.0
 0.0
 0.0
 1.2671233978813423
 0.8802653184243162
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6524521944814996
 0.326226097189284
 0.0
 0.0
 1.3475478057798083
 0.673773902783598
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.836485370254484
 0.0
 0.0
 0.0
 0.37114897976915295
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6288510212083531
 1.0
 0.3711489789908362
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.415860828613778
 0.7079304139799638
 0.0
 0.584139171771987
 0.2920695857511187
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.06168230658606266
 0.36326336511821283
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.10118023998366546
 0.5958771079469771
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4884024810901006
 3.6670771823343458
 0.0
 0.9303595458108347
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.1635146304490403
 1.5841059155870851
 0.0
 1.5115975192449378
 0.0
 1.8371374538137741
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2968462878952007
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.41589408523883403
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7923656501550057
 0.0
 1.279388820222986
 0.12514810803088333
 2.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.703153712489135
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.04085952724573593
 0.9068772077227165
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.1052002380097277
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.06964045475736565
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.347209983453641
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.1237912428034598
 1.7302166549618305
 0.42494567162977914
 0.0
 0.0
 0.0
 0.8762087576096363
 0.0
 3.0
 0.0
 0.0
 2.3258882741297566
 0.0
 0.0
 0.0
 5.852611284493224
 0.0
 0.0
 0.697057347808027
 3.0
 0.9786782916707837
 2.021321708821712
 0.0
 2.1473887162292242
 0.0
 2.2076343506338953
 0.0
 1.5954630721221392
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9321788385144905
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 2.021321708563406
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9161680855640313
 0.0
 0.0
 5.231557186069804
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.65279001780566
 0.0
 0.0
 5.085839209169948
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 0.4884024810525389
 3.66707718201379
 0.0
 0.9303595457340584
 0.1628625465635317
 0.9591404730320968
 0.0
 0.0
 2.0
 0.9999999996345346
 0.0
 1.6288510210504492
 1.0
 0.3711489789547178
 1.8364853701230488
 0.0
 0.0
 0.0
 0.37114897974161315
 0.0
 0.0
 2.0
 0.9999999999405562
 0.0
 0.0
 0.0
 4.720611180740339
 3.2793888196836667
 0.0
 0.0
 2.0
 0.8748518926466873
 0.12514810725889777
 2.0
 6.0
 0.0
 2.0
 1.0
 0.0
 0.0
 1.0931227925699118
 0.8230452930102409
 0.0
 0.0
 5.0000000006652305
 1.9617738401253584
 2.0
 0.0
 0.0
 1.0000000002247216
 2.0
 1.5276419103669674
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7079304142386866
 0.24853100582452836
 0.3787384385620789
 0.0
 0.0
 0.0
 0.2920695858578528
 0.0
 1.0
 0.0
 0.0
 0.2907360342546667
 0.0
 0.0
 0.0
 0.7315764105492355
 0.0
 0.0
 0.6212615614717093
 1.0
 0.326226097208669
 0.2526652135917165
 0.0
 0.26842358952396206
 0.0
 1.0
 0.12869484188000269
 0.4522746675021601
 0.0
 0.2207867095800169
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5477253325467173
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6737739028236571
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7514689942174747
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6505184485399805
 0.0
 0.0
 0.45659875221247964
 0.0
 0.0
 1.0



=====Finished running Instance #703=====




*****Running Instance #704*****


objective value: -627.678051522
objective bound: -627.740825604
BARON solution time: 438.7

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.131563156782662
 1.8684368433411636
 0.0
 0.8684368400692899
 1.4339627252536729
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.8366153225869477
 0.0
 0.046835187594236216
 1.1165494900546187
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.04397670937233028
 3.011221054183361
 1.8777422505860077
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.027342559472337075
 1.8722294569207907
 1.1674879694328724
 0.390109530629777
 1.0662288497571613
 0.05895167716942912
 0.0
 0.0
 0.0
 0.6910797261625026
 1.8888263004782408
 0.10443300076926738
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.8438483550692193
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.13280783024894421
 0.3984234907402063
 0.0
 0.7500000002251792
 2.250000000704793
 0.0
 0.5449864768798913
 1.6349594306573834
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.572205692816297
 1.7166170784681454
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999999225826
 0.9594690172507704
 0.04053098294423636
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.484765189531964
 1.7912045747684138
 0.0
 0.037050487556550514
 0.0
 0.5152348113296347
 0.16826444137082186
 0.0
 0.00348049562511863
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2134666423125287
 0.0
 0.5467027285964479
 0.2733513642485125
 0.0
 0.0
 1.453297271676765
 0.7266486356954249
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.705926725571421
 0.0
 0.0
 0.0
 0.20859743932890448
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.791402561629092
 1.0
 0.2085974386837691
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3445598959550742
 0.6722799443167722
 0.0
 0.6554401043726809
 0.3277200503968043
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5068185777353795
 0.9304899318366161
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 2.7461723428018336
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.2940732750521995
 1.3299993311239622
 0.0
 0.0
 0.0
 1.4931814222615158
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.01683984355693
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999997241575
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5986814007882953
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0854758344055984
 0.0
 0.0
 0.0
 1.78653335774578
 0.30239956390889
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.6976004355875178
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0695100676736049
 0.9188107434746606
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.15615164576739024
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5933944184930748
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.0168398428519385
 4.932940014141699
 1.4373085097735936
 0.0
 0.0
 0.5312313210705117
 0.9831601560784037
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 7.313020252151012
 0.0
 1.5152900575563675
 0.0
 3.0
 0.8200540928449603
 2.17994590759422
 0.0
 0.6869797486233052
 0.0
 1.9145241665175214
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.302399565347631
 0.0
 0.0
 0.0
 2.843848355337742
 0.0
 0.0
 2.17994590737219
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.6843390274100107
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2134666423362859
 0.0
 0.0
 2.288822771339863
 3.067059985826
 0.0
 5.746172342993014
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.999999999989753
 2.7461723425265534
 0.0
 0.9999999999828331
 0.506818578101027
 0.9304899325153847
 0.0
 0.0
 2.0
 0.9999999946214777
 0.0
 1.791402561438241
 0.9999999999943162
 0.20859743865827213
 1.705926725421977
 0.0
 0.0
 0.0
 0.2085974392995265
 0.0
 0.0
 2.0
 0.9999999998930239
 0.21346664261197987
 0.0
 0.0
 6.0
 1.9594690161660693
 0.0
 0.04053098298903937
 1.9999999999168663
 0.9594690172584301
 0.04053098288769406
 2.0
 6.0
 0.0
 1.8438483548895623
 1.0
 0.0
 0.0
 1.0811892567655281
 2.955055150188905
 0.1633846779166369
 0.07131926874831072
 4.8834505108652255
 3.0452302198521166
 1.83661532242496
 0.0
 0.046835187444488335
 1.116549489984823
 1.9999999967309074
 3.3023995684217526
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.6722799479547464
 0.6166175018039658
 0.999999999272645
 0.0
 0.0
 0.06640391512207172
 0.3277200521815423
 0.0
 1.0
 0.0
 0.0
 0.3750000001091819
 0.0
 0.0
 0.0
 0.9141275315081212
 0.0
 0.3608152117535282
 0.0
 1.0
 0.2733513642754329
 0.2724932384369658
 0.0
 0.08587246855813688
 0.0
 1.0
 0.0
 0.5657815793137183
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4342184207419862
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7266486357786697
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6391847882632913
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9999999985952241
 0.0
 0.0
 0.2861028464051148
 0.38338249824890097
 0.0
 1.0



=====Finished running Instance #704=====





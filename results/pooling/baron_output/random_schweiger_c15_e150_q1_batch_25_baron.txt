===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.30     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.33
 Total CPU time used:                 0.31

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -204.622
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -478.571
 Preprocessing found feasible solution with value -602.474
 Preprocessing found feasible solution with value -623.266
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            23.31     -640.232         -623.266       
         25+            5            53.22     -638.946         -623.266       
        126+            8            83.12     -638.946         -623.266       
        175+            7           113.01     -638.946         -623.266       
        320             8           142.91     -638.946         -623.266       
        425+            6           172.81     -638.946         -623.266       
       2328            11           202.69     -638.946         -623.266       
       5620            10           232.58     -638.946         -623.266       
       8847+            8           262.49     -638.946         -623.266       
       9120+            8           292.38     -638.946         -623.266       
       9814            12           322.26     -638.946         -623.266       
      13675             8           352.14     -638.946         -623.266       
      15513            13           382.03     -638.946         -623.266       
      17084             6           411.91     -638.946         -623.266       
      17263            10           441.81     -638.946         -623.266       
      17341+            5           471.72     -638.946         -623.266       
      17478+            7           501.60     -638.946         -623.266       
      17658+            6           531.51     -638.946         -623.266       
      17841             9           561.41     -638.946         -623.266       
      18011             7           591.31     -638.946         -623.266       
      18127+            7           621.20     -638.946         -623.266       
      21220            16           651.08     -638.946         -623.266       
      25298             8           680.97     -638.946         -623.266       
      30005             9           710.85     -638.946         -623.266       
      32956+            2           740.75     -638.946         -623.266       
      33102+            4           770.64     -637.731         -623.266       
      33379+            7           800.54     -637.731         -623.266       
      33482+            3           830.43     -637.731         -623.266       
      33563+            4           860.32     -637.731         -623.266       
      33646+            8           890.21     -635.523         -623.266       
      33760+            6           920.12     -635.523         -623.266       
      35710            10           950.00     -635.523         -623.266       
      39889             8           979.89     -635.523         -623.266       
      44318            21          1009.77     -635.523         -623.266       
      48339             9          1039.66     -635.523         -623.266       
      51382            11          1069.55     -635.523         -623.266       
      53083+            5          1099.45     -634.677         -623.266       
      53171+            4          1129.36     -634.677         -623.266       
      53261+            3          1159.25     -627.420         -623.266       
      53283             0          1168.34     -623.328         -623.266       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                  1173.00
 Total CPU time used:              1168.40

 Total no. of BaR iterations:   53283
 Best solution found at node:       1
 Max. no. of nodes in memory:      21
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -165.898
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -626.260
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            19.28     -632.906         -626.260       
         22+            4            49.33     -629.847         -626.260       
         73+            2            79.25     -628.570         -626.260       
         79             0            84.04     -626.323         -626.260       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                    84.58
 Total CPU time used:                84.16

 Total no. of BaR iterations:      79
 Best solution found at node:       1
 Max. no. of nodes in memory:       7
 
 All done
===========================================================================



*****Running Instance #49*****


objective value: -623.265893192
objective bound: -623.328226011
BARON solution time: 1172.99

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.1257645436983323
 1.7356338998952598
 0.0
 0.8742354565625036
 1.3478419651730218
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 1.000000000340957
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.847873311839261
 1.7087239866805186
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.152126688953776
 1.2912760130526415
 0.4050320653411999
 1.157459867716893
 0.0
 0.0
 0.0
 0.0
 0.6719294752337324
 1.9201724210745605
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.13944592278289472
 0.4183377683246654
 0.0
 0.7500000001129492
 2.25000000020979
 0.0
 0.5193408950947004
 1.5580226851809595
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5912131823043512
 1.7736395468016715
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.303870793324979
 0.8613984441895053
 0.834730762767866
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.898837254589687
 1.6329457511770527
 0.0
 0.0
 0.0
 1.1011627464536304
 0.3670542487378164
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6150909468597222
 0.30754547337959465
 0.0
 0.0
 1.3849090534014612
 0.6924545265875445
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6163569013838814
 0.0
 0.0
 0.0
 0.4612753862648459
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5387246147075304
 0.9808629052207017
 0.480412480369671
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5506421428492219
 0.7753210710538684
 0.0
 0.4493578575421503
 0.22467892866363914
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5939607840908047
 0.6141250599218525
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9801040359523672
 2.519587521304377
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.3836430993043814
 1.5784094664909916
 0.0
 0.019895964489898933
 0.0
 1.4060392163376325
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.222077421480258
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.42159053437470095
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9223677125181172
 0.0
 0.0
 0.1386015564583469
 2.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7779225788992975
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.38587494039192427
 0.9230384597521435
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6053151061849774
 0.0
 0.0
 0.0
 0.0
 0.09081410116080561
 0.0
 0.0191370953668253
 2.0817933734122414
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.325963214138624
 4.556597298467643
 1.2080858438160709
 0.0
 0.0
 0.5577836911001731
 0.674036786274046
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 6.531783005578455
 0.0
 1.5624919330218636
 0.0
 3.0
 0.9226364202393168
 2.0773635802541968
 0.0
 1.4682169951488775
 0.0
 2.0776322882663325
 0.0
 2.861398443537574
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.222077421691763
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 2.077363579989006
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.592101896248286
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.364852729078521
 3.44340270196719
 0.0
 5.499691557256537
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.9801040358089088
 2.5195875211217076
 0.0
 1.0
 0.5939607840562655
 0.614125059886186
 0.0
 0.0
 2.0
 0.9999999996199793
 0.0
 1.538724614557032
 0.9808629051247718
 0.48041248032269357
 1.6163569012771835
 0.0
 0.0
 0.0
 0.4612753862339852
 0.0
 0.0
 2.0
 0.9999999999348702
 0.0
 0.0
 0.0
 6.0
 1.9999999997649531
 0.0
 0.0
 1.3038707932439755
 0.8613984441359882
 0.8347307627160054
 2.0
 6.0
 0.0
 2.0
 1.0
 0.0
 0.0
 1.0769615405365123
 3.077632288681093
 0.0
 0.0
 5.000000000612577
 2.9999999996248747
 2.0
 0.0
 0.0
 1.0000000002727734
 2.0
 3.08347586494587
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7753210713485036
 0.5695746622980862
 1.0
 0.0
 0.0
 0.06972296138492891
 0.22467892874902037
 0.0
 1.0
 0.0
 0.0
 0.37500000002225586
 0.0
 0.0
 0.0
 0.8164728756849085
 0.0
 0.3760877711004732
 0.0
 1.0
 0.30754547339961974
 0.2596704475201547
 0.0
 0.18352712439091534
 0.0
 1.0
 0.2605830442177641
 0.5628822717981254
 0.0
 0.16424505818726112
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4371177282416785
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6924545266326486
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6239122289354035
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5751718975949748
 0.0
 0.0
 0.2956065911227504
 0.4304253377380011
 0.0
 1.0



=====Finished running Instance #49=====




*****Running Instance #50*****


objective value: -626.260212532
objective bound: -626.322844811
BARON solution time: 84.58

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.3025313007481985
 0.0
 0.0
 0.6974686976481443
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999996025382
 0.0
 0.0
 1.0000000005773375
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6750397186630535
 0.400011221747452
 0.0
 0.0
 0.0
 0.0
 4.324960281649347
 2.5628605227896206
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.23968121925002978
 0.5734249870087013
 0.0
 0.0
 0.0
 0.0
 0.7293975328403273
 1.7450460745410072
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9409256386582394
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.03669742187510727
 0.11009226556331803
 0.0
 0.7499999999982929
 2.249999999945343
 0.0
 0.5619912167667979
 1.6859736502482459
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6513113616095098
 1.9539340847763194
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.483927183647198
 0.9108273661416769
 0.6052454449108674
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.015221040219154
 1.9847789608648383
 0.0
 0.0
 0.0
 1.8091326230302647
 1.1908673757964345
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.43264972936613
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5013567556887065
 0.25067837772134377
 0.0
 0.0
 1.4986432444799096
 0.7493216218624944
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999998725388
 0.0
 0.0
 0.0
 0.49411739827339807
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5058826024925371
 1.0
 0.49411739771616503
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4808606642596254
 0.7404303303844451
 0.0
 0.5191393359736814
 0.2595696673774656
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6366222695359355
 0.7028886362221266
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.8613714934534793
 2.543010858972863
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 1.6222129908136738
 0.0
 0.1386285069547407
 0.0
 1.3633777295164302
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.23180232080628826
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999988809953
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.37778700944692434
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5058826017506577
 0.0
 1.1756463375081674
 0.08917263220511892
 1.5673502697135713
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7681976790682914
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.29711136243309105
 1.0309212478816243
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.05907436211588388
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5160728141973681
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.39475455446634
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.2212909960752825
 1.0750509404237156
 1.3395109055896457
 0.0
 0.0
 0.1467896874357453
 0.7787090038588448
 0.0
 3.0
 0.0
 0.0
 2.9999999999473164
 0.0
 0.0
 0.0
 5.000000001306846
 0.0
 0.8131062062475128
 0.0
 3.0
 0.7520351334100502
 2.247964867017754
 0.0
 2.9999999988620627
 0.0
 2.494117398933061
 0.4326497296741913
 1.3025313008564083
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6974686976912507
 0.0
 0.0
 0.0
 2.9409256389497047
 0.0
 0.0
 2.2479648663424037
 0.0
 2.9999999946996363
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.4744436073907075
 0.0
 0.0
 6.8878208045848766
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.6052454463896537
 0.0
 0.0
 5.404382352600682
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.861371493329203
 2.543010858808356
 0.0
 1.0
 0.6366222708035011
 0.7028886376221563
 0.0
 0.0
 2.0
 0.9999999977258031
 0.0
 1.505882602389562
 1.0
 0.49411739768824986
 1.999999999954393
 0.0
 0.0
 0.0
 0.4941173982836494
 0.0
 0.0
 2.0
 0.9999999995711126
 0.4326497305968551
 0.0
 0.0
 4.824353663195371
 3.1756463366180934
 0.0
 0.0
 1.4839271863149495
 0.9108273677830006
 0.605245446005095
 2.0
 6.0
 0.0
 1.9409256385045965
 0.9999999999718896
 0.0
 0.0
 0.969078752303521
 2.3184710620610134
 0.0
 0.0
 5.000000000213491
 2.9628717444713066
 1.9999999994857918
 0.0
 0.0
 1.000000000521998
 1.9999999984714623
 0.0
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7404303320741709
 0.13500794372638764
 0.9999999980070499
 0.0
 0.0
 0.018348710925030494
 0.2595696679678838
 0.0
 1.0
 0.0
 0.0
 0.3749999999795049
 0.0
 0.0
 0.0
 0.6250000001514395
 0.0
 0.2473289386238572
 0.0
 1.0
 0.25067837782514873
 0.28099560836580223
 0.0
 0.3749999998626275
 0.0
 0.9999999999601046
 0.9999999971544882
 0.6512656508723133
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.34873434909107087
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7493216221882706
 0.0
 0.9999999982151467
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7526710611564494
 0.0
 0.0
 0.8649920562924773
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.32565568078586093
 0.0
 0.0
 1.0



=====Finished running Instance #50=====





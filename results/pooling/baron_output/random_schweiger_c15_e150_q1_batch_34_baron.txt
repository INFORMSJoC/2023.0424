===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.34     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.37
 Total CPU time used:                 0.35

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -187.098
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -546.965
 Preprocessing found feasible solution with value -628.604
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
*         1             1             8.99     -644.353         -629.053       
          1             1            15.59     -639.344         -629.053       
         28+            7            45.50     -637.481         -629.053       
*        31+            6            50.83     -637.481         -629.116       
       1183            10            82.32     -637.481         -629.116       
*      1600             8            86.79     -637.481         -629.156       
       4956             7           116.69     -637.481         -629.156       
       5213+            5           146.60     -637.481         -629.156       
       5374+            8           176.49     -637.481         -629.156       
       5454+            6           206.39     -635.207         -629.156       
       5881+            5           236.29     -635.207         -629.156       
       6143             5           266.18     -634.918         -629.156       
       6312+            6           296.08     -634.900         -629.156       
       6435             4           325.98     -634.900         -629.156       
       6663+            4           355.87     -634.414         -629.156       
       6828+            7           385.76     -633.117         -629.156       
       7055             0           411.89     -629.219         -629.156       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   413.50
 Total CPU time used:               411.96

 Total no. of BaR iterations:    7055
 Best solution found at node:    2800
 Max. no. of nodes in memory:      13
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -145.449
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -318.574
 Preprocessing found feasible solution with value -624.390
 Preprocessing found feasible solution with value -625.531
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            26.13     -638.177         -625.531       
         22+            5            56.03     -636.412         -625.531       
        216             8            86.53     -636.412         -625.531       
       3020             8           116.42     -636.412         -625.531       
       7125            10           146.31     -636.412         -625.531       
      10021+            3           176.20     -636.412         -625.531       
      13324             7           206.09     -634.584         -625.531       
      13879             0           236.97     -625.594         -625.531       

                         *** Normal completion ***            

 Wall clock time:                   237.88
 Total CPU time used:               236.97

 Total no. of BaR iterations:   13879
 Best solution found at node:      86
 Max. no. of nodes in memory:      15
 
 All done
===========================================================================



*****Running Instance #67*****


objective value: -629.155948365
objective bound: -629.21887025
BARON solution time: 413.5

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 0.8910126334683907
 0.4839270081829272
 0.0
 1.1089873668081571
 0.6023135008119403
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 1.0000000002823948
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.09888352178486337
 1.5542769301075123
 0.8336826356898961
 0.0
 0.0
 0.0
 0.21921784061217311
 3.4457230707537656
 1.8482160005326567
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0468471949491533
 0.04345579610896921
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.8486467152025792
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.70261785338008
 2.1078535600030026
 0.0
 0.5418999067121045
 1.6256997200204106
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7554822402205156
 2.266446720517448
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.9786379225213738
 0.021362077387497857
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.7647301152124806
 2.2662805683165246
 0.0
 0.0
 0.0
 1.6315716054374132
 1.3374177120859403
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5549335825521973
 0.2774667912299539
 0.0
 0.0
 1.4450664177089305
 0.7225332087343022
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.8838830233945585
 0.0
 0.0
 0.0
 0.6323081661401468
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3676918348380362
 0.9143263748965406
 0.717981790561612
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5217470367251436
 0.7608735180030913
 0.0
 0.47825296366692416
 0.23912648172048473
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4621735722853356
 0.5549721732347255
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4764185311292044
 2.6001195746901935
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.11611697730670438
 1.3449082131052246
 0.0
 0.5235814692887464
 0.0
 1.5378264281220366
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.24028690007005593
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3369904252837683
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4838088106413368
 0.0
 1.6036982806119529
 0.021362078166080666
 2.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7597131003169082
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.445027827053603
 0.95315280537831
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.15135328567609727
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.08567362568589623
 4.892397414749455
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.282620554955246
 2.4868430875822716
 1.0171457453227302
 0.0
 0.0
 0.0
 0.7173794454587532
 0.0
 3.0
 0.0
 0.0
 2.8104714133483886
 0.0
 0.0
 0.0
 5.031010683338807
 0.0
 0.0
 0.0
 3.0
 0.832400373782151
 2.1675996267107918
 0.0
 2.968989317427824
 0.0
 2.5161911901490366
 0.0
 1.3749396416088138
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.7113008675669
 0.0
 0.0
 0.0
 2.8486467151467725
 0.0
 0.0
 2.167599626443233
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0903029909696667
 0.0
 0.0
 5.513156911898595
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.021928960698925
 0.0
 0.0
 5.0765381058188455
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.4764185310097862
 2.600119574477461
 0.0
 1.0
 0.46217357227256356
 0.5549721732194093
 0.0
 0.0
 2.0
 0.9999999996260692
 0.0
 1.3676918347032423
 0.9143263748064452
 0.7179817904908747
 1.8838830232445751
 0.0
 0.0
 0.0
 0.6323081660888304
 0.0
 0.0
 2.0
 0.9999999999320182
 0.0
 0.0
 0.0
 4.396301720331308
 3.6036982801410766
 0.0
 0.0
 2.0
 0.9786379225149893
 0.02136207738735872
 2.0
 6.0
 0.0
 1.8486467150181944
 0.9999999999969941
 0.0
 0.0
 1.0468471949143536
 0.04345579610752434
 0.0
 0.31810136238532155
 5.000000000677138
 2.681898636123784
 2.0
 0.0
 0.0
 1.0000000002138154
 2.0
 1.0862405089456306
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7608735182876057
 0.31085538597940404
 1.0
 0.0
 0.0
 0.0
 0.2391264818099017
 0.0
 1.0
 0.0
 0.0
 0.351308926656115
 0.0
 0.0
 0.0
 0.628876335404619
 0.0
 0.0
 0.0
 1.0
 0.2774667912488163
 0.2709499533273673
 0.0
 0.37112366466747143
 0.0
 1.0
 0.06088608152813156
 0.4455063166920803
 0.0
 0.13528083482547282
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5544936833517219
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7225332087834215
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6891446140574239
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8038330836463956
 0.0
 0.0
 0.37774112007464833
 0.0
 0.0
 1.0



=====Finished running Instance #67=====




*****Running Instance #68*****


objective value: -625.531320059
objective bound: -625.593879447
BARON solution time: 237.87

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.1370426867922878
 1.2754893069529827
 0.0
 0.8629573135802957
 0.9680312257515616
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 1.0000000000110538
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8741671328590197
 0.459970006405074
 0.0
 0.0
 0.0
 0.0
 4.125832868311423
 2.1709342521994275
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0780854802444935
 1.226671576421994
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.9999999999954358
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5437382013906343
 1.6312146040910145
 0.0
 0.5561578804692857
 1.6684736413232555
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9001039183916643
 2.700311754987487
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.8678307679652761
 0.13216923195474392
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.653050340652127
 2.0604588637743007
 0.0
 0.0
 0.0
 0.8916508866829558
 0.3948399088735698
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.08695387675381917
 0.0
 0.5169123190903634
 0.25845615950235745
 0.0
 0.0
 1.4830876812053364
 0.7415438404854493
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.5434445439943203
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4565554569843304
 0.9900517302792162
 0.5533928131432013
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3779410318814251
 0.6889705155404673
 0.0
 0.6220589686258979
 0.3110294841218997
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5303783555834897
 0.4666039123946473
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.589798223372376
 2.815702929807124
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 1.3899187154691446
 0.0
 0.41020177708466005
 0.0
 1.4696216447633685
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.27903066315168534
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6100812853703635
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4565554550686177
 0.0
 0.45529877398700697
 0.13216923267486358
 1.913046123411079
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7209693372261655
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.533396087811407
 0.9219145201333129
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.8614741968456705
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.009948270303597243
 3.624310236593984
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.0669115477210793
 1.3341371393504036
 0.996982268179768
 0.0
 0.0
 0.0
 0.9330884529386148
 0.0
 3.0
 0.0
 0.0
 2.1749528055809986
 0.0
 0.0
 0.0
 6.713509204893816
 0.0
 0.0
 0.0
 3.0
 0.7753684785927208
 2.2246315218912835
 0.0
 1.2864907959735827
 0.0
 2.5434445456400243
 0.0
 2.4125319937564442
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.8309885393564074
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 2.2246315216907857
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.3047570567248457
 0.0
 0.0
 6.296767120546718
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.08695387675649582
 0.0
 0.0
 3.6004156734611117
 0.0
 0.0
 5.40550115328111
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.5897982232131038
 2.815702929525843
 0.0
 0.999999999997192
 0.5303783556290769
 0.4666039124347707
 0.0
 0.0
 2.0
 0.9999999995464715
 0.0
 1.4565554568470047
 0.9900517301885402
 0.5533928131018306
 1.9999999999935025
 0.0
 0.0
 0.0
 0.5434445439407618
 0.0
 0.0
 2.0
 0.9999999999459809
 0.08695387697843884
 0.0
 0.0
 5.544701226961211
 2.455298772616936
 0.0
 0.0
 2.0
 0.8678307679707065
 0.13216923197428
 2.0
 5.999999999927193
 0.0
 2.0
 0.9999999999532425
 0.0
 0.0
 1.0780854801561648
 1.2266715763215699
 0.0
 0.0
 5.000000000890261
 2.6309042584614692
 2.0
 0.0
 0.0
 0.9999999999950394
 2.0
 2.2435205325078758
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.6889705158831781
 0.17483342654073586
 0.9999999999139022
 0.0
 0.0
 0.0
 0.31102948429181676
 0.0
 1.0
 0.0
 0.0
 0.2718691006853074
 0.0
 0.0
 0.0
 0.8391886506016899
 0.0
 0.0
 0.0
 1.0
 0.2584561595211618
 0.2780789402240929
 0.0
 0.16081134947623008
 0.0
 1.0
 0.0
 0.5685213433414207
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.43147865674842784
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7415438405326311
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.8251665735154232
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9999999974156455
 0.0
 0.0
 0.4500519591703042
 0.0
 0.0
 1.0



=====Finished running Instance #68=====





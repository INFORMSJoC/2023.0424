===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.33     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.35
 Total CPU time used:                 0.34

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -189.964
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -502.790
 Preprocessing found feasible solution with value -632.891
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
*         1             1            17.77     -648.946         -632.927       
          1             1            22.56     -646.831         -632.927       
         28+            7            53.40     -645.114         -632.927       
        485            13            83.28     -645.114         -632.927       
       2854             6           113.94     -645.114         -632.927       
       6652             7           143.82     -645.114         -632.927       
      10253            12           173.70     -645.114         -632.927       
      12120             6           203.58     -645.114         -632.927       
      15917            11           233.46     -645.114         -632.927       
      19876            12           263.34     -645.114         -632.927       
      23553            10           293.21     -645.114         -632.927       
      27194            17           323.09     -645.114         -632.927       
      31187            10           352.97     -645.114         -632.927       
      35258            11           382.86     -645.114         -632.927       
      38260            11           412.74     -645.114         -632.927       
      41955+            7           442.63     -645.114         -632.927       
      44735+            4           472.53     -645.114         -632.927       
      46519            13           502.41     -645.114         -632.927       
      50491             8           532.29     -645.114         -632.927       
      54320            12           562.17     -645.114         -632.927       
      57240            12           592.05     -645.114         -632.927       
      59928            11           622.10     -645.114         -632.927       
      63830             9           651.98     -645.114         -632.927       
      67953            10           681.85     -644.723         -632.927       
      71555            11           711.73     -644.723         -632.927       
      75564            14           741.61     -644.723         -632.927       
      79984             9           771.48     -644.723         -632.927       
      83964            14           801.37     -644.723         -632.927       
      88132            12           831.25     -644.723         -632.927       
      89071             7           861.14     -644.723         -632.927       
      91808            13           891.02     -644.723         -632.927       
      96048            11           920.90     -644.723         -632.927       
      99431+            8           950.79     -644.723         -632.927       
      99646+            8           980.70     -644.723         -632.927       
     103020             6          1010.58     -644.723         -632.927       
     105731             7          1040.47     -644.723         -632.927       
     109498            13          1070.35     -644.723         -632.927       
     112211            11          1100.23     -644.723         -632.927       
     112942+            8          1130.11     -644.345         -632.927       
     113019+            5          1160.03     -644.345         -632.927       
     115690            10          1189.91     -644.345         -632.927       
     120045            14          1219.78     -644.345         -632.927       
     124396            12          1249.67     -644.345         -632.927       
     128430            15          1279.54     -644.345         -632.927       
     132729            12          1309.42     -644.345         -632.927       
     135157+            4          1339.31     -644.345         -632.927       
     138095            10          1369.19     -644.345         -632.927       
     142287            11          1399.07     -644.345         -632.927       
     146379            11          1428.94     -644.345         -632.927       
     148897             9          1458.84     -644.345         -632.927       
     151711            12          1488.71     -644.345         -632.927       
     155531            16          1518.59     -644.345         -632.927       
     159847            11          1548.47     -644.345         -632.927       
     160859+            7          1578.35     -644.345         -632.927       
     164182            11          1608.23     -644.345         -632.927       
     167469            13          1638.13     -644.345         -632.927       
     170828             7          1668.01     -644.045         -632.927       
     170968+            3          1697.91     -644.045         -632.927       
     171068+            2          1727.79     -644.045         -632.927       
     174123             5          1757.67     -642.799         -632.927       
     177945            11          1787.55     -642.799         -632.927       
     182051            10          1817.43     -642.799         -632.927       
     185658+            4          1847.31     -642.799         -632.927       
     189205             6          1877.19     -642.799         -632.927       
     192796             8          1907.07     -641.681         -632.927       
     195489             5          1936.95     -641.384         -632.927       
     199709             9          1966.83     -641.384         -632.927       
     203959             8          1996.71     -640.586         -632.927       
     207643             9          2026.59     -640.586         -632.927       
     211061             9          2056.46     -640.586         -632.927       
     215503            10          2086.34     -640.586         -632.927       
     219299             9          2116.22     -640.586         -632.927       
     223383            11          2146.09     -640.586         -632.927       
     227459            11          2175.98     -640.586         -632.927       
     231760            15          2205.86     -640.586         -632.927       
     236108            12          2235.73     -640.586         -632.927       
     239894             8          2265.61     -640.586         -632.927       
     243825             7          2295.49     -640.586         -632.927       
     246157             7          2325.37     -639.231         -632.927       
     250383             6          2355.25     -639.231         -632.927       
     254476             7          2385.13     -639.231         -632.927       
     256655             0          2402.75     -632.990         -632.927       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                  2412.78
 Total CPU time used:              2402.86

 Total no. of BaR iterations:  256655
 Best solution found at node:     469
 Max. no. of nodes in memory:      23
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -191.371
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -480.224
 Preprocessing found feasible solution with value -628.679
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            14.26     -637.441         -628.679       
         54+            8            45.53     -633.903         -628.679       
        184+            6            75.84     -633.903         -628.679       
        315+            4           105.73     -633.903         -628.679       
        941             8           136.90     -632.685         -628.679       
       4425            15           166.77     -632.685         -628.679       
       8248            15           196.65     -632.685         -628.679       
      12430            11           226.52     -632.685         -628.679       
      16540            12           256.39     -632.685         -628.679       
      20954            13           286.27     -632.685         -628.679       
      25086            14           316.15     -632.685         -628.679       
      29398            11           346.03     -632.685         -628.679       
      33774            13           375.90     -632.685         -628.679       
      38404            13           405.78     -632.685         -628.679       
      42517             8           435.66     -632.685         -628.679       
      47069            13           465.54     -632.685         -628.679       
      51532            13           495.42     -632.685         -628.679       
      51988+            2           525.31     -629.812         -628.679       
      51989             0           526.57     -628.742         -628.679       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   528.92
 Total CPU time used:               526.69

 Total no. of BaR iterations:   51989
 Best solution found at node:     118
 Max. no. of nodes in memory:      20
 
 All done
===========================================================================



*****Running Instance #417*****


objective value: -632.926818036
objective bound: -632.990117009
BARON solution time: 2412.78

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 0.9794192981287725
 1.1252196799787288
 0.0
 1.020580701818579
 1.1725085393852237
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 1.0000000002753193
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5182096888015245
 3.054599102696607
 1.3145497722256423
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3300353205424084
 1.945400898070049
 0.8372052179257108
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5091623008569743
 3.31921579528407
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0644954667636734
 0.1934864002477927
 0.0
 0.7500000000198582
 2.250000000214836
 0.0
 0.5364146805091428
 1.6092440416201115
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6490898528796785
 1.9472695587648758
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.7610145163002577
 0.9425235167119672
 0.2964619670496653
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.694508027320976
 1.8981693420722299
 0.0
 0.0
 0.0
 0.3054919736676176
 0.10183065788519688
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.03285272338961842
 0.19308924073513586
 0.0
 0.0
 0.0
 0.0
 0.5695608522409568
 0.28478042607941895
 0.0
 0.0
 1.4304391480160261
 0.7152195738971585
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.3192157938766465
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6807842070546608
 1.0
 0.3192157931755519
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5920382842810505
 0.7960191414956664
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.40796171608462917
 0.20398085787867695
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5673622079445687
 0.6195171750177917
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3677966215161068
 3.5290292181040117
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 0.7444323594832667
 0.0
 0.6322033788906651
 0.0
 1.4326377922243805
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999999131228
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4073226316990397
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6807842059805499
 0.0
 0.0
 0.05747648360908275
 1.9671472769830713
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.8069107594286217
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3804828249735803
 0.4908376994839887
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2389854843071332
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.405809814270077
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.3880574262406085
 4.887358563723774
 1.1868793827751718
 0.0
 0.0
 0.2579818670276628
 0.0
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 7.592677369324847
 0.0
 0.0
 0.0
 3.0
 0.8543412783203757
 2.145658722137749
 0.0
 0.40732263156556253
 0.0
 2.319215794774614
 0.2259419641247542
 2.1046389780456223
 0.6119425740801518
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.193089241140506
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 2.145658721913185
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.828378096085606
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.5963594116494066
 3.112641436538168
 0.0
 5.896825839734552
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.36779662140323
 3.529029217802579
 0.0
 1.0
 0.5673622081528368
 0.6195171752457795
 0.0
 0.0
 2.0
 0.9999999992846418
 0.0
 1.6807842069124073
 1.0
 0.319215793161943
 2.0
 0.0
 0.0
 0.0
 0.31921579384864107
 0.0
 0.0
 2.0
 0.9999999999444625
 0.03285272339013168
 0.19308924077671252
 0.0
 6.0
 1.999999999801955
 0.0
 0.0
 1.761014516335813
 0.9425235167389148
 0.29646196707214023
 2.0
 6.0
 0.0
 2.0
 0.9999999999943143
 0.0
 0.0
 1.5091623007880508
 3.3192157951382857
 0.0
 0.8482450093387439
 5.000000000652885
 2.1517549901110877
 1.9999999999984577
 0.0
 0.0
 1.000000000200989
 1.9999999998638303
 2.297728219269681
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7960191420714717
 0.6109198204611194
 0.9999999996273535
 0.0
 0.0
 0.03224773336997952
 0.0
 0.0
 1.0
 0.0
 0.0
 0.3750000000124196
 0.0
 0.0
 0.0
 0.9490846711485956
 0.0
 0.0
 0.0
 1.0
 0.2847804260931057
 0.26820734025240794
 0.0
 0.05091532893807101
 0.0
 1.0
 0.9999999997635247
 0.4897096490969621
 0.20398085802409296
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5102903509432667
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7152195739454175
 0.0
 0.9999999999883687
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.32454492644016714
 0.3890801795636411
 0.0
 1.0



=====Finished running Instance #417=====




*****Running Instance #418*****


objective value: -628.678947626
objective bound: -628.741821803
BARON solution time: 528.92

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.1406909601665511
 0.0
 0.0
 0.8593090395842355
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 1.0000000002504768
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9455652526932246
 0.48215373754619933
 0.0
 0.0
 0.0
 0.0
 4.054434748183374
 2.067399221693953
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.16760290126122168
 0.45541137873834064
 0.0
 0.0
 0.0
 0.0
 0.7386023247672304
 2.006933654080472
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.947806466230227
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.005437336404301657
 0.016312009178770355
 0.0
 0.7500000000611465
 2.250000000209186
 0.0
 0.5625786984460972
 1.6877360953439007
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6819839653591283
 2.045951896096868
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.7319349287229846
 0.45091395713059407
 0.8171511142903402
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.4725124239099046
 2.838185293650811
 0.0
 0.0
 0.0
 0.4216988781396937
 0.2676034051676971
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.20443429782015543
 0.0
 0.0
 0.0
 0.23505751393995578
 0.0
 0.49979013784706544
 0.24989506887515195
 0.0
 0.0
 1.5002098624020062
 0.7501049310476524
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.568133730569504
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4318662703731553
 0.9719904249258448
 0.5961433049932289
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5769012449518034
 0.7884506217444236
 0.0
 0.4230987554393792
 0.21154937752664457
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.43094864349028617
 0.6389390390912854
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.2192476370911935
 2.854303737237928
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 1.3106977171527858
 0.0
 0.7807523633038543
 0.0
 1.5690513565285324
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.193120655850685
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999998721392
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6893022834541211
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4318662693714576
 0.0
 1.1057886991914039
 0.549086043232561
 1.560508188515236
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.8068793444838186
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.36106096059630666
 1.0937947742160032
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.052193534638567726
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2068593945412965
 0.0
 0.0
 0.0
 0.0
 0.06120567726968179
 0.0
 0.028009575637442986
 5.182848886642565
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.3653518672931413
 1.427718990244389
 1.0698876823909964
 0.0
 0.0
 0.02174934559278436
 0.6346481331303776
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 7.3106977174076775
 0.0
 0.6230142799825276
 0.0
 3.0
 0.7496852067222174
 2.2503147937539243
 0.0
 0.6893022832766362
 0.0
 2.568133731385285
 0.2044342977797003
 1.1406909601451474
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8593090395668003
 0.0
 0.0
 0.0
 2.9478064662344594
 0.0
 0.0
 2.250314793449659
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.7455359787909432
 0.0
 0.0
 6.121833969929332
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2350575138944028
 0.0
 0.0
 2.727935861409094
 0.0
 0.0
 5.073551374328458
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.2192476369889962
 2.8543037369926116
 0.0
 1.0
 0.43094864384517945
 0.6389390396193831
 0.0
 0.0
 2.0
 0.9999999991732234
 0.0
 1.431866270236217
 0.9719904248355269
 0.596143304940647
 2.0
 0.0
 0.0
 0.0
 0.5681337305268812
 0.0
 0.0
 2.0
 0.999999999893226
 0.43949181185424924
 0.0
 0.0
 4.894211301694063
 3.1057886985898997
 0.0
 0.0
 1.7319349287047308
 0.4509139571357783
 0.8171511142887099
 2.0
 6.0
 0.0
 1.9478064660353032
 0.9999999999913011
 0.0
 0.0
 0.906205226048928
 2.4623450328782464
 0.0
 0.0
 5.000000000672016
 2.5495529591390618
 1.999999999982407
 0.0
 0.0
 1.000000000178864
 1.9999999996917277
 0.0
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7884506224073706
 0.1891130505132146
 0.9999999991699198
 0.0
 0.0
 0.002718668195209188
 0.21154937769796664
 0.0
 1.0
 0.0
 0.0
 0.3750000000107747
 0.0
 0.0
 0.0
 0.9138372146635383
 0.0
 0.1849502700303733
 0.0
 1.0
 0.24989506889876206
 0.28128934920522036
 0.0
 0.08616278541070946
 0.0
 1.0
 0.4651606521564407
 0.570345480170344
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.42965451985750064
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7501049311349189
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8150497299458465
 0.0
 0.0
 0.810886949527676
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5348393476265535
 0.0
 0.0
 0.3409919826607417
 0.0
 0.0
 1.0



=====Finished running Instance #418=====





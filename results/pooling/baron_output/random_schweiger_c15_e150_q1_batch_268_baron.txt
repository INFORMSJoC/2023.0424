===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.30     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.32
 Total CPU time used:                 0.31

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -192.467
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -629.778
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            20.51     -645.956         -629.778       
         46+            9            50.41     -642.656         -629.778       
         86+            5            80.32     -642.656         -629.778       
        121+            8           110.95     -642.656         -629.778       
        194             9           141.26     -637.275         -629.778       
       1854             8           171.15     -637.275         -629.778       
       4888             6           201.03     -637.275         -629.778       
       7956             9           230.92     -637.275         -629.778       
      11478            13           260.81     -637.275         -629.778       
      14289            10           290.69     -637.275         -629.778       
      17310            11           320.57     -637.275         -629.778       
      17850+            6           350.46     -636.100         -629.778       
      17973+            9           380.35     -635.175         -629.778       
      20957            21           410.23     -635.175         -629.778       
      25149            17           440.10     -635.175         -629.778       
      29180            15           469.98     -635.175         -629.778       
      30166+            4           499.89     -635.175         -629.778       
      30228+            4           529.80     -632.565         -629.778       
      30241             0           539.23     -629.841         -629.778       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   541.65
 Total CPU time used:               539.49

 Total no. of BaR iterations:   30241
 Best solution found at node:     193
 Max. no. of nodes in memory:      23
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -634.900
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -634.900
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            17.13     -643.788         -634.900       
          9             0            38.91     -634.963         -634.900       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                    39.45
 Total CPU time used:                39.27

 Total no. of BaR iterations:       9
 Best solution found at node:       7
 Max. no. of nodes in memory:       3
 
 All done
===========================================================================



*****Running Instance #535*****


objective value: -629.777851166
objective bound: -629.840835244
BARON solution time: 541.64

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.1548493415332477
 1.845150657264637
 0.0
 0.8451506582176014
 1.3503322350500127
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999999125904
 0.0
 0.0
 0.9999999998501556
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4821694517051431
 3.106638541526243
 1.3818136704569748
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2938613695211346
 1.8933614587216498
 0.8421555040269361
 0.23539306721165604
 0.6559159680391254
 0.0
 0.0
 0.0
 0.0
 0.8756824316100386
 2.44006374795916
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.999999999422711
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7499999993893632
 2.2499999994361386
 0.0
 0.1756747079244081
 0.527024124124195
 0.0
 0.5579756632463515
 1.6739269907021683
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5163496284602939
 1.5490488862776268
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9265460357710549
 0.7911864628061525
 0.28226750097510406
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.711494446790864
 1.7050585882422726
 0.0
 0.1987728931303347
 0.0
 0.28850555298943453
 0.08612787340193533
 0.0
 0.010040644173393759
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.028310250377003052
 0.0
 0.5120648974726095
 0.25603244861727137
 0.0
 0.0
 1.4879351026532377
 0.7439675509882309
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4763719173087468
 0.0
 0.0
 0.0
 0.41079425940785314
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.58920574097343
 0.9891223390170908
 0.4216719202358041
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4761733589654393
 0.7380866785625316
 0.0
 0.5238266410629145
 0.2619133201901716
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8184040026194971
 0.9495491895576261
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.8858472730789564
 1.0570577376060157
 0.0
 0.9999999999344844
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.5236280816949355
 0.8713891298604677
 0.0
 0.11415272700279758
 0.0
 1.1815959954711472
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.23135054773454256
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.99999999826774
 0.0
 2.2973011682337963
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3525800487237964
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.1128338208017472
 0.0
 0.0
 0.0
 1.9716897479739084
 0.0
 0.0
 0.0
 0.0
 5.999999999647606
 0.0
 0.0
 0.0
 0.0
 0.7686494524288634
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.05045080799030159
 0.8889245006518544
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.07345396456574851
 0.0
 0.010877661442372007
 2.5222496073550555
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.2142600380105684
 4.970621663688361
 1.76795319240269
 0.0
 0.0
 2.9999999990830215
 0.7857399614886849
 0.0
 3.0
 0.0
 0.0
 0.7026988321766096
 0.0
 0.0
 0.0
 7.615325928671856
 0.0
 0.8913090353168066
 0.0
 3.0
 0.7680973460898809
 2.231902654161963
 0.0
 0.3846740706875387
 0.0
 1.887166179819468
 0.0
 2.9999999988283834
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.195482893307775
 0.0
 0.0
 0.0
 2.9999999996981472
 0.0
 0.0
 2.231902653641469
 0.0
 2.999999999552572
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.3157461796335603
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.02831025041970437
 0.0
 0.0
 2.065398514941937
 3.02937833226972
 0.0
 3.9429050107447288
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.8858472732770142
 1.0570577377211263
 0.0
 1.0
 0.818404004795903
 0.9495491920825738
 0.0
 0.0
 2.0
 0.9999999988390778
 0.0
 1.5892057408605176
 0.9891223389540242
 0.4216719202184285
 1.4763719187178417
 0.0
 0.0
 0.0
 0.4107942597991348
 0.0
 0.0
 2.0
 0.9999999996127223
 0.028310252303865788
 0.0
 0.0
 6.0
 1.7911864619186224
 0.0
 0.20881353734822314
 1.9265460359165458
 0.7911864628789232
 0.28226750100842307
 1.9999999991141262
 6.0
 0.0
 2.0
 0.999999999528256
 0.0
 0.0
 1.1110754994957606
 3.0959797178756827
 0.0
 0.7760308213314198
 5.000000000803617
 2.223969174746619
 1.999999999973899
 0.0
 0.0
 0.9999999999277035
 1.9999999998065707
 3.1954828923986516
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.738086679451227
 0.6213277082052248
 0.9999999973416347
 0.0
 0.0
 0.37499999987642396
 0.2619133205262315
 0.0
 1.0
 0.0
 0.0
 0.08783735401226687
 0.0
 0.0
 0.0
 0.9519157410739878
 0.0
 0.21186055071743454
 0.0
 0.9999999999947895
 0.2560324487219716
 0.2789878317613133
 0.0
 0.04808425882609545
 0.0
 0.9999999990448925
 4.501090694543287e-8
 0.5774246708233652
 0.0
 2.3050575562366928e-8
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4225753291505658
 0.0
 0.0
 0.0
 0.9999999999592876
 0.0
 0.0
 0.7439675512823418
 0.0
 0.9999999999298285
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7881394486761827
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9999999319385171
 0.0
 0.0
 0.25817481435876544
 0.3786722916833033
 0.0
 0.9999999998965158



=====Finished running Instance #535=====




*****Running Instance #536*****


objective value: -634.899770548
objective bound: -634.963266842
BARON solution time: 39.44

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.1327904305409704
 0.0
 0.0
 0.8672095670529596
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9084574444576385
 0.0
 0.0
 1.0915425557447571
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.1878755712227722
 0.7481714811250783
 0.0
 0.0
 0.0
 0.0
 3.720581874035825
 2.3433710725141914
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.052936896192703
 1.126691017047139
 0.09154255591534917
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9871733210087004
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.18361368913454476
 0.550841067357809
 0.0
 0.7499999999098956
 2.2499999996610502
 0.0
 0.4630496903220305
 1.3891490709091683
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.603336620865198
 1.8100098625330479
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5884604492084642
 0.8687638031831243
 0.5427757475300747
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.734151030260422
 2.7207465549551437
 0.0
 0.0
 0.0
 0.34616131636870096
 0.1989410990459604
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.04324947734688372
 0.1766276347993277
 0.0
 0.0
 0.0
 0.0
 0.76520082630221
 0.3826004129029858
 0.0
 0.0
 1.2347991738803565
 0.617399586541416
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999998069788
 0.0
 0.0
 0.0
 0.3122365588152831
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6877634420000667
 1.0
 0.31223655823872776
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6023942624759024
 0.8011971287561184
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.39760573755046996
 0.1988028681581571
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.19246883986982904
 0.7212354914054446
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.5204686092331083e-8
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 2.5962208883417994
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 1.4548975842315588
 0.0
 0.0
 0.0
 1.8075311534569085
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999991562292
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.545102415733396
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6877634413772292
 0.0
 0.9196876541460194
 0.13123619704626527
 1.9567505229555056
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.8233723652449118
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.278764482386003
 0.9470631037426296
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.012826679795433263
 0.0
 0.0
 0.0
 0.0
 1.2658578876866537
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.282110286546448
 0.0
 0.0
 0.0
 0.0
 0.12942926455828113
 0.0
 0.0
 5.457224253019116
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.403591393381567
 1.9360470524701165
 0.9137043311366233
 0.0
 0.0
 0.7344547565020175
 0.0
 0.0
 3.0
 0.0
 0.0
 2.999999999560171
 0.0
 0.0
 0.0
 7.454897585127397
 0.0
 0.0
 3.1926548075369164e-8
 3.0
 1.147801239205196
 1.8521987612305435
 0.0
 0.5451024154150514
 0.0
 2.312236559335956
 0.21987711214621142
 1.132790430668461
 0.5964086062415819
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8672095671675244
 0.0
 0.0
 0.0
 2.987173321338784
 0.0
 0.0
 1.8521987604217727
 0.0
 2.999999999920805
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.2711704691551913
 0.0
 0.0
 6.0639529469377225
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.413346483392567
 0.0
 0.0
 5.596220888704215
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 2.0
 2.5962208882381153
 0.0
 1.0
 0.19246884688538604
 0.7212355177057856
 0.0
 0.0
 2.0
 0.9999999969832216
 0.0
 1.6877634418663645
 0.9999999999841443
 0.3122365582279225
 1.9999999998481695
 0.0
 0.0
 0.0
 0.31223655880624834
 0.0
 0.0
 2.0
 0.9999999994376302
 0.0432494773723568
 0.1766276349186254
 0.0
 5.080312346365759
 2.9196876538459047
 0.0
 0.0
 1.588460449289467
 0.8687638032357609
 0.542775747570679
 2.0
 6.0
 0.0
 1.9871733208461837
 0.9999999999890827
 0.0
 0.0
 1.0529368964814791
 1.1266910173563476
 0.09154255593518039
 0.0
 4.9084574451241
 3.091542553559465
 1.9084574443179556
 0.0
 0.0
 1.091542555667652
 1.9999999977189595
 0.0
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.8011971311843066
 0.24200588158371003
 0.9999999635325434
 0.0
 0.0
 0.09180684455403722
 0.0
 0.0
 1.0
 0.0
 0.0
 0.3749999999332384
 0.0
 0.0
 0.0
 0.931862198129234
 0.0
 0.0
 3.4944760335586323e-8
 1.0
 0.38260041312266374
 0.23152484514363822
 0.0
 0.06813780191950698
 0.0
 0.9999999999762036
 0.9999999993134179
 0.5663952159165613
 0.19880286876215636
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.43360478402110564
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6173995868934385
 0.0
 0.9999999999560177
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9999999997248281
 0.0
 0.0
 0.7579941184441645
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.30166831041312975
 0.0
 0.0
 1.0



=====Finished running Instance #536=====





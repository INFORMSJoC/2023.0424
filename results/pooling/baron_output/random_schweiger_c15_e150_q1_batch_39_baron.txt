===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.31     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.34
 Total CPU time used:                 0.32

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -213.668
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -573.423
 Preprocessing found feasible solution with value -624.319
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            20.11     -629.972         -624.319       
         30+            5            50.00     -626.858         -624.319       
        192+            3            79.90     -626.858         -624.319       
        267             0            96.76     -624.381         -624.319       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                    97.29
 Total CPU time used:                96.91

 Total no. of BaR iterations:     267
 Best solution found at node:       2
 Max. no. of nodes in memory:       9
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -194.616
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -521.516
 Preprocessing found feasible solution with value -636.924
 Preprocessing found feasible solution with value -636.924
 Preprocessing found feasible solution with value -636.924
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            19.11     -647.337         -636.924       
         17+            4            49.00     -642.485         -636.924       
        917            14            78.89     -642.485         -636.924       
       4121            15           108.78     -642.485         -636.924       
       8077            10           138.67     -642.485         -636.924       
      11895            11           168.55     -642.485         -636.924       
      14273+            5           198.44     -642.485         -636.924       
      14337+            4           228.34     -642.485         -636.924       
      14389             6           258.23     -641.662         -636.924       
      14439+            3           288.14     -641.662         -636.924       
      14478+            4           318.03     -641.066         -636.924       
      14495             0           343.86     -636.988         -636.924       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   345.31
 Total CPU time used:               343.97

 Total no. of BaR iterations:   14495
 Best solution found at node:       5
 Max. no. of nodes in memory:      21
 
 All done
===========================================================================



*****Running Instance #77*****


objective value: -624.318795478
objective bound: -624.3812336
BARON solution time: 97.29

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.6372035836444445
 0.0
 0.0
 0.3627964165804324
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.999999999991627
 0.0
 0.0
 1.000000000510915
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4409137768252641
 0.17536964877612313
 0.0
 0.0
 0.0
 0.0
 4.559086223840429
 1.813337191638682
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3004665557040944
 1.0009061562452966
 0.0
 0.0
 0.0
 0.0
 0.7510009266426947
 2.5017142059711017
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.7711207373949551
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.20723823130942068
 0.6217146938986157
 0.0
 0.7500000000713971
 2.250000000242197
 0.0
 0.5427617685410699
 1.6282853056279392
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5000000003625445
 1.500000001087817
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.9320489409099061
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.531376804659054
 1.5104589352818945
 0.0
 0.0
 0.0
 1.4686231957471554
 0.48954106538464215
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.2948453551237165
 0.0
 0.0
 0.0
 0.13860498927041995
 0.0
 0.5526352842691252
 0.2763176420869971
 0.0
 0.0
 1.447364715990044
 0.7236823578667925
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.502620361837715
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4973796391194998
 1.0
 0.5026203610914374
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4102162630931054
 0.7051081311799188
 0.0
 0.5897837373129258
 0.29489186850346233
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.26908874380518977
 0.6998662602525852
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7689237511029786
 3.5086728000304235
 0.0
 0.9289609773924883
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 1.4162712972064773
 0.0
 1.2310762492546405
 0.0
 1.7309112563502282
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.27855615431534353
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5837287035821329
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4973796381328485
 0.0
 0.0
 0.06795105968570751
 0.5665496559907188
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7214438460016714
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.30013373937657284
 0.9485325179166728
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.22887926346866438
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.07103902315996789
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.999999999784
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.115324394500515
 0.616283425585814
 0.9689550038699409
 0.0
 0.0
 0.8289529252043449
 0.8846756059087639
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 6.041835739745317
 0.0
 1.3013727119218887
 0.0
 3.0
 0.8289529263561223
 2.1710470741243966
 0.0
 1.9581642610861067
 0.0
 2.5026203626392984
 1.29484535508324
 1.6372035845745243
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.36279641679088004
 0.0
 0.0
 0.0
 2.7711207375434226
 0.0
 0.0
 2.1710470738568364
 0.0
 2.9320489410100765
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.252715132550773
 0.0
 0.0
 6.372423415422907
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.13860498926295117
 0.0
 0.0
 2.00000000141092
 0.0
 0.0
 5.206557528499995
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 0.7689237510383872
 3.508672799709302
 0.0
 0.9289609773129485
 0.26908874403402516
 0.6998662608535783
 0.0
 0.0
 2.0
 0.999999999577284
 0.0
 1.4973796389782934
 1.0
 0.5026203610471652
 2.0
 0.0
 0.0
 0.0
 0.5026203617983963
 0.0
 0.0
 2.0
 0.9999999999214246
 1.4334503443892939
 0.0
 0.0
 5.99999999990937
 2.000000000502961
 0.0
 0.0
 2.0
 0.9320489409071421
 0.0
 2.0
 6.0
 0.0
 1.7711207372118805
 0.9999999999958322
 0.0
 0.0
 1.051467482356025
 3.502620362254023
 0.0
 0.0
 5.000000000430403
 1.988706840325188
 1.9999999998249023
 0.0
 0.0
 1.0000000004294511
 2.0
 0.0
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.705108131482894
 0.08818275535749187
 0.9999999991381584
 0.0
 0.0
 0.10361911564003251
 0.2948918686292021
 0.0
 1.0
 0.0
 0.0
 0.3750000000147072
 0.0
 0.0
 0.0
 0.7552294674553917
 0.0
 0.28575924671479097
 0.0
 1.0
 0.27631764210741927
 0.2713808842516383
 0.0
 0.24477053262597923
 0.0
 1.0
 0.9033067383128849
 0.8186017917636358
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.18139820827615108
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7236823579281688
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7142407532746392
 0.0
 0.0
 0.9118172446896259
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.09669326169057464
 0.0
 0.0
 0.2500000001628721
 0.0
 0.0
 1.0



=====Finished running Instance #77=====




*****Running Instance #78*****


objective value: -636.924406227
objective bound: -636.988105013
BARON solution time: 345.3

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.0842133039058683
 1.9157866964193293
 0.0
 0.8063971506584626
 1.4248902201228284
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.142094014296851
 0.8579059859053775
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.1589839517603269
 3.273742520970772
 0.6605176586377193
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6614415715756458
 1.8683514941829693
 0.3769628022192521
 0.11602642452764256
 0.3826279673691558
 0.0
 0.0
 0.0
 0.0
 0.9540672684693929
 3.1462903485390017
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9245788411575673
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7473562735236893
 2.2420688204318546
 0.0
 0.5082851595872387
 1.524855478658933
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7443585672020728
 2.2330757014675284
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6792564365165095
 0.9193243578796705
 0.4014192057813077
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.3508222848684746
 1.711660589999332
 0.0
 0.07194683786302171
 0.0
 0.6491777161919604
 0.2076637670955884
 0.0
 0.008728804929041484
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.15588228290575348
 0.0
 0.6445729082094334
 0.3222864540526001
 0.0
 0.0
 1.355427092048353
 0.6777135459134237
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.44824267185751326
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5517573291108608
 1.0
 0.44824267108575816
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5309442339590702
 0.681737469526247
 0.08373464732424153
 0.46905576642954033
 0.20887298451453895
 0.02565489866107459
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5677328802249001
 0.6737581717219695
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9320327338361145
 4.51427686955105
 0.0
 0.772825473189267
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.0
 1.0679672665231834
 0.0
 1.4322671201551371
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.23128737048603273
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.17957447748092265
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5517573281072917
 0.0
 0.0
 0.0
 1.8441177173949799
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.768712629852816
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.32624182853145434
 0.9299063072916186
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.07542115965882173
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.10938954653481696
 0.0
 0.22717452734438212
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3207435642072281
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.115809864492224
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.296416350809559
 5.093244131368818
 1.2414910517508455
 0.0
 0.0
 0.0
 0.7035836496051538
 0.0
 3.0
 0.0
 0.0
 2.989425093911096
 0.0
 0.0
 0.0
 7.13442971255579
 0.0
 0.49865439188687904
 0.0
 3.0
 0.9668593622620334
 2.033140638224581
 0.0
 0.8655702882138496
 0.0
 2.4482426726752577
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.231287370737556
 0.0
 0.0
 0.0
 2.9245788412216536
 0.0
 0.0
 2.0331406379617767
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.100357616930088
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.15588228282308822
 0.0
 0.0
 2.977434268625476
 2.9067558679778673
 0.0
 6.219135076535573
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 0.932032733773038
 4.514276869215609
 0.0
 0.7728254731380411
 0.5677328802343344
 0.6737581717334169
 0.0
 0.0
 2.0
 0.890610453954258
 0.10938954597557665
 1.5517573289607112
 1.0
 0.44824267104243326
 2.0
 0.0
 0.0
 0.0
 0.4482426718191791
 0.0
 0.0
 2.0
 0.9999999999345788
 0.15588228299235463
 0.0
 0.0
 6.0
 1.9193243569466247
 0.0
 0.08067564278457212
 1.679256436469637
 0.9193243578540448
 0.401419205770163
 2.0
 6.0
 0.0
 1.9245788409678208
 0.9999999999955689
 0.0
 0.0
 1.0700936929947173
 3.5289183158979456
 0.0
 1.8204255232955993
 5.142094015037421
 1.0374804608342987
 2.0
 0.0
 0.14209401428729382
 0.8579059858461975
 1.890610454493473
 3.3406769164126637
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7654721169062624
 0.6366555164874349
 0.9999999999811401
 0.0
 0.0
 0.0
 0.23452788319169288
 0.0
 1.0
 0.0
 0.0
 0.3736781367271358
 0.0
 0.0
 0.0
 0.8918037140570078
 0.0
 0.108426416572307
 0.0
 1.0
 0.3222864540729368
 0.2541425797673114
 0.0
 0.10819628601908307
 0.0
 1.0
 0.0
 0.5734726058084894
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.42652739423033925
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6777135459587412
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8915735834306089
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9999999994441479
 0.0
 0.0
 0.37217928356644947
 0.3633444835351181
 0.0
 1.0



=====Finished running Instance #78=====





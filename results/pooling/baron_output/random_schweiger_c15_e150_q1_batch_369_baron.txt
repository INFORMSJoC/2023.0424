===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.32     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.34
 Total CPU time used:                 0.32

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -615.338
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -621.488
 Preprocessing found feasible solution with value -621.488
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            14.00     -639.639         -621.488       
         68+           12            43.94     -635.404         -621.488       
        147+            7            73.87     -635.404         -621.488       
        234+            6           103.78     -635.404         -621.488       
        301+            6           133.68     -635.404         -621.488       
        347             5           163.60     -635.404         -621.488       
        399+            6           193.50     -635.404         -621.488       
        486+            8           223.40     -635.404         -621.488       
        629+            8           253.30     -635.404         -621.488       
        758+            7           283.22     -635.404         -621.488       
        826+           10           313.11     -635.404         -621.488       
        991+            7           343.00     -635.404         -621.488       
       1138+            7           372.92     -635.404         -621.488       
       1296+            7           402.83     -635.404         -621.488       
       1319+            5           432.77     -635.404         -621.488       
       1372+            6           462.68     -635.404         -621.488       
       1402+            5           492.58     -635.404         -621.488       
       1427+            2           522.49     -635.404         -621.488       
       1468+            5           552.40     -630.945         -621.488       
       1529             3           582.31     -630.945         -621.488       
       1639            11           612.20     -630.332         -621.488       
       5057            13           642.10     -630.332         -621.488       
       7473+            8           672.00     -630.332         -621.488       
       7495             7           701.92     -630.332         -621.488       
       7703+            7           731.82     -630.332         -621.488       
       7745+            6           761.73     -630.332         -621.488       
       7860+           11           791.64     -630.332         -621.488       
       8044+            5           821.54     -630.332         -621.488       
       8115+            6           851.45     -629.328         -621.488       
       8298+            4           881.37     -629.083         -621.488       
       8336+            4           911.27     -627.772         -621.488       
       8441+            5           941.18     -626.927         -621.488       
       8481+            6           971.10     -626.496         -621.488       
       8578+            5          1001.00     -626.496         -621.488       
       8661+            4          1030.90     -625.600         -621.488       
       8737+            2          1060.80     -622.871         -621.488       
       8751             0          1070.03     -621.550         -621.488       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                  1073.95
 Total CPU time used:              1070.10

 Total no. of BaR iterations:    8751
 Best solution found at node:      -1
 Max. no. of nodes in memory:      20
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -619.609
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -619.609
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
*         1             1             5.14     -643.271         -621.640       
          1             1            13.25     -640.675         -621.640       
         42+            7            43.16     -627.369         -621.640       
       2364             7            73.08     -627.369         -621.640       
       2504+            7           102.97     -627.369         -621.640       
       2639             0           129.22     -621.702         -621.640       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   129.81
 Total CPU time used:               129.33

 Total no. of BaR iterations:    2639
 Best solution found at node:     162
 Max. no. of nodes in memory:      15
 
 All done
===========================================================================



*****Running Instance #737*****


objective value: -621.48788627
objective bound: -621.550041269
BARON solution time: 1073.94

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.2535528455880922
 1.7464471547616138
 0.0
 0.7464471546237513
 1.0399485861015203
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.8483477065310763
 0.0
 0.0
 1.1516522939423175
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.960933804162642
 1.924745166329999
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.887413903040372
 1.2269071269455007
 0.19046573126818156
 0.5664145766970954
 0.0274150072396324
 0.0
 0.0
 0.0
 0.8631384068218653
 2.566835367577031
 0.12423728675207063
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.7489646410559214
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.053453198382989155
 0.16035959514027304
 0.0
 0.7500000001145991
 2.2500000002067417
 0.0
 0.5252982971585747
 1.5758948913664224
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6712485046386314
 2.0137455137883973
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0739119506684789
 0.7688847651907345
 1.1572032844126894
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.796628598205436
 1.414113874345662
 0.0
 0.18476232467673281
 0.0
 1.2033714028417066
 0.35477088999194006
 0.0
 0.04635291085883454
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5992045413588404
 0.2996022706303225
 0.0
 0.0
 1.400795458901843
 0.7003977293361442
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4319047346621911
 0.0
 0.0
 0.0
 0.47022997273251155
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5297700282378652
 0.9566017117105576
 0.5136282603494297
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5104899409560784
 0.7552449700773639
 0.0
 0.489510059435549
 0.2447550295879278
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.13546153716622977
 0.38193627198880253
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.21920898533455807
 0.6180637278793956
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.16283433653682708
 0.19008624610707311
 0.0
 0.08141716826769864
 0.0
 0.0
 0.0
 0.0
 1.8371656637727944
 2.144633201634593
 0.0
 0.9185828318847775
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.5680952659970726
 1.563866077760121
 0.0
 0.0
 0.0
 1.6453294779113552
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.22073349148030857
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.43613392309311133
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0978652926086694
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7792665089010998
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9463958622441373
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.25103535980297514
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8252023621985739
 0.0
 0.0
 0.0
 0.0
 0.10088568778608023
 0.0
 0.043398288876252154
 2.05640097596477
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.2657349113039262
 4.885678970444295
 0.5173978090804224
 0.0
 0.0
 0.2138127935200966
 0.7342650891111351
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 6.39550479707211
 0.0
 0.7842953152049094
 0.8372727130923739
 3.0
 0.8988068119891628
 2.1011931885039172
 0.0
 1.604495203652919
 0.0
 1.902134708098987
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.7863957406871926
 0.4343377509031142
 0.0
 0.0
 2.748964640978327
 0.0
 0.0
 2.101193188237987
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.5542110611509665
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.684994018393922
 3.1143210299550654
 0.0
 4.900381697196724
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 2.0
 2.334719447609467
 0.0
 1.0
 0.35467052246735187
 0.9999999997764102
 0.0
 0.0
 2.0
 0.9999999995675969
 0.0
 1.5297700280883733
 0.9566017116170709
 0.5136282602992266
 1.4319047345737932
 0.0
 0.0
 0.0
 0.4702299727033976
 0.0
 0.0
 2.0
 0.9999999999341791
 0.0
 0.0
 0.0
 6.0
 1.7688847642059677
 0.0
 0.2311152355197979
 1.0739119506055377
 0.7688847651456712
 1.1572032843448663
 2.0
 6.0
 0.0
 1.7489646408804063
 0.9999999999928068
 0.0
 0.0
 1.0536041380474894
 3.133249944146314
 0.15165229398611765
 0.0
 4.848347707026703
 3.151652293160897
 1.8483477064002547
 0.0
 0.0
 1.151652293860335
 2.0
 2.7863957407447413
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7552449704039296
 0.6107098712972601
 0.38193627207363445
 0.0
 0.0
 0.026726599189142428
 0.24475502969375834
 0.0
 1.0
 0.0
 0.0
 0.3750000000224207
 0.0
 0.0
 0.0
 0.7994380996216199
 0.0
 0.18077542066356467
 0.6180637280170233
 1.0
 0.2996022706500436
 0.2626491485514877
 0.0
 0.20056190045369565
 0.0
 1.0
 0.08624123758414641
 0.6267764227543444
 0.0
 0.1500844511260328
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3732235772883726
 0.08141716826062037
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7003977293822454
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8192245793772561
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7636743112898209
 0.0
 0.0
 0.3356242522868758
 0.3892901287391038
 0.0
 0.9185828317962507



=====Finished running Instance #737=====




*****Running Instance #738*****


objective value: -621.639988056
objective bound: -621.702158181
BARON solution time: 129.8

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.1262413884917934
 0.0
 0.0
 0.8737586110659088
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999996329596
 0.0
 0.0
 1.0000000008177117
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5988715043337066
 0.2334923009871936
 0.0
 0.0
 0.0
 0.0
 4.401128495813195
 1.7159434235596447
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.244343985130332
 0.8176751815639037
 0.0
 0.0
 0.0
 0.0
 0.8427927726682082
 2.82033025304755
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.28360802893803005
 0.8508240867766613
 0.0
 0.7500000000045562
 2.2499999999715423
 0.0
 0.46895199822232136
 1.4068559946183958
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.49743997308467547
 1.4923199192035175
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999999375813
 0.9425254076083474
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.039250541315299974
 0.013732436747613427
 0.0
 0.0
 0.0
 3.664820346694953
 1.2821966754832301
 0.0
 0.0
 0.0
 2.222442532853388
 0.7775574673554858
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.144065486579201
 0.0
 0.0
 0.0
 0.855934513370694
 0.0
 0.7494613385588521
 0.3747306690408577
 0.0
 0.0
 1.2505386616331722
 0.6252693304183972
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999995640478
 0.0
 0.0
 0.0
 0.7114920151934337
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.2885079853223529
 0.9897598912727268
 0.721732123685733
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6008453658369122
 0.8004226819665905
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.39915463423474085
 0.1995773168810799
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2446225775069716
 0.7078512698937648
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6977756091076526
 3.328832153100566
 0.0
 0.8737200552083536
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 1.5992058170945245
 0.0
 1.3022243912250429
 0.0
 1.7553774218806097
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.26965772444673114
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999992152682
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4007941833545375
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.288507985187222
 0.0
 0.07348658006019075
 0.05747459283857605
 0.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7303422755245907
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.29214872742696524
 0.9128632419978852
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.12627994525421235
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.01024010925285847
 5.999999999347757
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.4012680484893685
 0.8323638053267861
 0.9524738472330386
 0.0
 0.0
 1.134432115705227
 0.0
 0.0
 3.0
 0.0
 0.0
 2.999999999953548
 0.0
 0.052982978039757773
 0.0
 4.947017022160465
 0.0
 1.0620191666839154
 0.0
 3.0
 1.124192007599708
 1.875807992828963
 0.0
 3.0
 0.0
 2.7114920155213915
 1.1440654866902404
 1.1262413890797691
 0.5987319512898003
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8737586115198129
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 1.8758079920515687
 0.0
 2.942525407550171
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.663123025701374
 0.0
 0.0
 6.117071919447508
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8559345134534799
 0.0
 0.0
 1.9897598922762225
 0.0
 0.0
 4.90032781734371
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 0.697775609051367
 3.3288321528550164
 0.0
 0.8737200551390544
 0.24462257846285743
 0.7078512726636579
 0.0
 0.0
 2.0
 0.9999999988995474
 0.0
 1.2885079852125991
 0.9897598911886298
 0.7217321236247884
 2.0
 0.0
 0.0
 0.0
 0.7114920153574511
 0.0
 0.0
 2.0
 0.9999999994441935
 2.0
 0.0
 0.0
 5.9265134206855095
 2.0734865795177226
 0.0
 0.0
 2.0
 0.9425254077089159
 0.0
 2.0
 6.0
 0.0
 2.0
 0.9999999999582081
 0.0
 0.0
 1.0871367582081075
 3.6380054359855567
 0.0
 0.0
 4.999999999998106
 1.9494357244840081
 1.9999999995149624
 0.0
 0.0
 1.0000000007643548
 1.999999999573921
 0.0
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.800422682850463
 0.11977430086693225
 0.9999999960865078
 0.0
 0.0
 0.1418040144563473
 0.0
 0.0
 1.0
 0.0
 0.0
 0.37499999998033257
 0.0
 0.006622872256993217
 0.0
 0.6183771277580103
 0.0
 0.22475919729972363
 0.0
 1.0
 0.37473066924960385
 0.23447599909248776
 0.0
 0.37500000001664036
 0.0
 0.9999999997643926
 0.5720327432684419
 0.5631206943658699
 0.19957731710033214
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4368793056260331
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6252693307664416
 0.0
 0.9999999998941433
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7752408023227011
 0.0
 0.0
 0.8802256991631181
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4279672566695511
 0.0
 0.0
 0.24871998652268468
 0.0
 0.0
 1.0



=====Finished running Instance #738=====





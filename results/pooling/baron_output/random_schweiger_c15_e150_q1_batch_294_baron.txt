===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.30     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.32
 Total CPU time used:                 0.31

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -182.192
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -631.731
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            15.77     -638.216         -631.731       
         22+            2            45.69     -636.513         -631.731       
         27             0            57.61     -631.794         -631.731       

                         *** Normal completion ***            

 Wall clock time:                    57.94
 Total CPU time used:                57.61

 Total no. of BaR iterations:      27
 Best solution found at node:      -1
 Max. no. of nodes in memory:       5
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -627.384
 Solving bounding LP
 Starting multi-start local search
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            20.03     -639.930         -627.384       
*         4             3            32.73     -636.939         -627.384       
         28+            3            62.65     -636.939         -627.384       
         90+            6            92.56     -636.939         -627.384       
        329+            4           122.48     -636.477         -627.384       
       1047             7           153.07     -635.898         -627.384       
       4427             5           182.97     -635.898         -627.384       
       8288             8           212.87     -635.898         -627.384       
      12331             8           242.76     -635.898         -627.384       
      16444            11           272.66     -635.898         -627.384       
      20482            12           302.56     -635.898         -627.384       
      24968            10           332.46     -635.898         -627.384       
      27452             4           362.35     -630.215         -627.384       
      27626+            6           392.26     -628.457         -627.384       
      27663             0           401.90     -627.447         -627.384       

                         *** Normal completion ***            

 Wall clock time:                   403.44
 Total CPU time used:               401.90

 Total no. of BaR iterations:   27663
 Best solution found at node:      48
 Max. no. of nodes in memory:      14
 
 All done
===========================================================================



*****Running Instance #587*****


objective value: -631.730800281
objective bound: -631.793979679
BARON solution time: 57.93

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.4289074252172842
 0.0
 0.0
 0.5710925742130687
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.918944945821647
 0.0
 0.0
 1.081055054028563
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.2575050771115692
 0.5249546754846138
 0.0
 0.0
 0.0
 0.0
 3.6614398699806396
 1.5284948058828538
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.21484934809192954
 0.7088994342779854
 0.017004968820922332
 0.0
 0.0
 0.0
 0.8092410722791831
 2.670106022814877
 0.06405008585166437
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.860303356223782
 0.9999999999998667
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.06376031886861945
 0.19128095657641447
 0.0
 0.7500000002272237
 2.250000000510934
 0.0
 0.5829751313169335
 1.74892539381534
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6032645498652408
 1.8097936494559803
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.859861758072452
 0.5077405383026967
 0.6323977036327125
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.482348282191382
 1.483755194367257
 0.0
 0.34369423227688733
 0.0
 0.5176517185953821
 0.1400984371055718
 0.0
 0.03245213554451137
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4549794805057201
 0.0
 0.0
 0.0
 0.5450205145021386
 0.0
 0.44539965021863626
 0.22269982502852312
 0.0
 0.0
 1.554600350009533
 0.7773001747213236
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5030829080688888
 0.0
 0.0
 0.0
 0.49977617855169737
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5002238223804412
 0.9207987364304716
 0.5789774415036166
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4055793253673814
 0.7027896614609139
 0.0
 0.5944206750215879
 0.29721033698754906
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8782910331038536
 0.9224198289171351
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.2704055022419882
 3.3675730786746247
 0.0
 0.9638582533087375
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.4969170924529001
 1.431286227936337
 0.0
 0.7295944981756732
 0.0
 1.1217089661511999
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.252316624225387
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999991708968
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5687137716047743
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.997140912098372
 0.0
 0.0
 0.11611309397780262
 0.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7476833759127747
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.07758017003262552
 0.9759095798068271
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.13969664457402606
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.03614174721130356
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.14013824112872966
 0.0
 0.07920126410993718
 5.367602296620933
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.108368987694977
 1.7824597529542259
 1.8007108622261039
 0.0
 0.0
 0.2550412755296187
 0.8916310124329965
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 7.309797709153731
 0.0
 0.9407537511908373
 0.0
 3.0
 0.6680994752471594
 2.3319005251960916
 0.0
 0.6902022915859248
 0.0
 2.0028590887505224
 1.4549794805515766
 1.4289074256927066
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5710925744805166
 0.0
 0.0
 0.0
 2.860303356490623
 0.0
 0.0
 2.3319005247308566
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.5433971809457248
 0.0
 0.0
 5.189934676716263
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5450205145370791
 0.0
 0.0
 2.4130581993843334
 0.0
 0.0
 5.601836834335435
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.2704055021071132
 3.367573078342741
 0.0
 0.9638582532062452
 0.8782910341833171
 0.9224198300511629
 0.0
 0.0
 2.0
 0.9999999983560562
 0.0
 1.5002238222305375
 0.9207987363410315
 0.5789774414477535
 1.5030829079380208
 0.0
 0.0
 0.0
 0.4997761785029723
 0.0
 0.0
 2.0
 0.9999999997145509
 1.9999999950843168
 0.0
 0.0
 6.0
 1.6238536314795249
 0.0
 0.3761463679418704
 1.8598617581242798
 0.5077405383225497
 0.6323977036559277
 2.0
 5.999999999984559
 0.0
 1.860303356062658
 0.9999999999453615
 0.0
 0.0
 1.0240904203987968
 3.379005457200654
 0.08105505463354225
 0.0
 4.9189449468243165
 2.05344948124252
 1.9189449456713743
 0.0
 0.0
 1.0810550539755872
 1.9999999993346593
 0.0
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7027896626391944
 0.2556452838388834
 0.9999999987718255
 0.0
 0.0
 0.03188015942991394
 0.29721033749898934
 0.0
 1.0
 0.0
 0.0
 0.3750000000883255
 0.0
 0.0
 0.0
 0.9137247136335795
 0.0
 0.2097952913241214
 0.0
 1.0
 0.22269982509380268
 0.2914875656384867
 0.0
 0.08627528643213885
 0.0
 1.0
 0.7274897420411038
 0.7144537128465867
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2855462872017941
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7773001749479669
 0.0
 0.9999999999820287
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7902047086447015
 0.0
 0.0
 0.7443547162184949
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.27251025792104566
 0.0
 0.0
 0.3016322749119967
 0.0
 0.0
 1.0



=====Finished running Instance #587=====




*****Running Instance #588*****


objective value: -627.38396683
objective bound: -627.446711501
BARON solution time: 403.44

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.0222239153741106
 1.1475000040907561
 0.0
 0.9777760849702586
 1.097604981284838
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9839468421744524
 0.0
 0.0
 1.0160531579894667
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.16114273868339957
 3.0041945197964557
 1.6568562592005718
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.1061924283617246
 1.9797523233947845
 1.0918617310096268
 0.03289265289840117
 0.07866181436348624
 0.00034438525326193676
 0.0
 0.0
 0.0
 1.500363974046725
 3.588076424542425
 0.0157087730631639
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.7232121079014602
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6624814338227445
 1.9874443013763319
 0.0
 0.5099100881013232
 1.5297302642529609
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8276084782904538
 2.482825434735145
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.893763155471294
 0.8395925582137456
 0.26664428647865795
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.588517941798216
 1.8628393130940668
 0.0
 0.0
 0.0
 0.41148205887772527
 0.13716068611981133
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.16437481019598557
 0.0
 0.6402397653785638
 0.3201198826319062
 0.0
 0.0
 1.3597602349080373
 0.6798801173370566
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.6667382362259955
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.333261764724415
 1.0
 0.6667382355705194
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5534209086876432
 0.776710453801746
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4465790917326939
 0.22328954569564907
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4743489416386941
 0.6581279112632084
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.640643521413798
 2.584543775734841
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 1.1840220877794352
 0.0
 0.3593564790428358
 0.0
 1.5256510585411946
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.33746889798992125
 0.0
 2.66253110239708
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999999736828
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5486427459476603
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.33326176288227677
 0.0
 0.0
 0.16040744221318717
 1.835625189642009
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.6625311023036771
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3418720886814159
 0.4667433733914328
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.276787892737369
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.10623684528921155
 0.0
 0.0
 0.8257196268918159
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.3301313628170157
 4.822193517680427
 1.1324768531051286
 0.0
 0.0
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 2.6499257352976113
 0.0
 0.0
 0.0
 7.451357255412522
 0.0
 0.11189885251514935
 0.0
 3.0
 0.9603596480104699
 2.0396403524591173
 0.0
 0.5486427454237441
 0.0
 2.6667382378195814
 0.0
 2.169723919483609
 0.6698686375937791
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0753810662759187
 0.0
 0.0
 0.0
 2.7232121082980094
 0.0
 0.0
 2.039640352245094
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.104149171652313
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.1643748102025277
 0.0
 0.0
 3.310433913117345
 3.177806482766136
 0.0
 5.2251872973126545
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.6406435212531283
 2.5845437754834353
 0.0
 0.99999999999598
 0.47434894184163495
 0.6581279115447649
 0.0
 0.0
 2.0
 0.999999999421877
 0.0
 1.3332617646056264
 1.0
 0.6667382355197545
 1.999999999981156
 0.0
 0.0
 0.0
 0.6667382361618049
 0.0
 0.0
 2.0
 0.9999999999297169
 0.16437481073567844
 0.0
 0.0
 6.0
 1.9999999992719966
 0.0
 0.0
 1.8937631553666918
 0.8395925582137456
 0.2666442864828421
 2.0
 5.999999999927638
 0.0
 1.7232121077413414
 1.0
 0.0
 0.0
 1.5332566268861978
 3.666738238766736
 0.01605315830577696
 0.26733516698616555
 4.983946842903601
 2.748717990068271
 1.9839468420623483
 0.0
 0.0
 1.0160531579691727
 2.0
 2.2451049851890406
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7767104542810406
 0.6027741897117679
 0.9999999995721761
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.3312407169001439
 0.0
 0.0
 0.0
 0.9314196569153852
 0.0
 0.0214528033475489
 0.0
 1.0
 0.32011988266032204
 0.25495504404529234
 0.0
 0.06858034315583754
 0.0
 1.0
 0.0
 0.5111119576421799
 0.2232895458549753
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.488888042442189
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6798801173910728
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9785471966902513
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9999999967166938
 0.0
 0.0
 0.4138042391276431
 0.3972258103465281
 0.0
 1.0



=====Finished running Instance #588=====





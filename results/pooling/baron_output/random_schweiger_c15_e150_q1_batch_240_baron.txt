===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.34     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.37
 Total CPU time used:                 0.35

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -629.279
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -629.279
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
*         1             1             5.82     -644.346         -629.802       
          1             1            16.05     -639.347         -629.802       
         19+            4            45.94     -638.657         -629.802       
        125+            4            75.84     -638.657         -629.802       
        204             3           105.75     -638.657         -629.802       
        281+            3           135.65     -637.149         -629.802       
        324+            5           165.55     -634.230         -629.802       
        411+            2           195.45     -634.230         -629.802       
        541             0           213.72     -629.865         -629.802       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   215.10
 Total CPU time used:               214.29

 Total no. of BaR iterations:     541
 Best solution found at node:       4
 Max. no. of nodes in memory:       9
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -189.993
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -631.889
 Preprocessing found feasible solution with value -631.889
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            15.93     -642.137         -631.889       
        101            11            45.83     -639.509         -631.889       
        372+            4            75.76     -639.509         -631.889       
        994             9           105.81     -639.509         -631.889       
       3182+            7           135.71     -639.509         -631.889       
       3631+           12           165.60     -639.509         -631.889       
       4238            10           195.48     -639.509         -631.889       
       7418            10           225.38     -639.509         -631.889       
      11273             8           255.27     -639.509         -631.889       
      13390+            5           285.18     -639.509         -631.889       
      13693+            7           315.08     -639.509         -631.889       
      13949             7           344.97     -639.509         -631.889       
      14349+            3           374.86     -639.509         -631.889       
      16264             9           404.75     -639.083         -631.889       
      17040+            6           434.65     -639.083         -631.889       
      17533+            5           464.55     -639.083         -631.889       
      17940+            5           494.44     -639.083         -631.889       
      18218+            9           524.33     -639.083         -631.889       
      20335             8           555.91     -639.083         -631.889       
      20836+            4           585.82     -639.083         -631.889       
      21069+            6           615.73     -636.044         -631.889       
      21568             6           645.62     -636.044         -631.889       
      22023+            3           675.51     -636.044         -631.889       
      23394             7           705.40     -636.044         -631.889       
      25389+            5           735.30     -636.044         -631.889       
      28444             5           765.19     -636.044         -631.889       
      32313             7           795.08     -636.044         -631.889       
      34507            10           824.97     -633.786         -631.889       
      36839+            6           854.86     -633.399         -631.889       
      39069             8           884.75     -633.399         -631.889       
      39929             0           904.29     -631.952         -631.889       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   907.80
 Total CPU time used:               904.40

 Total no. of BaR iterations:   39929
 Best solution found at node:       3
 Max. no. of nodes in memory:      15
 
 All done
===========================================================================



*****Running Instance #479*****


objective value: -629.801797388
objective bound: -629.864783557
BARON solution time: 215.09

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 0.6114022157707161
 0.4856641273092622
 0.0
 1.2783537825361282
 1.0154535887726055
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9451509304713284
 0.0
 0.0
 1.0548490693169699
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.01574898164283615
 1.368683026645868
 0.8297499984993264
 0.0
 0.0
 0.0
 0.0411532299171969
 3.5764679048921746
 2.168196858561582
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0223214927345083
 1.2511768007939827
 0.054849069755841744
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9118213151418304
 0.9999999999919661
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5613606956547753
 1.6840820868632875
 0.0
 0.48752083842109645
 1.46256251518652
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9511184660187035
 2.853355397826753
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6959866692777597
 0.8534435790119268
 0.4505697519356274
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.7947891660624773
 3.3590779441742478
 0.0
 0.0
 0.0
 0.44883359833186165
 0.3972992898197993
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.03996807921585072
 0.0
 0.6999444312199972
 0.3499722155380799
 0.0
 0.0
 1.300055569036868
 0.6500277843887107
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999989502528
 0.0
 0.0
 0.0
 0.7285106458878718
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.2714893545568642
 0.9679282143290834
 0.7605824314107551
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4195594877269175
 0.6315307842106824
 0.0782489595469197
 0.5804405126770911
 0.2582252137528919
 0.03199504252704821
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.07511276899718608
 0.4364926006347476
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.09696980186486538
 0.5635073977983319
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 2.2414707126814744
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 1.0969648988922494
 0.0
 0.0
 0.0
 1.827917429271903
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2938073710542303
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999999279885
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8461328903157843
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2714893544313435
 0.0
 1.7563772357042233
 0.14655642153666382
 1.9600319209337682
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7061926292625582
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9776785074911299
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.08817868542366725
 0.0
 0.0
 0.0
 0.0
 0.7209566105854028
 0.0
 0.0
 0.0
 0.0
 0.11024400259311797
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.18887151350406217
 0.0
 0.0
 0.0
 0.0
 0.11514181785561863
 0.0
 0.03207178623303468
 4.048312532943162
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.1293392314845194
 2.2141820067880307
 0.5116053697462336
 0.0
 0.0
 0.0
 0.8706607689570312
 0.0
 3.0
 0.0
 0.0
 2.2454427826224794
 0.0
 0.0
 0.0
 7.153867110703151
 0.0
 0.0
 0.6604771997525749
 2.9999999999536553
 1.0499166467580772
 1.9500833537148337
 0.0
 0.8461328885628587
 0.0
 2.728510646337218
 0.0
 1.0970663431159908
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.293807371311322
 0.0
 0.0
 0.0
 2.9118213154382664
 0.0
 0.0
 1.9500833534255788
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.3283473632843332
 0.0
 0.0
 5.785817993370953
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.039968079230871874
 0.0
 0.0
 3.8044738639352014
 0.0
 0.0
 5.241470713067636
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 2.0
 2.2414707126807722
 0.0
 1.0
 0.17208257110638556
 0.9999999998529694
 0.0
 0.0
 2.0
 0.8897559978820362
 0.11024400210333356
 1.2714893544412353
 0.9679282142454705
 0.7605824313490146
 2.0
 0.0
 0.0
 0.0
 0.7285106463222425
 0.0
 0.0
 2.0
 0.9999999999014738
 0.03996807944038525
 0.0
 0.0
 4.243622765020275
 3.75637723457658
 0.0
 0.0
 1.6959866692077659
 0.8534435789872992
 0.45056975193270316
 2.0
 5.999999999889949
 0.0
 1.9118213152578603
 1.0
 0.0
 0.0
 1.022321492782887
 1.251176800853373
 0.054849069757682195
 0.05690221146748751
 4.945150931447282
 2.9979468570266854
 1.9451509305954333
 0.0
 0.0
 1.0548490694193637
 1.8897559983285739
 1.5011177160991096
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7097797438005734
 0.27677275084618935
 0.43649260069892437
 0.0
 0.0
 0.0
 0.29022025631480747
 0.0
 1.0
 0.0
 0.0
 0.28068034781581835
 0.0
 0.0
 0.0
 0.8942333888274018
 0.0
 0.0
 0.5635073978811838
 0.9999999999523501
 0.3499722155785961
 0.24376041920233274
 0.0
 0.10576661104838604
 0.0
 0.9999999994037552
 0.0
 0.3235350046839211
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6764649953045666
 0.0
 0.0
 0.0
 0.9999999999563558
 0.0
 0.0
 0.6500277844588803
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.999999999952096
 0.0
 0.0
 0.7232272491723234
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9999999943821516
 0.0
 0.0
 0.47555923298002506
 0.0
 0.0
 1.0



=====Finished running Instance #479=====




*****Running Instance #480*****


objective value: -631.889297595
objective bound: -631.952492832
BARON solution time: 907.79

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.2378548289626805
 0.0
 0.0
 0.7621451708699832
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 1.0000000002201184
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.14222439781110913
 1.5911709128005458
 0.8124781487571314
 0.0
 0.0
 0.0
 0.30469301594419945
 3.4088290881206005
 1.7406044345511573
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.21383439715473698
 0.5889384612452403
 0.0
 0.0
 0.0
 0.0
 0.8748149295602182
 2.4093979516306123
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.05633937875254385
 0.16901813619418898
 0.0
 0.7500000000577295
 2.25000000020539
 0.0
 0.5384357066227271
 1.6153071198702316
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6552249148570604
 1.9656747445900677
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3861921804288695
 0.845928327712486
 0.7678794920384543
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.9089644940430364
 1.302988164076384
 0.0
 0.0
 0.0
 2.09103550697496
 0.6970118353483983
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9885814670911094
 0.0
 0.0
 0.0
 0.6036092646678527
 0.0
 0.5641714493866349
 0.2820857246274718
 0.0
 0.0
 1.4358285508616377
 0.7179142752597607
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6566686423597825
 0.0
 0.0
 0.0
 0.3416677694382323
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6583322314951323
 1.0
 0.34166776872240673
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5870053122213468
 0.793502655354237
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4129946879907619
 0.20649734379984513
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5088186391899978
 0.5261571268431038
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.474384254440314
 3.1052496493998007
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.34333135825596806
 1.2507604351593755
 0.0
 0.5256157459681847
 0.0
 1.4911813608353452
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.30824736152477433
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999997897948
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.30232215175302946
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.001663588228184
 0.0
 0.0
 0.1540716719470939
 0.4078092685293165
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.6917526387036083
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4738428729440113
 0.9113506733894491
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4668279872137871
 0.0
 0.0
 0.0
 0.0
 0.1469798328822051
 0.0
 0.0
 5.232120508778518
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.3805079681148804
 2.5458734593687864
 1.034975765850941
 0.0
 0.0
 0.22535751495266404
 0.0
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 5.211952658468904
 0.0
 0.8027728583784396
 0.0
 3.0
 0.8462571740141066
 2.153742826455725
 0.0
 2.7880473425161627
 0.0
 1.9983364125027399
 0.9885814670789337
 1.2378548289895193
 0.6194920319303071
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7621451708867246
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 2.1537428261213982
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.2842128811469964
 0.0
 0.0
 5.454126538615957
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6036092646582047
 0.0
 0.0
 2.620899659399708
 0.0
 0.0
 5.579633903995399
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.4743842543240904
 3.1052496491579147
 0.0
 1.0
 0.5088186395374605
 0.526157127202656
 0.0
 0.0
 2.0
 0.9999999991416124
 0.0
 1.6583322313466582
 1.0
 0.3416677687039859
 1.6566686422612749
 0.0
 0.0
 0.0
 0.34166776940737575
 0.0
 0.0
 2.0
 0.9999999998550523
 1.5921907318325104
 0.0
 0.0
 6.0
 1.999999999283295
 0.0
 0.0
 1.3861921804006634
 0.8459283277012822
 0.7678794920299727
 2.0
 6.0
 0.0
 2.0
 1.0
 0.0
 0.0
 1.0886493268660526
 2.998336413301782
 0.0
 0.4469174137473352
 5.000000000705213
 2.553082583195732
 2.0
 0.0
 0.0
 1.0000000001425629
 1.9999999997733167
 0.0
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7935026560410666
 0.31823418251478874
 0.9999999993105917
 0.0
 0.0
 0.028169689361020656
 0.0
 0.0
 1.0
 0.0
 0.0
 0.37500000000931644
 0.0
 0.0
 0.0
 0.6514940822904416
 0.0
 0.19642174194768527
 0.0
 1.0
 0.2820857246680229
 0.26921785329288084
 0.0
 0.3485059178008916
 0.0
 1.0
 0.6208938711466092
 0.6189274145508941
 0.20649734397759892
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3810725854775865
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7179142753668931
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8035782579107069
 0.0
 0.0
 0.6817658175274988
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3791061288073619
 0.0
 0.0
 0.3276124574095073
 0.0
 0.0
 1.0



=====Finished running Instance #480=====





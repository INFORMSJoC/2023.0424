===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.30     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.32
 Total CPU time used:                 0.30

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -172.035
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -516.608
 Preprocessing found feasible solution with value -630.711
 Preprocessing found feasible solution with value -630.711
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            19.66     -643.494         -630.711       
         25+            4            49.56     -642.362         -630.711       
        148+            6            79.47     -642.362         -630.711       
        330             5           109.36     -642.362         -630.711       
       1522             9           139.68     -642.362         -630.711       
       4703            10           169.58     -642.362         -630.711       
       5635+            8           199.47     -642.362         -630.711       
       5885+            8           229.37     -642.362         -630.711       
       6198+            6           259.27     -642.362         -630.711       
       6379+           11           289.91     -642.362         -630.711       
       6682+            8           319.80     -642.362         -630.711       
       6842+            3           349.70     -642.362         -630.711       
       6958             6           379.60     -642.362         -630.711       
       7137+            3           409.52     -642.362         -630.711       
       7368+            5           439.41     -640.891         -630.711       
      11254             8           469.31     -640.891         -630.711       
      15253            10           499.20     -640.891         -630.711       
      15746+            5           529.10     -640.891         -630.711       
      15953+            4           558.99     -639.955         -630.711       
      16170+            5           588.90     -639.955         -630.711       
      16988            10           618.80     -634.405         -630.711       
      20880            10           648.69     -634.405         -630.711       
      25008            15           678.58     -634.405         -630.711       
      25676+            7           708.48     -634.405         -630.711       
      26003+            9           738.38     -632.999         -630.711       
      26219             0           764.40     -630.774         -630.711       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   767.82
 Total CPU time used:               765.03

 Total no. of BaR iterations:   26219
 Best solution found at node:      18
 Max. no. of nodes in memory:      16
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -266.649
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -479.215
 Preprocessing found feasible solution with value -605.977
 Preprocessing found feasible solution with value -605.977
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
*         1             1             8.19     -637.724         -612.554       
          1             1            17.81     -629.558         -612.554       
*        23             5            41.79     -619.210         -612.651       
        214+            5            71.70     -619.210         -612.651       
        494+           10           101.60     -619.210         -612.651       
       2275             9           131.49     -619.210         -612.651       
       6165            14           161.39     -619.210         -612.651       
      11000            11           191.29     -619.210         -612.651       
      15634            12           221.18     -619.210         -612.651       
      16658+            3           251.07     -617.089         -612.651       
      16740             3           280.98     -614.606         -612.651       
      19515+            1           310.88     -613.669         -612.651       
      19517             0           312.22     -612.713         -612.651       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   313.43
 Total CPU time used:               312.29

 Total no. of BaR iterations:   19517
 Best solution found at node:    2440
 Max. no. of nodes in memory:      17
 
 All done
===========================================================================



*****Running Instance #273*****


objective value: -630.710930149
objective bound: -630.774007543
BARON solution time: 767.82

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.3933914159421534
 0.0
 0.0
 0.6066085827421739
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9429500274919633
 0.0
 0.0
 1.0570499722136777
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3106159569173912
 0.6671636394094371
 0.0
 0.0
 0.0
 0.0
 3.632334071402907
 1.8490246558209809
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.31143434088981986
 1.0423314035748228
 0.01789137059340231
 0.0
 0.0
 0.0
 0.6816321541518406
 2.281336727125416
 0.03915860218228675
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.9999999996064534
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.09295644973247254
 0.27886934933533836
 0.0
 0.7499999994774097
 2.2499999995198294
 0.0
 0.5845441393525301
 1.7536324189087809
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5724994106554075
 1.7174982328001234
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9205744107154671
 0.821636479352884
 1.2577891041637075
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.938246962454211
 1.6855421894111247
 0.0
 0.0
 0.0
 1.026009263516592
 0.3502015822778212
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3925012908636671
 0.0
 0.0
 0.0
 0.6074987077523085
 0.0
 0.44121562784652474
 0.22060781382455602
 0.0
 0.0
 1.5587843722697183
 0.7793921857848292
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999985574912
 0.0
 0.0
 0.0
 0.35941190319829164
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6405880972579887
 1.0
 0.3594119029365948
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4552455141440144
 0.7276227554727985
 0.0
 0.5447544858318212
 0.27237724230786
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6800316789473131
 0.6802089568803749
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5839809624395014
 3.1243998024401116
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 1.395885974785466
 0.0
 0.4160190378435833
 0.0
 1.319968319391725
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2598753715796253
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999981636938
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6041140222425847
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6405880969079597
 0.0
 0.03574377358726238
 0.17836351901297892
 0.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7401246283435083
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3197910409935892
 1.0069335048592443
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9989007288373631
 0.0
 0.0
 0.0
 0.0
 0.0805248589650467
 0.0
 0.0
 4.742210893508177
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.1828682707091915
 1.9777795971890744
 1.3602406360400503
 0.0
 0.0
 0.3718257991653417
 0.8171317286108339
 0.0
 3.0
 0.0
 0.0
 2.9999999992250252
 0.0
 0.0
 0.0
 6.623789152681735
 0.0
 1.3716571150580448
 0.0
 3.0
 0.6618234416710808
 2.338176558457791
 0.0
 1.376210846283652
 0.0
 2.359411903742258
 1.3925012910185128
 1.3933914164684715
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6066085830377947
 0.0
 0.0
 0.0
 2.9999999998767293
 0.0
 0.0
 2.3381765580545473
 0.0
 2.999999994232052
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.0021274834595433
 0.0
 0.0
 5.481358729437379
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6074987078339754
 0.0
 0.0
 2.289997643649745
 0.0
 0.0
 5.7083807651589415
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.5839809624286285
 3.1243998024057213
 0.0
 1.0
 0.680031680906577
 0.6802089588401558
 0.0
 0.0
 2.0
 0.9999999978989275
 0.0
 1.6405880971703326
 0.9999999999929665
 0.35941190288308944
 2.0
 0.0
 0.0
 0.0
 0.3594119034594829
 0.0
 0.0
 2.0
 0.9999999996157382
 1.9999999991024777
 0.0
 0.0
 5.964256226954464
 2.0357437721825185
 0.0
 0.0
 0.9205744125076143
 0.8216364809533705
 1.2577891066080826
 1.9999999992210582
 6.0
 0.0
 2.0
 0.9999999996944322
 0.0
 0.0
 0.9930664952474837
 3.323668131395719
 0.05704997269295528
 0.0
 4.942950028446726
 2.516188295315969
 1.9429500275440765
 0.0
 0.0
 1.0570499722892985
 1.9999999990063877
 0.0
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7276227570286524
 0.2651485346557352
 0.9999999971231852
 0.0
 0.0
 0.04647822488506822
 0.2723772429065478
 0.0
 1.0
 0.0
 0.0
 0.37499999989391947
 0.0
 0.0
 0.0
 0.8279736440775114
 0.0
 0.3136087486383146
 0.0
 1.0
 0.22060781391058396
 0.2922720697978203
 0.0
 0.1720263557663414
 0.0
 0.9999999992767196
 0.69625064574446
 0.6966957083187073
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.30330429152327826
 0.0
 0.0
 0.0
 0.9999999999744186
 0.0
 0.0
 0.7793921860907503
 0.0
 0.9999999980725007
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6863912511531771
 0.0
 0.0
 0.7348514653194087
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3037493540126414
 0.0
 0.0
 0.2862497054467887
 0.0
 0.0
 1.0



=====Finished running Instance #273=====




*****Running Instance #274*****


objective value: -612.651279185
objective bound: -612.712550434
BARON solution time: 313.43

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.2691514497887886
 0.0
 0.12181773045811939
 0.60987584442285
 0.0
 0.05853808167748319
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9142802296245698
 0.30316293254877347
 0.7511589410418619
 0.09972611628033752
 0.0
 0.0
 0.0
 0.7293443741762486
 1.8071257694837906
 0.23991944284206274
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.46857561712904544
 1.4057268512940984
 0.0
 0.7500000001105216
 2.2500000002094245
 0.0
 0.500176037213828
 1.500528111544991
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.28124834584379094
 0.8437450374847215
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.8196441887309274
 0.832684471119719
 0.0058830589730316215
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.84892794426828
 2.151072056446126
 0.0
 0.0
 0.0
 1.709356766509449
 1.2906432338302203
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6661972345534081
 0.33309861720415435
 0.0
 0.0
 1.3338027657072689
 0.6669013827083797
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6754350925121388
 0.0
 0.0
 0.0
 0.6085175982594917
 0.7160473088326964
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.391482402723473
 0.8983811049217898
 0.7101364926486563
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4825058260568877
 0.6515815419418451
 0.08967137096191553
 0.5174941743344849
 0.22744575173483889
 0.031301335388882794
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2004983386219626
 0.9584957548290651
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5891440166779733
 4.3755832792359355
 0.0
 0.9703829658127417
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.32456490816126693
 1.6341958467989837
 0.0
 1.4108559836592638
 0.0
 1.799501661775153
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.23217343026129098
 0.0
 0.13500944946197366
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.36580415407452604
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4417152905240826
 0.16731552964606547
 2.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7678265701265997
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.04150424547174541
 0.9674926936004782
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.12097270690205386
 0.0
 0.029617034745054723
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.660354440956579
 0.0
 0.0
 0.0
 0.1016188956586671
 5.8591074926054905
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.223758738960648
 0.0
 1.1589940932542058
 0.0
 0.0
 1.874302468404832
 0.7762412614582065
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 5.0000000005252465
 0.0
 1.1540479898709728
 0.0
 3.0
 0.9992958517575624
 2.0007041487378316
 0.0
 3.0
 0.0
 3.0
 0.0
 1.3909691802128898
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6684139260839953
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 2.0007041484156485
 0.0
 2.658211718823678
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.776389586502102
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.1249933833132015
 0.9142802294370451
 0.0
 5.9351102616283145
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 0.5891440166384604
 4.375583278936123
 0.0
 0.9703829657470896
 0.20049833861812452
 0.9584957548139541
 0.0
 0.0
 2.0
 0.8790272935914727
 0.12097270633906576
 1.3914824025863455
 0.8983811048332905
 0.710136492578721
 1.6754350923705037
 0.0
 0.0
 0.0
 0.6085175982064761
 0.7160473087707495
 0.0
 2.0
 0.9999999998805077
 0.0
 0.0
 0.0
 4.5582847104476265
 3.441715290026769
 0.0
 0.0
 1.819644188550801
 0.8326844710369723
 0.005883058971865711
 2.0
 6.0
 0.0
 2.0
 1.0
 0.0
 0.0
 1.0325073066896866
 2.558284710438543
 0.3396455591105748
 0.0
 0.0
 0.9142802295789096
 0.0
 0.0
 0.0
 3.0
 1.8790272941525112
 0.0
 0.18035581212989207
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.741252912955242
 0.0
 1.0
 0.0
 0.0
 0.23428780853914427
 0.2587470871416905
 0.0
 1.0
 0.0
 0.0
 0.37500000002148215
 0.0
 0.0
 0.0
 0.6250000000529088
 0.0
 0.29361819580787224
 0.0
 1.0
 0.33309861724395573
 0.2500880185805456
 0.0
 0.3750000000191344
 0.0
 1.0
 0.08358547609717783
 0.6754300236821241
 0.0
 0.1961744601316682
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3245699763493426
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6669013827880707
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7063818042261526
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7202400637711541
 0.0
 0.0
 0.14062417290886228
 1.0
 0.0
 1.0



=====Finished running Instance #274=====





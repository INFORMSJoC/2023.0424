===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.34     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.36
 Total CPU time used:                 0.35

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -147.970
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -623.470
 Preprocessing found feasible solution with value -623.470
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            20.49     -640.399         -623.470       
         23+            3            51.58     -638.567         -623.470       
        118             9            81.48     -638.335         -623.470       
        156+            8           111.38     -638.335         -623.470       
        214             9           141.28     -638.335         -623.470       
        258             5           171.19     -638.335         -623.470       
       3109            12           201.09     -638.335         -623.470       
       5347+            8           230.99     -638.335         -623.470       
       5411+            6           260.89     -638.335         -623.470       
       5888            16           290.79     -638.008         -623.470       
       9202            13           320.69     -638.008         -623.470       
      12607            16           350.58     -638.008         -623.470       
      15766            15           380.48     -638.008         -623.470       
      19121            16           410.38     -638.008         -623.470       
      22534            16           440.29     -638.008         -623.470       
      23919+            6           470.18     -638.008         -623.470       
      23935+            3           500.10     -638.008         -623.470       
      25487             7           529.99     -637.976         -623.470       
      29780            10           559.88     -637.976         -623.470       
      32524+            7           589.80     -637.976         -623.470       
      32535+            3           619.72     -637.976         -623.470       
      32790+            9           649.62     -637.976         -623.470       
      32814+            5           679.55     -637.976         -623.470       
      32867+            6           709.44     -634.506         -623.470       
      35812            11           739.34     -634.506         -623.470       
      38709            11           769.24     -634.506         -623.470       
      41755            10           799.14     -634.506         -623.470       
      43696+            7           829.05     -634.506         -623.470       
      43773+            7           858.95     -634.198         -623.470       
      43849+           10           888.85     -634.198         -623.470       
      43879+            3           918.77     -634.198         -623.470       
      43920+            2           948.67     -631.854         -623.470       
      43974+            2           978.59     -631.129         -623.470       
      44055+            3          1008.50     -628.858         -623.470       
      44125+            5          1038.41     -627.845         -623.470       
      44165+            4          1068.31     -626.766         -623.470       
      44193+            2          1098.23     -626.766         -623.470       
      44195             0          1101.63     -623.532         -623.470       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                  1105.69
 Total CPU time used:              1101.70

 Total no. of BaR iterations:   44195
 Best solution found at node:     587
 Max. no. of nodes in memory:      25
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -184.696
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -622.186
 Preprocessing found feasible solution with value -625.707
 Preprocessing found feasible solution with value -625.707
 Preprocessing found feasible solution with value -625.707
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            24.18     -631.997         -625.707       
         24+            3            54.08     -627.613         -625.707       
         49             0            70.95     -625.770         -625.707       

                         *** Normal completion ***            

 Wall clock time:                    71.24
 Total CPU time used:                70.95

 Total no. of BaR iterations:      49
 Best solution found at node:      37
 Max. no. of nodes in memory:       5
 
 All done
===========================================================================



*****Running Instance #109*****


objective value: -623.46972754
objective bound: -623.532080745
BARON solution time: 1105.68

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 0.9271608068921994
 1.0410204016564621
 0.0
 1.0728391933577208
 1.204588761388289
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9847498105876997
 0.0
 0.0
 1.0152501898816104
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.057127255931028555
 2.9736141418682664
 1.7415970417949835
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.03863670826676874
 2.0111356693906464
 1.1778891831132177
 0.09342209102419641
 0.2283811600023629
 0.0015888377111250864
 0.0
 0.0
 0.0
 0.8032740428064616
 1.9636967625631525
 0.013661352229100317
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6124919345863413
 1.837475803622745
 0.0
 0.4774194518478755
 1.4322583554348265
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9100886138785222
 2.730265841454908
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9831179557556682
 0.8773233949502495
 1.1395586495468748
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.620742651563226
 2.6404975084602196
 0.0
 0.0
 0.0
 0.47011516368037337
 0.2686446772722596
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7268814621873119
 0.3634407310391106
 0.0
 0.0
 1.273118538073792
 0.636559268941339
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5779541448547696
 0.0
 0.0
 0.0
 0.5232659623372975
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.476734038634075
 0.9449620758293402
 0.5783038858337252
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4182527469399295
 0.7091263731137075
 0.0
 0.5817472534341578
 0.2908736265709482
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7932500054082742
 0.830076564941251
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9454225008088484
 2.502209890695405
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.42204585583036824
 1.1654761953312833
 0.0
 0.05457749963103001
 0.0
 1.206749995037181
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2774279544828466
 0.0
 1.6276420843937782
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7387598412451923
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8987798929618243
 0.0
 0.9091421861064917
 0.12267660574545741
 2.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7225720458965696
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.1699234353981195
 1.1033038664917911
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9271260888713314
 0.0
 0.0
 0.0
 0.0
 0.08975595601425197
 0.0
 0.05503792475608352
 0.9871901041439007
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.1273791202874355
 4.772338439594279
 1.6233265701523765
 0.0
 0.0
 0.0
 0.8726208801010087
 0.0
 3.0
 0.0
 0.0
 2.44996773818405
 0.0
 0.0
 0.0
 7.2612401597708125
 0.0
 0.32339208873768444
 0.0
 3.0
 1.0903221932264224
 1.9096778072645157
 0.0
 0.7387598409280496
 0.0
 2.1012201078150348
 0.0
 1.968181208502816
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.2774279546930334
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 1.9096778070151308
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.7806321575987147
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.6403544552852862
 3.2276615607706325
 0.0
 5.447632391503959
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.9454225006676258
 2.5022098905137455
 0.0
 1.0
 0.7932500053557235
 0.8300765648862348
 0.0
 0.0
 2.0
 0.9999999995963735
 0.0
 1.4767340384887577
 0.9449620757363647
 0.5783038857768394
 1.5779541447520578
 0.0
 0.0
 0.0
 0.5232659623031858
 0.0
 0.0
 2.0
 0.9999999999482199
 0.0
 0.0
 0.0
 5.090857814869047
 2.9091421855184616
 0.0
 0.0
 0.983117955704418
 0.8773233949045143
 1.1395586494874692
 2.0
 6.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.8966961338002299
 2.192077922491601
 0.015250189939374896
 0.09576396419430647
 4.984749811077196
 2.919486224801773
 1.9847498104503
 0.0
 0.0
 1.0152501898112603
 2.0
 2.245609162942119
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7091263733999312
 0.596542304943821
 1.0
 0.0
 0.0
 0.0
 0.29087362668835093
 0.0
 1.0
 0.0
 0.0
 0.30624596726143904
 0.0
 0.0
 0.0
 0.9076550199589661
 0.0
 0.10418478178125437
 0.0
 1.0
 0.36344073105791336
 0.23870972589854667
 0.0
 0.09234498011460447
 0.0
 1.0
 0.09662030285362241
 0.4635804034094256
 0.0
 0.15303230420058686
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5364195966364096
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6365592689743157
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8958152182524005
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7503473929457908
 0.0
 0.0
 0.45504430689760056
 0.40345769509263346
 0.0
 1.0



=====Finished running Instance #109=====




*****Running Instance #110*****


objective value: -625.707214951
objective bound: -625.76979193
BARON solution time: 71.23

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.5561775169856755
 0.0
 0.0
 0.44382248237548494
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9773039358123246
 0.0
 0.0
 1.0226960639300968
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.26291585919363497
 0.14306766549805036
 0.0
 0.0
 0.0
 0.0
 4.714388077837349
 2.565370147682544
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2227151007519974
 0.7388610752879116
 0.0048305834422328105
 0.0
 0.0
 0.0
 0.8236918978341313
 2.732611660772781
 0.017865481019025662
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.9999999997661188
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.155705013036264
 0.46711503899754164
 0.0
 0.7500000002344467
 2.2500000004922707
 0.0
 0.5578519897836693
 1.6735559691733919
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5364429972887539
 1.6093289916923295
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999980537517
 0.9999999988114245
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.801520216198769
 1.600506737836884
 0.0
 0.0
 0.0
 1.1984797839898806
 0.39949326103465715
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.443822481413825
 0.0
 0.0
 0.0
 0.3435162969340839
 0.0
 0.512394694356125
 0.25619734704231417
 0.0
 0.0
 1.4876053058438878
 0.7438026525238073
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.4714727336256643
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.52852726725847
 1.0
 0.4714727330421979
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3794361870775316
 0.689718092118024
 0.0
 0.6205638132144276
 0.31028190596509975
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7547071271974339
 0.9514640212813651
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5569776987116768
 2.820089455192551
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 1.5999778620644898
 0.0
 0.44302230174793916
 0.0
 1.2452928717616318
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.25985980741567766
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999987291412
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.14577198544249276
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4000221383715706
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.528527265182989
 0.0
 0.0
 0.0
 0.21266122177080918
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7401401926217952
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.04853597711286039
 0.9535930014964635
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.854228012186522
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.06915428005717
 0.40598352478960686
 1.7061711486955717
 0.0
 0.0
 0.6228200521133925
 0.9308457196215056
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 6.4020269550699505
 0.0
 0.9664067594821418
 0.0
 3.0
 0.7685920413984391
 2.2314079590264226
 0.0
 1.5979730455900243
 0.0
 2.471472735610718
 1.4438224815466627
 1.5561775173586827
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4438224825623383
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 2.2314079583676953
 0.0
 2.9999999994602637
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.5741690396259376
 0.0
 0.0
 7.279758225656119
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.34351629698465114
 0.0
 0.0
 2.1457719890509286
 0.0
 0.0
 5.3770671541808905
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.5569776985332182
 2.820089454913087
 0.0
 0.9999999999168657
 0.7547071285367183
 0.9514640229715874
 0.0
 0.0
 2.0
 0.9999999980000855
 0.0
 1.5285272671066548
 0.9999999999787739
 0.4714727329616543
 1.9999999999467428
 0.0
 0.0
 0.0
 0.47147273357202846
 0.0
 0.0
 2.0
 0.9999999995335551
 1.7873387785321628
 0.0
 0.0
 5.9999999999251274
 1.999999998890616
 0.0
 0.0
 1.999999998474508
 0.999999999037481
 0.0
 2.0
 5.999999999987202
 0.0
 2.0
 0.9999999997260219
 0.0
 0.0
 1.0464069986854287
 3.4714727364081783
 0.022696064336806095
 0.0
 4.977303936833401
 2.708437813063925
 1.9773039356579654
 0.0
 0.0
 1.0226960638723912
 1.9999999993002855
 0.0
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.6897180935160676
 0.0528229464260954
 0.9999999982261414
 0.0
 0.0
 0.0778525065025633
 0.31028190660418364
 0.0
 1.0
 0.0
 0.0
 0.37500000008769896
 0.0
 0.0
 0.0
 0.800253369375776
 0.0
 0.2128379311582171
 0.0
 1.0
 0.25619734716266124
 0.2789259948671174
 0.0
 0.19974663067941817
 0.0
 1.0
 0.8078057158251036
 0.7780887587652537
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.22191124126557574
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7438026528737495
 0.0
 0.9999999998051848
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7871620687424686
 0.0
 0.0
 0.9471770536168599
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.19219428407216058
 0.0
 0.0
 0.2682214986201844
 0.0
 0.0
 1.0



=====Finished running Instance #110=====





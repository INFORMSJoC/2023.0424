===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.34     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.37
 Total CPU time used:                 0.35

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -198.107
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -545.981
 Preprocessing found feasible solution with value -612.367
 Preprocessing found feasible solution with value -614.049
 Preprocessing found feasible solution with value -617.263
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            28.70     -635.232         -617.263       
         93+            7            58.75     -633.846         -617.263       
*      1801             5            80.18     -633.846         -618.805       
       5788             8           110.08     -633.846         -618.805       
*      6044             9           112.15     -633.846         -618.994       
       9982             8           142.35     -633.846         -618.994       
      14213             9           172.24     -633.846         -618.994       
      18975             8           202.12     -633.846         -618.994       
      23012            13           232.01     -633.846         -618.994       
      26302            10           261.91     -633.846         -618.994       
      30194             7           291.80     -633.846         -618.994       
      34203             6           321.69     -633.846         -618.994       
      38497             7           351.58     -633.040         -618.994       
      42646             8           381.46     -632.960         -618.994       
      46178             2           411.36     -632.750         -618.994       
      48086             9           441.25     -632.483         -618.994       
      49690             6           471.14     -632.216         -618.994       
      54770             8           501.03     -632.216         -618.994       
      57079+            5           530.92     -629.165         -618.994       
      60878             7           560.81     -623.596         -618.994       
      63747             0           580.38     -619.056         -618.994       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   582.71
 Total CPU time used:               580.50

 Total no. of BaR iterations:   63747
 Best solution found at node:   18184
 Max. no. of nodes in memory:      18
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -184.681
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -524.131
 Preprocessing found feasible solution with value -633.422
 Preprocessing found feasible solution with value -633.422
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            22.02     -641.211         -633.422       
         19+            3            51.93     -635.930         -633.422       
         23             0            60.23     -633.485         -633.422       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                    60.54
 Total CPU time used:                60.30

 Total no. of BaR iterations:      23
 Best solution found at node:       1
 Max. no. of nodes in memory:       4
 
 All done
===========================================================================



*****Running Instance #941*****


objective value: -618.993800142
objective bound: -619.055705559
BARON solution time: 582.7

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.1256682883489781
 1.1649331000992602
 0.0
 0.8743317119071331
 0.9048295685409478
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9228414771688744
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.2296362120975928
 0.4356301740726084
 0.2612993691165314
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7500000000458975
 2.2500000001824754
 0.0
 0.4581552288933174
 1.37446568668066
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7918447711241717
 2.3755343134232847
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.9795421069959861
 0.020457892831755056
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.969414336440045
 2.0096781572115336
 0.0
 0.0
 0.0
 1.3416449471424883
 0.6792625602922328
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.15527812605496244
 0.0
 0.7782527233520066
 0.38912636157119934
 0.0
 0.0
 1.2217472768920767
 0.6108736382804912
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.386407599511763
 0.0
 0.0
 0.0
 0.3101196409423912
 0.40912860796847367
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6898803600031482
 1.0
 0.31011964020170607
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.316330055075032
 0.6581650269463695
 0.0
 0.6836699453034033
 0.34183497234443544
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5828614457042977
 0.6367580567090753
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.514207349818486
 4.767038884066384
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.6135924011096174
 1.60786019307914
 0.0
 0.4857926505700284
 0.0
 1.4171385543869846
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.31176209252643816
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999996977509
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.39213980767591167
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.894344151517987
 0.0
 0.688940717700485
 0.020457893569522802
 1.8447218735074398
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.688237907779023
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.36324194316888964
 0.7703637881723325
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9810849577968979
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.7387006309214388
 0.0
 0.0
 0.0
 0.0
 3.909779439588156
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 1.9744950822007243
 0.0
 1.2196195022266105
 0.0
 0.0
 0.0
 1.0255049177370574
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 5.979092493455001
 0.0
 0.0
 0.0
 3.0
 1.1673790849232057
 1.8326209155479376
 0.0
 2.0209075073436567
 0.0
 2.105655849213204
 0.0
 2.290601388386049
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.7791612803941999
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 1.832620915172568
 0.0
 2.9999999999754885
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9265657552867326
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.1552781259742377
 0.0
 0.0
 3.1673790844921443
 0.9228414770198051
 0.0
 7.281246233942308
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.5142073497238895
 4.767038883752744
 0.0
 1.0
 0.5828614459896283
 0.6367580570212673
 0.0
 0.0
 2.0
 0.9999999991950389
 0.0
 1.6898803598508203
 1.0
 0.3101196401820891
 1.3864075994111507
 0.0
 0.0
 0.0
 0.3101196409132709
 0.4091286079326329
 0.0
 2.0
 0.9999999998232554
 0.15527812686114403
 0.0
 0.0
 5.311059283162199
 2.68894071729166
 0.0
 0.0
 2.0
 0.9795421070031809
 0.02045789284012779
 2.0
 6.0
 0.0
 2.0
 0.9999999999721344
 0.0
 0.0
 1.229636212096528
 0.43563017406886656
 0.2612993691122358
 0.0
 0.0
 0.9228414771254179
 0.0
 0.0
 0.0
 3.0
 2.0
 2.069762668543884
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.6581650274795889
 0.0
 0.9999999995055457
 0.0
 0.0
 0.0
 0.3418349726222495
 0.0
 1.0
 0.0
 0.0
 0.37500000000503037
 0.0
 0.0
 0.0
 0.7473865616678705
 0.0
 0.0
 0.0
 1.0
 0.3891263616411095
 0.22907761443004937
 0.0
 0.25261343841379785
 0.0
 1.0
 0.0
 0.5628341441280994
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4371658559174032
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6108736383920419
 0.0
 0.9999999999966663
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9999999999996562
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9999999947980189
 0.0
 0.0
 0.3959223855438964
 1.0
 0.0
 1.0



=====Finished running Instance #941=====




*****Running Instance #942*****


objective value: -633.421574134
objective bound: -633.484922625
BARON solution time: 60.54

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.4449861211535027
 0.0
 0.0
 0.5550138790616267
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.8939081414289158
 0.0
 0.31452545725452435
 0.7915664017112156
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.1138448598961668
 0.41866852900445545
 0.0
 0.0
 0.0
 0.0
 4.094588739549693
 1.5390612339184133
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.1757812298196981
 1.3901022032374806
 0.10609185909378387
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.10695693812855774
 0.32087081436552534
 0.0
 0.7500000001140357
 2.2500000002067875
 0.0
 0.5526531945950728
 1.6579595836736496
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5903898674570005
 1.7711696022547307
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.9529659877794522
 0.047034012321411814
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.121279469945332
 3.2184551647529442
 0.0
 0.0
 0.0
 0.3707406649176308
 0.28952470136753683
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5262581481955959
 0.263129074053034
 0.0
 0.0
 1.4737418520656032
 0.7368709259074439
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9268935887968461
 0.0
 0.0
 0.0
 0.39540588518098563
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6045941157924637
 1.0
 0.3954058844066122
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4933027271370307
 0.7466513631874159
 0.0
 0.5066972732550569
 0.25334863649821643
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2511751470165645
 0.6274021426933887
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7673137188149611
 3.6468643541474557
 0.0
 0.9127515095608436
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0731064119131703
 1.339734634206517
 0.0
 1.2326862815401558
 0.0
 1.7488248532925257
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2580978653853151
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6602653665865909
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6777005262072744
 0.0
 1.5079798664281399
 0.047034012942421544
 2.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7419021350008655
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.37259785737191364
 0.8242187705235553
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4242174056161319
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.08724849099747226
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.638440531524969
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.239954090576667
 1.5325133888953986
 0.8785772895132624
 0.0
 0.0
 0.4278277524889172
 0.760045909838855
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 7.339734634435701
 0.0
 0.0
 0.0
 3.0
 0.7893872222486299
 2.210612778245761
 0.0
 0.6602653662624937
 0.0
 2.3222994745823855
 0.0
 1.4449861210168429
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5550138790091362
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 2.210612777973047
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.6719752921509627
 0.0
 0.0
 5.633649973448904
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.3615594696857434
 0.0
 0.0
 5.326929582460467
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 0.7673137187577208
 3.6468643538742325
 0.0
 0.9127515094926997
 0.25117514710188293
 0.6274021429065062
 0.0
 0.0
 2.0
 0.9999999995880144
 0.0
 1.604594115637626
 1.0
 0.39540588436837465
 1.9268935886654661
 0.0
 0.0
 0.0
 0.3954058851538731
 0.0
 0.0
 2.0
 0.9999999999282031
 0.0
 0.0
 0.0
 4.492020134532119
 3.5079798658621177
 0.0
 0.0
 2.0
 0.9529659877216022
 0.047034012318556986
 2.0
 6.0
 0.0
 2.0
 1.0
 0.0
 0.0
 1.1757812297690864
 1.3901022031776444
 0.10609185908921044
 0.0
 5.208433599232421
 1.9577297628426418
 1.8939081412983874
 0.0
 0.3145254572328184
 0.7915664016566375
 2.0
 0.0
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7466513634950254
 0.21385409618360438
 0.9999999996603135
 0.0
 0.0
 0.05347846905909746
 0.2533486366025923
 0.0
 1.0
 0.0
 0.0
 0.37500000002231126
 0.0
 0.0
 0.0
 0.9174668292920727
 0.0
 0.0
 0.0
 1.0
 0.2631290740719258
 0.2763265972689922
 0.0
 0.08253317078157735
 0.0
 1.0
 0.05664884282750617
 0.7224930605211727
 0.0
 0.09572175671273944
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2775069395094658
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7368709259603489
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7861459038573752
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8476294004597544
 0.0
 0.0
 0.29519493369873756
 0.0
 0.0
 1.0



=====Finished running Instance #942=====





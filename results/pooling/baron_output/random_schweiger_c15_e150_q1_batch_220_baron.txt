===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.32     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.35
 Total CPU time used:                 0.33

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -628.144
 Solving bounding LP
 Starting multi-start local search
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            19.17     -634.611         -628.144       
         20+            3            49.06     -632.945         -628.144       
        553             7            78.95     -632.259         -628.144       
       3920             9           108.85     -632.257         -628.144       
       5455             7           138.74     -631.528         -628.144       
       9879             8           169.28     -631.528         -628.144       
      14166            11           199.17     -631.263         -628.144       
      18463             8           229.05     -631.263         -628.144       
      22702             7           258.94     -631.263         -628.144       
      27376            12           288.83     -631.149         -628.144       
      30851             0           314.76     -628.207         -628.144       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   316.89
 Total CPU time used:               315.67

 Total no. of BaR iterations:   30851
 Best solution found at node:    3952
 Max. no. of nodes in memory:      16
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -186.076
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -628.388
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
*         1             1             5.98     -643.863         -628.390       
          1             1            15.41     -639.543         -628.390       
         22             4            45.41     -638.098         -628.390       
        131+            3            75.31     -638.098         -628.390       
        499             7           105.47     -638.098         -628.390       
       4088             9           135.36     -638.098         -628.390       
       8187             9           165.24     -638.098         -628.390       
       9309             5           195.14     -633.981         -628.390       
       9552             5           225.05     -631.703         -628.390       
       9561             0           232.85     -628.453         -628.390       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   235.01
 Total CPU time used:               234.08

 Total no. of BaR iterations:    9561
 Best solution found at node:    1257
 Max. no. of nodes in memory:      14
 
 All done
===========================================================================



*****Running Instance #439*****


objective value: -628.144379096
objective bound: -628.207199806
BARON solution time: 316.88

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.3252781260805966
 0.0
 0.0
 0.6747218731057422
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.903914252314832
 0.0
 0.0
 1.096085747961403
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0371887643188809
 0.6524130084229354
 0.0
 0.0
 0.0
 0.0
 3.866725488793009
 2.432249649870787
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0100911182274288
 0.25617491479965054
 0.0960857481430005
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.1065009380195595
 0.3195028139381886
 0.0
 0.7500000000619971
 2.2500000000901803
 0.0
 0.49122642231110963
 1.4736792668302576
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.652272639960513
 1.9568179197831794
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4651350315374245
 0.861719614237831
 0.6731453543521817
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.761296547068517
 2.238703454162196
 0.0
 0.0
 0.0
 1.6567779277372936
 1.3432220720947226
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.23411855136400672
 0.0
 0.6900628743223766
 0.3450314370141472
 0.0
 0.0
 1.309937125904554
 0.6549685626725037
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.759679671512619
 0.0
 0.0
 0.0
 0.46057888682470627
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5394211140689986
 0.9956251059303699
 0.46495378030654055
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5195109015207056
 0.7597554496262997
 0.0
 0.48048909886478386
 0.24024454908165851
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.1568611189876415
 0.9976302559538269
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0003726035494406457
 0.002369743157710279
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.09320511872527854
 0.11419414542128871
 0.0
 0.046602559378786275
 0.0
 0.0
 0.0
 0.0
 1.906794881590629
 2.3361894173100892
 0.0
 0.9533974407981992
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.2403203290007498
 1.5930138774958187
 0.0
 0.0
 0.0
 1.8427662777484388
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2198891054719226
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999993591464
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4069861229175972
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7797414416852592
 0.0
 1.5364414873236971
 0.1382803861259294
 1.7658814479685667
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.045484038811299574
 0.0
 0.0
 0.7801108948183051
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9899088819216554
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.47518506866872723
 0.0
 0.0
 0.0
 0.0
 0.059679900242046426
 0.0
 0.0043748946131780195
 5.326854646364154
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.2792663520905974
 1.6896017727868224
 1.1544913749414685
 0.0
 0.0
 0.4260037519577481
 0.7207336482471165
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 5.000000001230713
 0.0
 0.0
 0.0027423467014990946
 3.0
 1.0350943113365236
 1.9649056891413672
 0.0
 2.9999999998386877
 0.0
 2.220258559191962
 0.0
 1.3252781261569206
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6747218731534484
 0.2540018235253535
 0.0
 0.0
 3.0
 0.0
 0.0
 1.9649056885770577
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3623517811700798
 0.0
 0.0
 6.298975138824279
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.23411855136400672
 0.0
 0.0
 2.6090905597436924
 0.0
 0.0
 5.196381739698918
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 2.0
 2.4503835625844563
 0.0
 1.0
 0.157233722607654
 0.9999999997005228
 0.0
 0.0
 2.0
 0.99999999859716
 0.0
 1.5394211139287413
 0.9956251058348213
 0.46495378026413
 1.759679671481326
 0.0
 0.0
 0.0
 0.460578886795798
 0.0
 0.0
 2.0
 0.9999999996606065
 0.2341185523737246
 0.0
 0.0
 4.418074474468248
 3.5819255259704623
 0.0
 0.0
 1.4651350315372478
 0.8617196142392455
 0.6731453543533724
 2.0
 6.0
 0.0
 2.0
 0.9999999999883857
 0.0
 0.0
 1.0100911183211905
 0.2561749148086818
 0.09608574812962095
 0.0
 4.903914252941509
 3.084662658168979
 1.9039142521712928
 0.0
 0.0
 1.0960857478762829
 1.9999999991818194
 0.0
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7597554506983923
 0.21150222267878674
 0.9976302562530929
 0.0
 0.0
 0.05325046898472389
 0.24024454941350043
 0.0
 1.0
 0.0
 0.0
 0.37500000000007944
 0.0
 0.0
 0.0
 0.6250000001237115
 0.0
 0.0
 0.002369743158918387
 1.0
 0.34503143713332013
 0.2456132111276595
 0.0
 0.3749999999571104
 0.0
 1.0
 0.0
 0.6626390633114642
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3373609366909687
 0.04660255935938943
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6549685628982729
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9999999999070359
 0.0
 0.0
 0.7884977773577639
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9999999956860808
 0.0
 0.0
 0.32613631995052766
 0.0
 0.0
 0.9533974407065483



=====Finished running Instance #439=====




*****Running Instance #440*****


objective value: -628.390229832
objective bound: -628.453075133
BARON solution time: 235.0

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.0187422111855455
 1.3481432327131295
 0.0
 0.981257789102918
 1.298538563928463
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 1.0000000003136926
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.34977518642861
 0.5540506116528262
 0.0
 0.0
 0.0
 0.0
 3.6502248144752287
 1.498330471232753
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.18109383149227154
 0.6000713135229383
 0.0
 0.0
 0.0
 0.0
 0.8911144345321184
 2.9527908533516047
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.823316743433017
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5194472643874172
 1.558341793080868
 0.0
 0.5084299409622255
 1.5252898228062444
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9721227949667975
 2.9163683847790023
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.8747957591569148
 0.12520424076316383
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.361226434455778
 1.787075477801369
 0.0
 0.0
 0.0
 0.6387735666467758
 0.21292452217889365
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4433702288693061
 0.06454008580847066
 0.0
 0.0
 0.0
 0.0
 0.6441868245221373
 0.3220934122248525
 0.0
 0.0
 1.3558131757488634
 0.6779065877909187
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.5528621656347866
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4471378353545477
 1.0
 0.5528621648525742
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.326713932305587
 0.6633569658672931
 0.0
 0.6732860681126994
 0.3366430339106322
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3763873826782493
 0.653502688506929
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.065804223260574
 3.394756753812523
 0.0
 0.9945971207988612
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 1.5364957752612076
 0.0
 0.934195777127532
 0.0
 1.6236126177364745
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.21525626712312054
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.463504225513829
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4471378343432657
 0.0
 0.0
 0.12520424148272227
 1.556629771524728
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7202036473578173
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3464973118054961
 0.9277917342833394
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.1766832574447376
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.005402879775095355
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.228113963795715
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 1.990070898357841
 1.9038257980814364
 1.0298900711851784
 0.0
 0.0
 0.0
 1.0099291021151349
 0.0
 3.0
 0.0
 0.0
 2.0777890574682853
 0.0
 0.0
 0.0
 7.148301912257147
 0.0
 0.7811651450152098
 0.0
 3.0
 0.9662802367469898
 2.03371976376847
 0.0
 0.8516980888256694
 0.0
 2.552862166536713
 0.5079103146777768
 2.366885443898675
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.279796353031381
 0.0
 0.0
 0.0
 2.823316743427097
 0.0
 0.0
 2.033719763539782
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.843905287883723
 0.0
 0.0
 5.148555285707982
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.8884911797457997
 0.0
 0.0
 5.4551580978719585
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.0658042231707174
 3.3947567535007317
 0.0
 0.9945971207157067
 0.3763873826575658
 0.6535026884737591
 0.0
 0.0
 2.0
 0.9999999996695744
 0.0
 1.4471378352131403
 1.0
 0.5528621647999861
 2.0
 0.0
 0.0
 0.0
 0.5528621655776054
 0.0
 0.0
 2.0
 0.9999999999830257
 0.44337022886808225
 0.06454008580620858
 0.0
 6.0
 1.9999999998116853
 0.0
 0.0
 2.0
 0.874795759155773
 0.12520424076690667
 2.0
 6.0
 0.0
 1.8233167432448933
 0.9999999999987972
 0.0
 0.0
 1.0722082660080337
 3.5528621668198874
 0.0
 0.0
 5.000000000658846
 2.052381082792831
 2.0
 0.0
 0.0
 1.0000000002314857
 2.0
 2.6466817965134526
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.6633569660912461
 0.2699550372497431
 1.0
 0.0
 0.0
 0.0
 0.3366430340246305
 0.0
 1.0
 0.0
 0.0
 0.2597236321687348
 0.0
 0.0
 0.0
 0.8935377389890177
 0.0
 0.16889799979495398
 0.0
 1.0
 0.3220934122273269
 0.25421497045644253
 0.0
 0.1064622610946363
 0.0
 1.0
 0.999999999999441
 0.5093711055439043
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4906288945044011
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6779065878119611
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8311020002204895
 0.0
 0.0
 0.7300449627984411
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.48606139744572047
 0.0
 0.0
 1.0



=====Finished running Instance #440=====





===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.29     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.32
 Total CPU time used:                 0.30

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -158.845
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -505.720
 Preprocessing found feasible solution with value -626.412
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            24.19     -636.814         -626.412       
         40+            5            55.05     -634.215         -626.412       
        181+            5            84.97     -634.215         -626.412       
        302+            9           114.87     -634.215         -626.412       
        458+            8           144.78     -634.215         -626.412       
        560             6           174.70     -634.215         -626.412       
        637             6           204.59     -634.215         -626.412       
        815+            9           234.49     -634.215         -626.412       
        948+            7           264.39     -634.215         -626.412       
       1695            10           294.75     -634.215         -626.412       
       5942            14           324.65     -634.215         -626.412       
      10364            16           354.54     -634.215         -626.412       
      11657            10           384.43     -634.215         -626.412       
      15727             7           414.33     -634.215         -626.412       
      20105            10           444.22     -634.215         -626.412       
      24921             8           474.11     -634.215         -626.412       
      29862            10           504.00     -634.215         -626.412       
      30967             9           533.90     -634.096         -626.412       
      31179             5           563.79     -633.962         -626.412       
      31367+            8           593.70     -633.895         -626.412       
      31494+            7           623.60     -633.895         -626.412       
      31619+            7           653.51     -633.895         -626.412       
      31793+            5           683.41     -633.895         -626.412       
      32002+            5           713.32     -633.895         -626.412       
      32120+            5           743.22     -633.235         -626.412       
      32263+            4           773.11     -633.235         -626.412       
      32394             5           803.03     -632.787         -626.412       
      32529+            7           832.93     -631.491         -626.412       
      32717+            2           862.83     -630.913         -626.412       
      32943+            4           892.74     -627.601         -626.412       
      32953             0           896.34     -626.475         -626.412       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   899.74
 Total CPU time used:               896.45

 Total no. of BaR iterations:   32953
 Best solution found at node:     470
 Max. no. of nodes in memory:      19
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -177.226
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -627.931
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            16.06     -637.339         -627.931       
         26+            4            45.96     -635.065         -627.931       
*        34             4            47.90     -635.065         -627.942       
        803             7            77.80     -634.875         -627.942       
       1847+            5           107.70     -634.292         -627.942       
       2111+            4           137.58     -634.292         -627.942       
       2325+            4           167.48     -634.127         -627.942       
       4485             7           197.38     -633.621         -627.942       
       6548             7           227.27     -632.981         -627.942       
       8841+            6           257.15     -630.570         -627.942       
       8859             0           271.10     -628.005         -627.942       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   272.48
 Total CPU time used:               271.40

 Total no. of BaR iterations:    8859
 Best solution found at node:      34
 Max. no. of nodes in memory:      12
 
 All done
===========================================================================



*****Running Instance #513*****


objective value: -626.412399826
objective bound: -626.475047321
BARON solution time: 899.73

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.4251117700237244
 0.0
 0.0
 0.574888230215939
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 1.000000000307681
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.1431042724471787
 0.3256623484593679
 0.0
 0.0
 0.0
 0.0
 3.856895728457373
 1.098802402341583
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.30917627761482996
 0.9587893851871506
 0.0
 0.0
 0.0
 0.0
 0.7081294412370935
 2.1959866935349264
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.05587096571155297
 0.16761289707670707
 0.0
 0.750000000068551
 2.2500000002544556
 0.0
 0.5339200169245041
 1.6017600507858636
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6602090175936325
 1.9806270528145087
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.2955943556487346
 0.7707470917973072
 0.5887641271176575
 0.16829585826637766
 0.10011894753895823
 0.07647962007816161
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.053710403220198
 1.3512368011131497
 0.0
 0.0
 0.0
 1.9462895977445616
 0.6487631992814704
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4457542686397153
 0.0
 0.0
 0.0
 0.5542457315047474
 0.0
 0.5762132885707907
 0.28810664424853344
 0.0
 0.0
 1.4237867116988063
 0.7118933557527912
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.690115897065868
 0.0
 0.0
 0.0
 0.46466018100658973
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5353398199885402
 0.9755923236871709
 0.48906785657274354
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4188897404942447
 0.7094448699029755
 0.0
 0.5811102599368823
 0.29055512982915366
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.24393408766907393
 0.8818330070287758
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4665386695631353
 4.086467394202075
 0.0
 0.8150975073329498
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.3098841036522475
 1.512708901328848
 0.0
 1.5334613307705893
 0.0
 1.756065912507418
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2698332883724162
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.48729109942090315
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8452239220458241
 0.0
 0.0
 0.1291339612957786
 0.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7301667119815728
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.11816699244334225
 0.9826942814477844
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.18490249321714733
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5361097868875704
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.024407676895674753
 5.334756253875069
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.128334610630844
 1.4687666208962307
 1.1257670945042668
 0.0
 0.0
 0.22348386279646387
 0.8716653898605933
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 5.404947204108562
 0.0
 1.2679656627651295
 0.0
 3.0
 0.8643199328193241
 2.135680067668119
 0.0
 2.5950527969183557
 0.0
 2.1547760787184553
 1.4457542685833702
 1.4251117699655205
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5748882301873842
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 2.1356800674515974
 0.0
 2.655105574563699
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.904116134708158
 0.0
 0.0
 4.955698130785377
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3448944258834975
 0.5542457314755566
 0.0
 0.0
 2.6408360703523495
 0.0
 0.0
 5.3681035710021945
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 0.4665386695233305
 4.086467393832004
 0.0
 0.8150975072598756
 0.24393408788077345
 0.8818330078106134
 0.0
 0.0
 2.0
 0.9999999996153673
 0.0
 1.5353398198329367
 0.9755923235926781
 0.4890678565311159
 1.6901158969020653
 0.0
 0.0
 0.0
 0.4646601809526685
 0.0
 0.0
 2.0
 0.9999999999651857
 2.0
 0.0
 0.0
 6.0
 2.000000000226904
 0.0
 0.0
 1.463890213782373
 0.8708660392639426
 0.6652437471453706
 2.0
 6.0
 0.0
 2.0
 1.0
 0.0
 0.0
 1.017305718830521
 3.154776078666703
 0.0
 0.0
 5.000000000642551
 1.4244647507251034
 2.0
 0.0
 0.0
 1.0000000002345388
 2.0
 0.0
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7094448701824737
 0.22862085446000377
 0.9999999991120041
 0.0
 0.0
 0.027935482841423033
 0.2905551299417613
 0.0
 1.0
 0.0
 0.0
 0.3750000000149553
 0.0
 0.0
 0.0
 0.6756184004962524
 0.0
 0.30391677928312927
 0.0
 1.0
 0.2881066442572398
 0.26696000844367324
 0.0
 0.32438159960251006
 0.0
 1.0
 0.7228771342897815
 0.712555884959929
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2874441150860467
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7118933557841902
 0.0
 0.8850351914850288
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6960832207348631
 0.0
 0.0
 0.7713791455922926
 0.0
 0.0
 0.0
 0.0
 0.0
 0.11496480861260967
 0.27712286574108413
 0.0
 0.0
 0.33010450877779307
 0.0
 0.0
 1.0



=====Finished running Instance #513=====




*****Running Instance #514*****


objective value: -627.941740349
objective bound: -628.004540759
BARON solution time: 272.47

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.3257029730456573
 0.0
 0.0
 0.6742970256470586
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999997073457
 0.0
 0.0
 1.0000000002521767
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8747114128339205
 0.34285635081837035
 0.0
 0.0
 0.0
 0.0
 4.12528858756704
 1.6169691746135524
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.2128561829443474
 1.2282051357568435
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.9999999997095657
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7347789991598005
 2.204336997405817
 0.0
 0.5630611097363799
 1.6891833291675689
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7021598910212299
 2.1064796729962136
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.2426552234625858
 0.8335197205382093
 0.7661346686075927
 0.06894209661623883
 0.04624339561838121
 0.04250489545277983
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.9441432065792394
 1.8780256753806923
 0.0
 0.0
 0.0
 0.8535944817926783
 0.3242366342830261
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3517978314455306
 0.0
 0.0
 0.0
 0.6482021665717567
 0.0
 0.4985037076605072
 0.24925185371675299
 0.0
 0.0
 1.5014962924989868
 0.7507481459066319
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6510010831382813
 0.0
 0.0
 0.0
 0.2480614274525296
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.7519385731162347
 1.0
 0.24806142708885948
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4402150909722695
 0.7201075439658084
 0.0
 0.5597849090861496
 0.2798924539422527
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5360027871257024
 0.9670623339138857
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.913105799246109
 3.7921130486247394
 0.0
 0.9417964477409856
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.3489989158583378
 1.5664005738134532
 0.0
 1.0868942010436835
 0.0
 1.4639972118326081
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.23879506785816565
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999987670067
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.43359942633873555
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.1009374881919654
 0.0
 0.20226231137192072
 0.12023688404836923
 0.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7612049322292795
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.032937663822999015
 0.7871438167163157
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4685950658981979
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.058203552681997506
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6884026804992954
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.191360436636402
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.1603226360890595
 1.2175677637843774
 1.5030651212481614
 0.0
 0.0
 0.0
 0.8396773635368281
 0.0
 3.0
 0.0
 0.0
 2.9391159966930673
 0.0
 0.0
 0.0
 6.822168882629133
 0.0
 0.0
 0.0
 3.0
 0.7477555613772602
 2.252244439030768
 0.0
 1.1778311165330675
 0.0
 1.8990625124797198
 1.3517978315178856
 1.3257029732595442
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6742970258068873
 0.0
 0.0
 0.0
 2.9999999999569997
 0.0
 0.0
 2.2522444384056186
 0.0
 2.8423096126083878
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.44106131884402
 0.0
 0.0
 5.7422577624650115
 0.0
 0.0
 0.0
 0.0
 0.0
 0.15769038768739987
 0.6482021666164758
 0.0
 0.0
 2.8086395641447583
 0.0
 0.0
 5.647015295865785
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 0.9131057992307988
 3.7921130485063173
 0.0
 0.9417964477250635
 0.53600278844453
 0.9670623362931086
 0.0
 0.0
 2.0
 0.9999999979801154
 0.0
 1.7519385730044619
 1.0
 0.24806142703541367
 1.6510010846056813
 0.0
 0.0
 0.0
 0.2480614276725557
 0.0
 0.0
 2.0
 0.9999999996165594
 1.999999998325403
 0.0
 0.0
 5.797737689208972
 2.2022623101352345
 0.0
 0.0
 1.3115973199913233
 0.8797631160929225
 0.808639564000309
 2.0
 5.99999999995112
 0.0
 2.0
 0.9999999997863852
 0.0
 0.0
 1.2128561834845921
 1.2282051363039665
 0.0
 0.0
 5.000000000438507
 1.9598255254646142
 1.9999999997334978
 0.0
 0.0
 1.00000000031613
 1.999999998943596
 0.0
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7201075454487764
 0.1749422825518629
 0.9999999975448909
 0.0
 0.0
 0.0
 0.2798924545350049
 0.0
 1.0
 0.0
 0.0
 0.367389499574093
 0.0
 0.0
 0.0
 0.8527711103199707
 0.0
 0.0
 0.0
 1.0
 0.24925185381429624
 0.28153055486644946
 0.0
 0.147228889546257
 0.0
 0.9999999991167828
 0.6758989162890057
 0.6628514868750915
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.33714851300375515
 0.0
 0.0
 0.0
 0.9999999999892591
 0.0
 0.0
 0.7507481462002187
 0.0
 0.9474365375278614
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9999999995548123
 0.0
 0.0
 0.8250577174414707
 0.0
 0.0
 0.0
 0.0
 0.0
 0.052563462542265536
 0.32410108355755907
 0.0
 0.0
 0.35107994550558697
 0.0
 0.0
 1.0



=====Finished running Instance #514=====





===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.33     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.35
 Total CPU time used:                 0.34

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -182.113
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -620.523
 Preprocessing found feasible solution with value -620.523
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            21.02     -636.447         -620.523       
         20             3            50.93     -631.185         -620.523       
        150+            4            80.85     -628.597         -620.523       
        209             0           103.75     -620.585         -620.523       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   104.23
 Total CPU time used:               103.83

 Total no. of BaR iterations:     209
 Best solution found at node:      23
 Max. no. of nodes in memory:      10
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -223.558
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -297.971
 Preprocessing found feasible solution with value -632.885
 Preprocessing found feasible solution with value -632.885
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
*         1             1             9.58     -646.506         -632.890       
          1             1            15.84     -643.601         -632.890       
         21+            4            45.72     -642.038         -632.890       
         66+            5            75.62     -641.534         -632.890       
        241+            6           105.51     -641.534         -632.890       
        454+            5           135.39     -641.534         -632.890       
        601             4           165.26     -641.534         -632.890       
        846             7           195.16     -638.862         -632.890       
       1198+            6           225.05     -638.862         -632.890       
       2558             6           254.93     -638.862         -632.890       
       7217            13           287.10     -638.862         -632.890       
      12397            11           316.98     -638.862         -632.890       
      14073+            5           346.86     -638.862         -632.890       
      14304+            9           376.75     -638.862         -632.890       
      14504+            7           406.63     -638.862         -632.890       
      14734+            7           436.50     -638.243         -632.890       
      19529            12           466.38     -638.243         -632.890       
      24764            12           496.26     -638.243         -632.890       
      29056+            9           526.16     -638.243         -632.890       
      29270+            6           556.05     -637.306         -632.890       
      29520             5           585.94     -635.604         -632.890       
      29543             0           593.88     -632.953         -632.890       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   596.50
 Total CPU time used:               594.04

 Total no. of BaR iterations:   29543
 Best solution found at node:      17
 Max. no. of nodes in memory:      22
 
 All done
===========================================================================



*****Running Instance #365*****


objective value: -620.52287614
objective bound: -620.584934631
BARON solution time: 104.23

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.1807300058164958
 1.8042292941173246
 0.0
 0.8192699944489397
 1.2518957903118018
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 1.000000000279323
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.9492029754787676
 1.1642421302546222
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.050797025411365
 0.809582900002728
 0.3167398310814106
 1.1533495222163708
 0.0
 0.0
 0.0
 0.0
 0.7106214091324299
 2.58759645069171
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.7802577221364537
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4987749136240799
 1.4963247407550333
 0.0
 0.0
 0.0
 0.0
 0.5048662765967236
 1.5145988296716468
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9963588099113795
 2.9890764295378967
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.9849593001914038
 0.015040699721064964
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.109601634708829
 1.3698672111558565
 0.0
 0.0
 0.0
 1.8903983663345973
 0.6301327885908821
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6536899295306228
 0.3268449647129092
 0.0
 0.0
 1.3463100707304263
 0.6731550352572346
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.740945971371563
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.2590540296066446
 0.9689615243973934
 0.7719844462939907
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3328545692684248
 0.7014393880949515
 0.0
 0.5673161256475354
 0.298560612092152
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5148285271919267
 0.5171298969035757
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.2541905243999048
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 1.608372836581434
 0.0
 0.0
 0.0
 1.4851714732278591
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.32843540570760205
 0.0
 1.8056878568391082
 0.0
 0.0
 0.0
 0.09982930566993634
 0.0
 0.0
 2.0
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3916271642764137
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2590540286019421
 0.0
 0.0
 0.015040700227970093
 2.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.6715645946713688
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4828701033890571
 0.9726387601134687
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.21974227873500352
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.031038476189751488
 1.123146360119483
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.0342939575764554
 4.1134451056860755
 1.031958423898342
 0.0
 0.0
 1.995099654360744
 0.8658767378303794
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.479468845841965
 0.0
 1.4700893532677224
 0.0
 3.0
 0.980534894243532
 2.0194651062497138
 0.0
 2.520531154930229
 0.0
 2.7409459721879714
 0.0
 2.9849592998739167
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.071165784718596
 0.0
 0.0
 0.0
 2.780257722141622
 0.0
 0.0
 2.0194651059876607
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.298217859757402
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.9854352393931887
 2.8603799253811952
 0.0
 3.2541905246001837
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 2.0
 0.25419052438726647
 0.0
 1.0
 0.5148285271665807
 0.5171298968781192
 0.0
 0.0
 1.9001706947269388
 1.0
 0.0
 1.2590540294842754
 0.968961524303178
 0.771984446218892
 2.0
 0.0
 0.0
 0.0
 0.7409459713059203
 0.0
 0.0
 2.0
 0.9999999999379542
 0.0
 0.0
 0.0
 6.0
 1.999999999597362
 0.0
 0.0
 2.0
 0.9849593001819599
 0.015040699720925874
 2.0
 6.0
 0.0
 1.7802577219582678
 0.9999999999962654
 0.0
 0.0
 1.0273612401764787
 3.7409459727686722
 0.0
 0.0
 5.000000000683668
 1.9738250301758355
 2.0
 0.0
 0.0
 1.0000000002042548
 2.0
 3.056125084303926
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.701439388033484
 0.5898405950151032
 1.0
 0.0
 0.0
 0.24938745678473498
 0.2985606120659912
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6849336057175637
 0.0
 0.30830424459800887
 0.0
 1.0
 0.326844964733154
 0.2524331382707551
 0.0
 0.31506639435718903
 0.0
 1.0
 0.05233554958778306
 0.5903650028541128
 0.0
 0.22670541814552833
 0.0
 0.0
 0.0
 0.0
 0.0
 0.40963499718704294
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6731550352990414
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6916957554392772
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7209590322666886
 0.0
 0.0
 0.4981794049108776
 0.4101594050261912
 0.0
 1.0



=====Finished running Instance #365=====




*****Running Instance #366*****


objective value: -632.889677476
objective bound: -632.952972745
BARON solution time: 596.5

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 0.6949270220034562
 0.4310364283758947
 0.0
 1.3050729776714185
 0.8094864313129869
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999999391922
 0.0
 0.0
 1.0000000003371985
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0754376326422663
 0.47398792936703
 0.0
 0.0
 0.0
 0.0
 3.9245623678883867
 1.7297099654875219
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.1334957501709404
 1.0364278685473856
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.9999999999280035
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6983338111678484
 2.0950014333971128
 0.0
 0.4734394956474338
 1.4203184868605558
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8282266932305992
 2.484680079571064
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999996563416
 0.9276160864075362
 0.07238391317438395
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.3761455705719237
 3.8770831768416323
 0.0
 0.0
 0.0
 0.34759808990310403
 0.3991731631492432
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 6.282659007073234e-8
 0.0
 0.0
 0.0
 0.14548210357474395
 0.0
 0.7374946787211683
 0.36874733913838137
 0.0
 0.0
 1.262505321435571
 0.6312526603383742
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9797883227952457
 0.0
 0.0
 0.0
 0.33289588570167544
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6671041150611514
 1.0
 0.3328958851408923
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5148148844553972
 0.7574074414097822
 0.0
 0.48518511574755335
 0.24259255760786042
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.48221022799759267
 0.5755503993674674
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3463692720244804
 3.463406221164269
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.020211677319574205
 1.2532287462942564
 0.0
 0.6536307283313538
 0.0
 1.5177897711259225
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.20275583693843685
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.999999998816189
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7467712531323913
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6873157912180089
 0.0
 1.8016525732477002
 0.07238391380489734
 1.8545178334330155
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.4746037668732443
 0.0
 0.0
 0.797244163290896
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.42444959915923586
 0.866504249517527
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.6870932279628885
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.2722223263667924
 1.5494255622701063
 1.0577606272687525
 0.0
 0.0
 0.0
 0.7277776735369876
 0.0
 3.0
 0.0
 0.0
 2.7933352445962156
 0.0
 0.0
 0.0
 7.253228747327066
 0.0
 0.0
 0.0
 3.0
 1.1062420178595496
 1.89375798254227
 0.0
 0.7467712530746158
 0.0
 2.3126842094644453
 6.274383995556693e-8
 1.125963450401667
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.114559408987011
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 1.8937579817739452
 0.0
 2.999999999237881
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.169923618817794
 0.0
 0.0
 5.654272334169533
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.14548210358545896
 0.0
 0.0
 3.312906772831101
 0.0
 0.0
 5.809775493376671
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.3463692719468086
 3.463406220994092
 0.0
 1.0
 0.4822102292031927
 0.5755504008074678
 0.0
 0.0
 2.0
 0.9999999990181351
 0.0
 1.667104114935397
 1.0
 0.3328958851240679
 1.9797883231004074
 0.0
 0.0
 0.0
 0.3328958857390927
 0.0
 0.0
 2.0
 0.9999999994744019
 0.1454821668696716
 0.0
 0.0
 3.723743660362218
 4.276256339861827
 0.0
 0.0
 2.0
 0.9276160866297881
 0.07238391319646642
 2.0
 6.0
 0.0
 2.0
 0.9999999998916929
 0.0
 0.0
 1.133495750686193
 1.0364278690182194
 0.0
 0.0
 5.000000000486379
 2.203697894837017
 1.9999999998104314
 0.0
 0.0
 1.0000000002781793
 1.9999999997336884
 1.240522859722595
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7574074421712547
 0.21508752650938312
 0.9999999974961733
 0.0
 0.0
 0.0
 0.24259255785868522
 0.0
 1.0
 0.0
 0.0
 0.3491669055633593
 0.0
 0.0
 0.0
 0.9066535934042114
 0.0
 0.0
 0.0
 1.0
 0.3687473393362979
 0.23671974780741806
 0.0
 0.09334640662518343
 0.0
 0.9999999998454073
 4.31850696941392e-7
 0.3474635110486969
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6525364889233003
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6312526606753
 0.0
 0.9999999997763283
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9999999995453647
 0.0
 0.0
 0.7849124735031769
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9999995649298424
 0.0
 0.0
 0.4141133465922601
 0.0
 0.0
 1.0



=====Finished running Instance #366=====





===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.16     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.18
 Total CPU time used:                 0.17

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -196.764
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -424.753
 Preprocessing found feasible solution with value -637.021
 Preprocessing found feasible solution with value -637.021
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
*         1             1             7.98     -653.490         -638.196       
          1             1            19.47     -648.905         -638.196       
         14+            3            49.43     -643.013         -638.196       
         19             0            63.43     -638.260         -638.196       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                    63.80
 Total CPU time used:                63.54

 Total no. of BaR iterations:      19
 Best solution found at node:       1
 Max. no. of nodes in memory:       3
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -182.624
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -621.892
 Preprocessing found feasible solution with value -622.536
 Preprocessing found feasible solution with value -622.536
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            22.22     -637.642         -622.536       
         23+            5            52.18     -637.348         -622.536       
        477            10            84.22     -637.348         -622.536       
       2986             6           114.14     -637.348         -622.536       
       4645+            5           144.05     -637.348         -622.536       
       4864            12           173.94     -637.348         -622.536       
       6308            13           203.83     -637.348         -622.536       
       9817            11           233.73     -637.348         -622.536       
      14088             7           264.21     -637.348         -622.536       
      18034            10           294.10     -637.348         -622.536       
      20808            10           323.99     -637.348         -622.536       
      22870            10           353.87     -637.348         -622.536       
      27599             5           383.77     -637.348         -622.536       
      31721             9           413.66     -637.348         -622.536       
      35167             9           443.55     -637.348         -622.536       
      36096+           10           473.45     -637.348         -622.536       
      39159            13           503.34     -637.348         -622.536       
      39704            10           533.24     -637.348         -622.536       
      44101            10           563.13     -637.348         -622.536       
      46835             8           593.05     -637.348         -622.536       
      49846             8           622.94     -637.348         -622.536       
      54401             7           652.83     -637.348         -622.536       
      56854+            4           682.72     -637.348         -622.536       
      59923+            4           712.63     -637.348         -622.536       
      63170             7           742.51     -637.348         -622.536       
      64257+            7           772.42     -637.348         -622.536       
      64883             7           802.32     -637.348         -622.536       
      69360             7           832.21     -637.348         -622.536       
      73584             8           862.10     -637.348         -622.536       
      75343             9           891.99     -637.348         -622.536       
      79949             9           921.88     -637.348         -622.536       
      84146            11           951.77     -637.348         -622.536       
      88884             6           981.66     -637.348         -622.536       
      93402+           10          1011.55     -637.348         -622.536       
      93696+            7          1041.44     -634.751         -622.536       
      93822+            7          1071.34     -634.751         -622.536       
      93936+            7          1101.24     -634.751         -622.536       
      94124             7          1131.13     -634.751         -622.536       
      94213+            7          1161.04     -634.751         -622.536       
      94306+            6          1190.94     -634.751         -622.536       
      94427+            4          1220.86     -634.751         -622.536       
      94577             6          1250.75     -632.828         -622.536       
      94823+            3          1280.66     -632.473         -622.536       
      95236+            4          1310.55     -632.473         -622.536       
      95504+            6          1340.44     -630.285         -622.536       
      95752+            5          1370.34     -630.285         -622.536       
      95915             0          1386.70     -622.598         -622.536       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                  1391.94
 Total CPU time used:              1386.77

 Total no. of BaR iterations:   95915
 Best solution found at node:       1
 Max. no. of nodes in memory:      17
 
 All done
===========================================================================



*****Running Instance #459*****


objective value: -638.195761135
objective bound: -638.259587045
BARON solution time: 63.79

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 0.9845933635345087
 1.171223975730338
 0.0
 1.0154066355493065
 1.2078779328776355
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9480726751143118
 0.0
 0.1465998143909733
 0.9053275104003531
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.31654706462801435
 1.6389390863650743
 0.6180870698314456
 0.0
 0.0
 0.0
 0.6674453458086185
 3.455733404268048
 1.3032480290040125
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.060080652009287736
 0.19687570504874444
 0.003173242499508738
 0.0
 0.0
 0.0
 0.9230864276163485
 3.024822221132469
 0.04875408280127859
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.9999999999465242
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7036541089881698
 2.1109623269383935
 0.0
 0.5722453681871436
 1.7167361045396592
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7241005229000183
 2.1723015686729927
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999995011193
 0.9707940884169645
 0.02920591163682366
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.791838840389054
 1.9306129502925713
 0.0
 0.0
 0.0
 0.2081611571261264
 0.06938705250171233
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8149767455017206
 0.0
 0.0
 0.0
 0.0
 0.0
 0.47401235182166956
 0.23700617583859018
 0.0
 0.0
 1.5259876483799675
 0.7629938239571578
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.22169792837736121
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.7783020724590133
 1.0
 0.2216979277419977
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5075047266133401
 0.7537523620608049
 0.0
 0.4924952736519515
 0.24624763641896363
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7707093542926162
 0.974465974476811
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0911755207135039
 3.856966974755947
 0.0
 0.9185884143896821
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 0.7384593800791072
 0.0
 0.9088244796343854
 0.0
 1.2292906450517045
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.22328456757929147
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999990463628
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.277548210021525
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7783020713268431
 0.0
 0.0
 0.02920591159818239
 1.18502324985353
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7767154321469263
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.025534024392929202
 1.0168329204748037
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.081411586083414
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.445092366368323
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.2612570896777853
 2.5735732208245405
 1.7451753285976048
 0.0
 0.0
 0.0
 0.7387429103988514
 0.0
 3.0
 0.0
 0.0
 2.8146164359165757
 0.0
 0.0
 0.0
 7.722451790824077
 0.0
 0.2601295995575304
 0.0
 2.999999999986193
 0.7110185276602521
 2.2889814727189925
 0.0
 0.27754820963497856
 0.0
 2.2216979293778456
 0.8149767458739036
 2.155817339222429
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.2232845683831663
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 2.2889814723371202
 0.0
 2.9999999995550515
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.9966627315500904
 0.0
 0.0
 5.426426779080672
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.896402091562833
 0.0
 0.0
 5.866730909975042
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.091175520648172
 3.856966974525696
 0.0
 0.9185884143346389
 0.7707093552772157
 0.9744659757217378
 0.0
 0.0
 2.0
 0.9999999984237201
 0.0
 1.7783020723236445
 0.999999999996643
 0.22169792772603267
 2.0
 0.0
 0.0
 0.0
 0.22169792837823066
 0.0
 0.0
 2.0
 0.9999999997797037
 0.8149767504765332
 0.0
 0.0
 5.99999999724653
 2.0000000027052383
 0.0
 0.0
 1.99999999985273
 0.9707940885879786
 0.02920591164264172
 2.0
 6.0
 0.0
 2.0
 0.9999999998992991
 0.0
 0.0
 0.9831670797485429
 3.221697926583787
 0.05192732530722831
 0.9839924104148228
 5.094672490519845
 1.9213350987927809
 1.948072674997567
 0.0
 0.14659981424875743
 0.90532751026913
 1.9999999990734725
 2.379101908595688
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7537523632491219
 0.3216966526140732
 0.9999999987224555
 0.0
 0.0
 0.0
 0.24624763680716513
 0.0
 1.0
 0.0
 0.0
 0.35182705447811513
 0.0
 0.0
 0.0
 0.965306473841505
 0.0
 0.061109299982552864
 0.0
 1.0
 0.23700617589071152
 0.2861226840804901
 0.0
 0.03469352620350289
 0.0
 0.9999999999951799
 0.9999999938956349
 0.49229668199531273
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.507703318009866
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7629938241254398
 0.0
 0.9999999998246288
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9388906998925105
 0.0
 0.0
 0.6783033474082157
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.362050261433521
 0.0
 0.0
 1.0



=====Finished running Instance #459=====




*****Running Instance #460*****


objective value: -622.536103914
objective bound: -622.598363748
BARON solution time: 1391.93

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.2606081766308588
 1.517478002238527
 0.0
 0.7393918236534606
 0.8900551719630878
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9201045922503654
 0.0
 0.0
 1.0798954082358623
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7976319870906705
 0.4993030224460647
 0.0
 0.0
 0.0
 0.0
 4.122472605677372
 2.5805923850591967
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.31705083017777685
 0.9268024653558605
 0.0
 0.0
 0.0
 0.0
 0.7584017567399285
 2.21695876803888
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6763122489726583
 2.0289367468131703
 0.0
 0.5576105253129746
 1.6728315758446135
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7660772260065611
 2.298231677907173
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.8677964465135615
 0.7780861785227249
 0.3541173752550131
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.850861109353067
 1.2836203689196315
 0.0
 0.0
 0.0
 2.149138891670999
 0.7163796300780126
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5130385995978953
 0.2565192997558415
 0.0
 0.0
 1.486961400663394
 0.7434807002067594
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5669012523463235
 0.0
 0.0
 0.0
 0.5768599789685289
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4231400220031558
 0.9023074661644398
 0.6745525121292784
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5251379100074869
 0.762568954648255
 0.0
 0.47486209038548627
 0.23743104508205237
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.33141183748497555
 0.5622777320433208
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 2.2455520817210983
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.4330987483425957
 1.5911612214660977
 0.0
 0.0
 0.0
 1.6685881628879524
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.23692196078473649
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.40883877939968133
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8562387688448689
 0.0
 0.0
 0.22191382117944855
 2.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.763078039602407
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4377222681962015
 0.9245474134133573
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.07989540826890754
 0.0
 0.13220355432333894
 0.0
 0.09769253441664298
 3.2383494517651976
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.287706864878385
 1.2969350095218686
 0.8936895693316054
 0.0
 0.0
 0.0
 0.7122931355368531
 0.0
 3.0
 0.0
 0.0
 2.705248995753168
 0.0
 0.0
 0.0
 5.134481478745144
 0.0
 1.2438532955053245
 0.0
 3.0
 0.7695578993537369
 2.230442101134623
 0.0
 2.865518522029574
 0.0
 2.1437612319421726
 0.0
 2.778086178806962
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6294469955795523
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 2.230442100870153
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.975360524711328
 0.0
 0.0
 6.703064990659712
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.0643089038736213
 0.0
 0.0
 5.245552081919788
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 2.0
 2.245552081550857
 0.0
 1.0
 0.3314118375064167
 0.562277732079718
 0.0
 0.0
 2.0
 0.9999999996323462
 0.0
 1.4231400218633579
 0.9023074660758165
 0.6745525120630332
 1.5669012522399617
 0.0
 0.0
 0.0
 0.5768599789289853
 0.0
 0.0
 2.0
 0.9999999999302801
 0.0
 0.0
 0.0
 6.0
 1.9999999988500896
 0.0
 0.0
 1.8677964463639265
 0.7780861784603837
 0.35411737522663567
 2.0
 6.0
 0.0
 2.0
 1.0
 0.0
 0.0
 1.0754525868766596
 3.143761233274062
 0.0
 0.0
 4.92010459272059
 3.0798954074755596
 1.9201045921200883
 0.0
 0.0
 1.0798954081624927
 2.0
 2.40753317409266
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7625689549286235
 0.1621168761881168
 0.9999999999352173
 0.0
 0.0
 0.0
 0.23743104516935354
 0.0
 1.0
 0.0
 0.0
 0.3381561244568235
 0.0
 0.0
 0.0
 0.6418101848304163
 0.0
 0.2948068878598249
 0.0
 1.0
 0.25651929977372534
 0.278805262630179
 0.0
 0.35818981524303745
 0.0
 1.0
 0.1319431049160487
 0.6303040882544387
 0.0
 0.14037776719852885
 0.0
 0.0
 0.0
 0.0
 0.0
 0.36969591179103467
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7434807002585948
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7051931121785812
 0.0
 0.0
 0.8378831238215275
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7276791278854224
 0.0
 0.0
 0.38303861297141456
 0.0
 0.0
 1.0



=====Finished running Instance #460=====





===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.34     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.37
 Total CPU time used:                 0.35

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -209.059
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -619.790
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            22.14     -635.138         -619.790       
         20+            2            52.04     -634.956         -619.790       
        110+            9            81.96     -634.950         -619.790       
        142+            5           111.85     -634.950         -619.790       
        159+            5           141.78     -634.950         -619.790       
        236+            4           171.70     -634.950         -619.790       
        320+            6           201.60     -634.950         -619.790       
       1660            14           231.50     -634.950         -619.790       
       5042            14           261.39     -634.950         -619.790       
       8825            12           291.28     -634.950         -619.790       
      11822+            5           321.18     -634.950         -619.790       
      11842+            4           351.10     -634.950         -619.790       
      11963+            6           380.99     -634.935         -619.790       
      12148+           10           410.89     -634.935         -619.790       
      12745            11           440.79     -634.935         -619.790       
      16541             8           470.68     -634.935         -619.790       
      17232+            7           500.59     -634.935         -619.790       
      17256+            6           530.50     -634.935         -619.790       
      17306+            5           560.41     -634.935         -619.790       
      17333+            5           590.32     -634.935         -619.790       
      17390+            4           620.23     -634.935         -619.790       
      17425+            2           650.13     -634.935         -619.790       
      17507+            9           680.02     -634.502         -619.790       
      17597+            7           709.92     -634.502         -619.790       
      17639+            6           739.82     -634.502         -619.790       
      17773             7           769.71     -634.502         -619.790       
      17844+            6           799.61     -634.502         -619.790       
      17901+            9           829.51     -634.502         -619.790       
      18041+            7           859.41     -634.502         -619.790       
      18099+            6           889.30     -634.502         -619.790       
      18188             5           919.21     -634.502         -619.790       
      18334+            5           949.12     -634.502         -619.790       
      18382+            3           979.04     -634.502         -619.790       
      18447+            4          1008.95     -634.173         -619.790       
      18523+            5          1038.86     -634.173         -619.790       
      18563+            4          1068.77     -634.066         -619.790       
      18717+            5          1098.67     -633.572         -619.790       
      18744+            2          1128.59     -632.881         -619.790       
      18773             0          1144.50     -619.852         -619.790       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                  1148.83
 Total CPU time used:              1144.57

 Total no. of BaR iterations:   18773
 Best solution found at node:    1464
 Max. no. of nodes in memory:      18
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -186.793
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -435.206
 Preprocessing found feasible solution with value -472.568
 Preprocessing found feasible solution with value -626.901
 Preprocessing found feasible solution with value -626.901
 Preprocessing found feasible solution with value -627.075
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
*         1             1            23.69     -646.355         -628.993       
          1             1            25.81     -646.355         -628.993       
*         2             2            28.77     -646.355         -629.216       
         26+            4            58.68     -638.142         -629.216       
        121+            4            89.15     -637.704         -629.216       
        333             8           119.04     -637.575         -629.216       
       2465+            3           148.96     -637.575         -629.216       
       2529+            2           178.85     -634.228         -629.216       
       2571             0           197.06     -629.279         -629.216       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   197.88
 Total CPU time used:               197.13

 Total no. of BaR iterations:    2571
 Best solution found at node:     174
 Max. no. of nodes in memory:      19
 
 All done
===========================================================================



*****Running Instance #935*****


objective value: -619.79001878
objective bound: -619.852003979
BARON solution time: 1148.82

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 0.9877763230142957
 1.5446373355172607
 0.0
 0.8849973144108234
 1.3839164412242828
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9040294038522205
 0.0
 0.0
 1.0959705963260342
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.805267949504851
 1.3206111795767688
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0987614553367155
 0.9880153664721016
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9450293759875934
 1.3847509512608582
 0.09597059667905557
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6538269832134668
 1.9614809495093855
 0.0
 0.5104686440465016
 1.5314059320282722
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8357043730516068
 2.507113119000074
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4018702770904867
 0.8837782057848627
 0.714351517402442
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.281689203077349
 2.1986153715236045
 0.0
 0.0
 0.0
 0.3669462513212767
 0.15274917505697075
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6387502829898302
 0.31937514144442714
 0.0
 0.0
 1.3612497172712579
 0.680624858528026
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.9105507451041261
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.089449255879679
 0.9425181947457032
 0.9680325496699165
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3925021654867131
 0.6076695895440091
 0.08858149308195115
 0.6074978349037601
 0.26510404732894305
 0.03864487007172782
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.701342901814221
 0.6945252993772639
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.387406113358745
 2.723340905786319
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 1.4803045735634284
 0.0
 0.6125938870519114
 0.0
 1.2986570986265298
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2689137553673595
 0.0
 0.8942879791029759
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5196954266934173
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.08944925489086947
 0.0
 0.3513645469826026
 0.11622179490331988
 2.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7310862450059409
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.305474700947257
 1.0549706243452552
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.174435248346128
 0.0
 0.0
 0.0
 0.0
 0.1272263637057695
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5480125700941539
 0.0
 0.0
 0.0
 0.0
 0.05011715349000265
 0.0
 0.0574818058399617
 1.4628067275923247
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.0887532481126736
 4.12587912937519
 1.39586820099462
 0.0
 0.0
 0.0
 0.911246752304431
 0.0
 3.0
 0.0
 0.0
 2.615307932693795
 0.0
 0.0
 0.0
 7.480304574338937
 0.0
 0.0
 0.0
 3.0
 0.9581254244342574
 2.041874576056626
 0.0
 0.5196954263612157
 0.0
 2.9105507459000415
 0.0
 2.5324136584783554
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.2689137555872927
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 2.0418745757992838
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.4257509239275077
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.342817492008086
 3.086776822028453
 0.0
 5.110747019144464
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.3874061132465783
 2.723340905562426
 0.0
 1.0
 0.7013429017673446
 0.6945252993308372
 0.0
 0.0
 2.0
 0.8727736367882591
 0.12722636314133345
 1.0894492557722406
 0.9425181946527638
 0.9680325495744594
 1.9999999999990692
 0.0
 0.0
 0.0
 0.9105507450165865
 0.0
 0.0
 2.0
 0.9999999999402377
 0.0
 0.0
 0.0
 5.6486354539797805
 2.3513645464064203
 0.0
 0.0
 1.401870277005751
 0.8837782057314424
 0.7143515173592625
 2.0
 6.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.9450293759473467
 1.384750951201889
 0.0959705966749604
 0.0
 4.904029404644886
 2.308626545956279
 1.9040294037129726
 0.0
 0.0
 1.0959705962449071
 1.8727736373474808
 2.92855377661846
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.6962510826749884
 0.5720332644922198
 1.0
 0.0
 0.0
 0.0
 0.3037489174220508
 0.0
 1.0
 0.0
 0.0
 0.32691349157463523
 0.0
 0.0
 0.0
 0.9350380717799857
 0.0
 0.0
 0.0
 1.0
 0.319375141463509
 0.2552343219959158
 0.0
 0.06496192829415966
 0.0
 1.0
 0.24963760520816927
 0.5274403181016767
 0.0
 0.19200019982948274
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4725596819405204
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6806248585687067
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.558362194962348
 0.0
 0.0
 0.41785218648800393
 0.4279667355478863
 0.0
 1.0



=====Finished running Instance #935=====




*****Running Instance #936*****


objective value: -629.216460514
objective bound: -629.279388451
BARON solution time: 197.87

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.6656267233793849
 0.0
 0.0
 0.33437327684125806
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9345865137320957
 0.0
 0.0
 1.0654134866162739
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.37094688529464814
 1.4388880712079646
 0.5229044810080877
 0.0
 0.0
 0.0
 0.9011948013376044
 3.495698443321097
 1.2703673182383388
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.023011542029216
 0.9291190122812196
 0.06541348679116514
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0035486560939412192
 0.010645968281390127
 0.0
 0.7500000001158127
 2.2500000002035465
 0.0
 0.5465860104816507
 1.6397580313280657
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6998653336032411
 2.099596000672355
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.2587259962627904
 0.8474918704532551
 0.8937821335652905
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.650026810235038
 3.07084767969889
 0.0
 0.0
 0.0
 0.16810804415896702
 0.11101746686879391
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5424373058344913
 0.2712186528714266
 0.0
 0.0
 1.4575626944267703
 0.7287813470902664
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.6979487614782968
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3020512395072144
 0.9166180002528558
 0.7813307605120556
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4891422827590675
 0.7445711410054826
 0.0
 0.5108577176306809
 0.25542885868701903
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3203198765644234
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6796801234871687
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3702249681714854
 3.4253974417977173
 0.0
 0.8210027131753793
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 0.4487328028277193
 0.0
 1.6297750321567588
 0.0
 1.9743926285392994
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2210909283866502
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.02560737180942304
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.27912551135344926
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3020512385174018
 0.0
 1.1818651469154091
 0.1525081302312546
 2.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7789090720010842
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9769884583016695
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5869646036742413
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.17899728738897763
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7303352054611183
 0.0
 0.0
 0.0
 0.0
 0.010938798936372974
 0.0
 0.08338200033132594
 5.106217867506762
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.2337134240128522
 2.3327394375107002
 0.320319876484184
 0.0
 0.0
 0.014194624375029587
 0.7662865764028799
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 7.72087448967337
 0.0
 0.0
 0.6796801233167895
 3.0
 0.8136559587059179
 2.1863440417882294
 0.0
 0.2791255110190006
 0.0
 2.6979487622730507
 0.0
 1.665626723240867
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.33437327681345
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 2.1863440415170365
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.017544041101601
 0.0
 0.0
 5.66726056289704
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.79946133424193
 0.0
 0.0
 4.616625123046265
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 0.3702249681401575
 3.4253974414764143
 0.0
 0.8210027131013006
 0.0
 1.0
 0.0
 0.0
 2.0
 0.9999999995948646
 0.0
 1.3020512393786763
 0.9166180001623982
 0.7813307604349644
 2.0
 0.0
 0.0
 0.0
 0.6979487614149537
 0.0
 0.0
 2.0
 0.9999999999293874
 0.0
 0.0
 0.0
 4.818134854039235
 3.1818651463334024
 0.0
 0.0
 1.258725996185119
 0.8474918704009595
 0.8937821335101385
 2.0
 6.0
 0.0
 2.0
 1.0
 0.0
 0.0
 1.0230115419909633
 0.9291190122464779
 0.06541348678871889
 1.2721416865853643
 4.934586514347185
 1.7932717991803306
 1.9345865135984999
 0.0
 0.0
 1.0654134865425764
 2.0
 0.0
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7445711413071362
 0.29159242968472315
 0.3203198765352018
 0.0
 0.0
 0.0017743280468436539
 0.2554288587905041
 0.0
 1.0
 0.0
 0.0
 0.37500000002250883
 0.0
 0.0
 0.0
 0.9651093111967868
 0.0
 0.0
 0.6796801234252187
 1.0
 0.27121865289057806
 0.27329300521201727
 0.0
 0.034890688876844475
 0.0
 1.0
 0.06416779599483298
 0.8328133616235106
 0.0
 0.11992521883559432
 0.0
 0.0
 0.0
 0.0
 0.0
 0.16718663840734307
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7287813471417275
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7084075703521345
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8159069851695727
 0.0
 0.0
 0.34993266676781404
 0.0
 0.0
 1.0



=====Finished running Instance #936=====





===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.30     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.32
 Total CPU time used:                 0.30

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -153.897
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -616.442
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
*         1             1             7.57     -647.580         -630.668       
          1             1            19.15     -645.275         -630.668       
         22+            7            49.06     -642.952         -630.668       
         42+            5            78.95     -642.952         -630.668       
        108+            6           108.85     -642.952         -630.668       
        166+            5           138.74     -637.591         -630.668       
        256+            5           168.65     -637.591         -630.668       
        417             5           198.54     -637.591         -630.668       
        985             4           228.45     -637.591         -630.668       
       1186+            7           258.36     -637.591         -630.668       
       2790            13           288.25     -637.591         -630.668       
       6065            11           318.13     -637.591         -630.668       
       9890             9           348.02     -637.591         -630.668       
      13746            11           377.91     -637.591         -630.668       
      17582            14           407.80     -637.591         -630.668       
      21327             9           437.75     -637.591         -630.668       
      25360            13           467.64     -637.591         -630.668       
      27727+            3           497.55     -637.591         -630.668       
      27808+            5           527.44     -636.012         -630.668       
      27960+            6           557.34     -633.881         -630.668       
      29223             7           587.23     -633.808         -630.668       
      31901             0           611.41     -630.732         -630.668       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   613.86
 Total CPU time used:               611.51

 Total no. of BaR iterations:   31901
 Best solution found at node:   21326
 Max. no. of nodes in memory:      18
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -183.684
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -627.147
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            16.21     -643.242         -627.147       
         22+            3            48.24     -639.045         -627.147       
       1281            11            78.13     -636.011         -627.147       
       2281            11           108.01     -634.936         -627.147       
       5217            12           138.05     -634.656         -627.147       
       8971            13           167.93     -634.656         -627.147       
      11395+            6           197.82     -634.656         -627.147       
      11468+            3           227.71     -631.592         -627.147       
      11479             0           243.91     -627.210         -627.147       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   244.99
 Total CPU time used:               243.98

 Total no. of BaR iterations:   11479
 Best solution found at node:       1
 Max. no. of nodes in memory:      19
 
 All done
===========================================================================



*****Running Instance #243*****


objective value: -630.668475186
objective bound: -630.731548319
BARON solution time: 613.85

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 0.660647415220759
 0.5689609561320346
 0.0
 1.219910924894644
 1.0506083430171202
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 1.0000000000210345
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3605507577919564
 0.7658205484007241
 0.0
 0.0
 0.0
 0.0
 3.6394492431612977
 2.0485564388473003
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0233508776610767
 0.33914974265668657
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9486720415030174
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5696561850379525
 1.7089685551281613
 0.0
 0.513769760307429
 1.541309280923526
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9165740546651141
 2.749722164055515
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.715867698417201
 0.9184895468022262
 0.36564275342089003
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.947665965223493
 3.468371646672974
 0.0
 0.0
 0.0
 0.3108517738096625
 0.27311061475931747
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.33416044420498464
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6299473061588461
 0.31497365296337515
 0.0
 0.0
 1.3700526940380016
 0.6850263467621596
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6725041968539351
 0.0
 0.0
 0.0
 0.2923930694265091
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.7076069313648155
 1.0
 0.29239306891356054
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4256800206988585
 0.6276972160593639
 0.08514279417899323
 0.5743199795077816
 0.25286112384005144
 0.034298865893945985
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6673406100824726
 0.985012070937323
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.8469014924889884
 2.8932299449442143
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.3274958030284502
 1.4160376063677176
 0.0
 0.15309850790235985
 0.0
 1.3326593890249114
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.27051926721791625
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.99999999908848
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5839623885474403
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0351027335828051
 0.0
 1.3547207314008445
 0.0815104530037163
 1.6658395548741984
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.38676153025164345
 0.0
 0.0
 0.7294807326145688
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.014987927377807731
 0.9766491222380296
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.051327959298657855
 0.0
 0.0
 0.0
 0.0
 0.8842652235107494
 0.0
 0.0
 0.0
 0.0
 0.11944166054443854
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.28413230126904443
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.0147879478462025
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.1385200309372157
 2.126371307744731
 1.6523526810197957
 0.0
 0.0
 0.0
 0.8614799692417789
 0.0
 3.0
 0.0
 0.0
 2.278624740184954
 0.0
 0.0
 0.0
 7.4160376119648
 0.0
 0.0
 0.0
 3.0
 0.9449209591222212
 2.055079041253027
 0.0
 0.5839623885938953
 0.0
 1.9648972671500484
 0.3341604444641793
 1.2296083713527937
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.270519267911764
 0.0
 0.0
 0.0
 2.9486720418279555
 0.0
 0.0
 2.055079040800161
 0.0
 2.999999998640099
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3625006203779686
 0.0
 0.0
 5.688005686094467
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.6662962187291845
 0.0
 0.0
 5.740131437556571
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.8469014923834959
 2.893229944806432
 0.0
 1.0
 0.6673406112870178
 0.9850120727187768
 0.0
 0.0
 2.0
 0.8805583398708388
 0.11944166002101302
 1.7076069312404447
 0.9999999999975661
 0.29239306887015276
 1.6725041971335641
 0.0
 0.0
 0.0
 0.29239306944855004
 0.0
 0.0
 2.0
 0.9999999997061003
 0.33416044544482665
 0.0
 0.0
 4.25851773888001
 3.7414822612902836
 0.0
 0.0
 1.7158676992667834
 0.9184895472577356
 0.36564275359816556
 2.0
 6.0
 0.0
 1.9486720413323397
 0.9999999999953194
 0.0
 0.0
 1.0233508779771159
 0.3391497427513762
 0.0
 0.0
 5.000000000843471
 2.814376987167713
 1.999999999974629
 0.0
 0.0
 0.9999999999507754
 1.8805583402063748
 1.6195692992262474
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7128400103094205
 0.2721101515138183
 0.9999999981938886
 0.0
 0.0
 0.0
 0.28715998973991813
 0.0
 1.0
 0.0
 0.0
 0.28482809251230556
 0.0
 0.0
 0.0
 0.9270047014725794
 0.0
 0.0
 0.0
 1.0
 0.31497365305544195
 0.2568848801456945
 0.0
 0.07299529856164352
 0.0
 0.9999999998390623
 0.9999999962881794
 0.35130386603635605
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.648696133915964
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6850263469672341
 0.0
 0.9999999995233383
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9999999996917833
 0.0
 0.0
 0.7278898485107991
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4582870273254544
 0.0
 0.0
 1.0



=====Finished running Instance #243=====




*****Running Instance #244*****


objective value: -627.1470567
objective bound: -627.209777672
BARON solution time: 244.99

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.1476907902319227
 1.852309210037224
 0.0
 0.8523092100344368
 1.3755797406262344
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 1.0000000002890128
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.9163236678130064
 1.2844362072496607
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.083676333054429
 0.9177134060607698
 0.20196615826651737
 0.6417566790983142
 0.0
 0.0
 0.0
 0.0
 0.8464832821613532
 2.6897392351984504
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9655223961906747
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6598385314548167
 1.9795155942169733
 0.0
 0.45163089824979846
 1.3548926946531847
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.888530570604815
 2.6655917116317207
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.9248766019984155
 0.07512339789806553
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.370520716342298
 1.7229316102643257
 0.0
 0.06724196141759367
 0.0
 0.6294792846877335
 0.20194499097539229
 0.0
 0.0078814372031353
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7956509384437748
 0.3978254691655272
 0.0
 0.0
 1.2043490618172965
 0.602174530823323
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.2563725142871121
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.7436274866851207
 1.0
 0.25637251351543666
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3227631927543584
 0.6613815960542752
 0.0
 0.6772368076333661
 0.33861840365136064
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.42366389395706483
 0.7182816115815993
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.1126567690082956
 3.5414778746152193
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 1.5601517520406045
 0.0
 0.887343231367872
 0.0
 1.57633610644472
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.319919646176245
 0.0
 1.252499672689117
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4398482487797502
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7436274856957464
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.680080354208758
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.28171838871316457
 0.9515505599008186
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.034477604693146084
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.444487979854267
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 1.9841447890034183
 4.200759875035324
 1.1419455053412575
 0.0
 0.0
 0.0
 1.0158552113844541
 0.0
 3.0
 0.0
 0.0
 2.6393541256437656
 0.0
 0.0
 0.0
 7.160694287850271
 0.0
 0.8437228373463602
 0.0
 3.0
 1.193476407609302
 1.806523592881487
 0.0
 0.8393057128465055
 0.0
 2.256372515093429
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.227888950618847
 0.0
 0.0
 0.0
 2.9655223961939847
 0.0
 0.0
 1.8065235926406196
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.5362225172831803
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.5541222821908494
 3.0013897390956625
 0.0
 5.654134643658597
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.1126567689304447
 3.541477874367422
 0.0
 1.0
 0.42366389394907744
 0.7182816115682259
 0.0
 0.0
 2.0
 0.9999999996089531
 0.0
 1.7436274865194084
 1.0
 0.25637251349091533
 2.0
 0.0
 0.0
 0.0
 0.2563725142704242
 0.0
 0.0
 2.0
 0.9999999999566465
 0.0
 0.0
 0.0
 6.0
 1.9248766010989156
 0.0
 0.07512339861530481
 2.0
 0.9248766019945329
 0.07512339789775017
 2.0
 6.0
 0.0
 1.9655223959959727
 0.9999999999974493
 0.0
 0.0
 1.048449440390433
 3.331495914176689
 0.0
 0.0
 5.0000000006684635
 2.202149613222797
 2.0
 0.0
 0.0
 1.0000000002208855
 2.0
 3.227888950542933
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.6613815963129065
 0.583264733484623
 1.0
 0.0
 0.0
 0.0
 0.33861840378377633
 0.0
 1.0
 0.0
 0.0
 0.3299192656937601
 0.0
 0.0
 0.0
 0.895086785968897
 0.0
 0.19263318810251256
 0.0
 1.0
 0.3978254691827622
 0.22581544910304616
 0.0
 0.10491321410428744
 0.0
 1.0
 0.05292748108339393
 0.5738453950609627
 0.0
 0.09942681035451681
 0.0
 0.0
 0.0
 0.0
 0.0
 0.42615460497637714
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6021745308494407
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8073668119335516
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8476457085620892
 0.0
 0.0
 0.44426528526106923
 0.41673526655517135
 0.0
 1.0



=====Finished running Instance #244=====





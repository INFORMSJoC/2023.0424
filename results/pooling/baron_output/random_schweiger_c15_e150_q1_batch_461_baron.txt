===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.38     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.89
 Total CPU time used:                 0.39

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -184.045
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -611.796
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            17.28     -639.438         -611.796       
*         5             3            21.34     -639.179         -620.719       
*        23             5            41.18     -639.179         -622.297       
*        32             6            42.54     -639.179         -622.297       
        181            10            73.15     -639.179         -622.297       
        401+            7           103.04     -639.179         -622.297       
        574+            7           132.94     -639.179         -622.297       
        801             9           162.83     -639.179         -622.297       
        885+            4           192.73     -639.179         -622.297       
       2653            10           222.62     -636.828         -622.297       
       6676            11           252.51     -636.828         -622.297       
       7595+            4           282.40     -636.828         -622.297       
      10790            12           312.29     -630.206         -622.297       
      11515+            4           342.19     -630.206         -622.297       
      11652+            4           372.08     -630.206         -622.297       
      11731             0           389.83     -622.360         -622.297       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   391.42
 Total CPU time used:               389.89

 Total no. of BaR iterations:   11731
 Best solution found at node:     180
 Max. no. of nodes in memory:      18
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -156.360
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -629.348
 Preprocessing found feasible solution with value -629.352
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            14.23     -640.946         -629.352       
         27+            4            44.12     -638.103         -629.352       
         79+            3            75.12     -638.031         -629.352       
        228             8           105.02     -637.986         -629.352       
        343+            2           134.91     -637.986         -629.352       
        381+            2           164.81     -632.970         -629.352       
        385             0           174.03     -629.414         -629.352       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   174.79
 Total CPU time used:               174.09

 Total no. of BaR iterations:     385
 Best solution found at node:       1
 Max. no. of nodes in memory:      10
 
 All done
===========================================================================



*****Running Instance #921*****


objective value: -622.297437481
objective bound: -622.359673444
BARON solution time: 391.41

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.7173308906899123
 0.0
 0.0
 0.28266910954850755
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 1.0000000002754064
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.766167158013608
 0.183558111971723
 0.0
 0.0
 0.0
 0.0
 4.233832842930638
 1.0143404803135811
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.31901385536342675
 0.8454771447596147
 0.0
 0.0
 0.0
 0.0
 0.676187716994216
 1.7920891230093368
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.8481865723992177
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.10339783576568944
 0.31019350728342393
 0.0
 0.7500000001126611
 2.250000000210086
 0.0
 0.490849880201161
 1.4725496405056027
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6557522842158082
 1.9672568525302507
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4140560793186867
 0.8579913038542277
 0.7279526171087288
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.407746090677098
 2.848789100752932
 0.0
 0.0
 0.0
 0.4515934976387932
 0.29187131190821813
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6910669865739716
 0.34553349323271326
 0.0
 0.0
 1.3089330136868782
 0.6544665067404889
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.7782266791305803
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.2217733218584665
 0.9265133661879138
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4201108575019765
 0.7100554284096448
 0.0
 0.5798891428855072
 0.2899445713034138
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.17036764303769755
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8296323567479796
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3479758433320278
 4.802101409334379
 0.0
 0.7877732220237487
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 1.2565351909984461
 0.0
 1.6520241569858
 0.0
 1.9657860109518608
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2716577820489521
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.03421398939392271
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7434648098408637
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.22177332085308316
 0.0
 1.1406604130121736
 0.14200869680192077
 2.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7283422183375755
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0047984279703843
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.15181342847929444
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.21222677852285945
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5544870754787181
 0.0
 0.0
 0.0
 0.0
 0.031456845863314244
 0.0
 0.07348663439752233
 5.272047384040928
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.130166286135787
 0.949725269972792
 0.17036764299781434
 0.0
 0.0
 0.4135913430423291
 0.8698337142805093
 0.0
 2.148286687958648
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 7.256535191180331
 0.0
 1.164491000092866
 0.8296323565362815
 3.0
 1.0366004798066848
 1.9633995206873303
 0.0
 0.7434648095237798
 0.0
 2.7782266799375517
 0.0
 1.7173308905627072
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2826691095273698
 0.0
 0.0
 0.0
 2.8481865724045967
 0.0
 0.0
 1.963399520427367
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.46827683993904
 0.0
 0.0
 5.248173323184594
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.623009136712929
 0.0
 0.0
 5.937850474591697
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 0.3479758433110178
 4.802101408954216
 0.0
 0.7877732219680501
 0.0
 1.0
 0.0
 0.0
 2.0
 0.9999999996154724
 0.0
 1.221773321736982
 0.9265133660957663
 0.0
 2.0
 0.0
 0.0
 0.0
 0.7782266790557065
 0.0
 0.0
 2.0
 0.999999999941112
 0.0
 0.0
 0.0
 4.859339587955984
 3.140660412428546
 0.0
 0.0
 1.4140560792315076
 0.8579913038013259
 0.7279526170638432
 2.0
 6.0
 0.0
 1.8481865722150084
 0.9999999999970679
 0.0
 0.0
 0.9952015723196384
 2.6375662676697895
 0.0
 0.0
 5.000000000688725
 1.197898592228582
 2.0
 0.0
 0.0
 1.0000000001996339
 2.0
 0.0
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7100554286826669
 0.15323343158151465
 0.17036764302223242
 0.0
 0.0
 0.05169891787867719
 0.2899445714148435
 0.0
 1.0
 0.0
 0.0
 0.3750000000223456
 0.0
 0.0
 0.0
 0.9070668988851542
 0.0
 0.32055200095747277
 0.8296323566742354
 1.0
 0.34553349325295624
 0.24542494007460244
 0.0
 0.09293310118891646
 0.0
 1.0
 0.16037226210864808
 0.8586654452690234
 0.0
 0.2016799619284577
 0.0
 0.0
 0.0
 0.0
 0.0
 0.14133455476177184
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6544665067791412
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6794479990800243
 0.0
 0.0
 0.8467665684693899
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6379477759628943
 0.0
 0.0
 0.3278761420767828
 0.0
 0.0
 1.0



=====Finished running Instance #921=====




*****Running Instance #922*****


objective value: -629.351523175
objective bound: -629.41446462
BARON solution time: 174.79

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  …  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.0580846637914265
 1.9419153365343382
 0.0
 0.7995124311695387
 1.4673546503120931
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9765142526210056
 0.0
 0.0
 1.0234857478184223
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.104835973714062
 1.8863459111980003
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.8716782796122724
 1.1371398359578326
 0.3534678135261372
 1.2695501373741191
 0.007898394421519168
 0.0
 0.0
 0.0
 0.6975630059886111
 2.505436637199541
 0.01558735348618369
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.711437915323581
 2.134313745836825
 0.0
 0.5074061714403243
 1.5222185142137852
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7811559135500014
 2.34346774050724
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.2852726104581105
 0.974218402876649
 0.7405089868698105
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.571621575237725
 1.8332663068646156
 0.0
 0.023940884431857153
 0.0
 0.42837842581808866
 0.14095209518943014
 0.0
 0.0018407133793799358
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.64691687660515
 0.32345843825167686
 0.0
 0.0
 1.3530831236560736
 0.6765415617213894
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.7492051753639017
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.2507948256211048
 0.9541409713206846
 0.795064203355764
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4903183904599515
 0.6390463605868281
 0.1061128345204338
 0.5096816099301055
 0.21855073383570972
 0.036290071087385974
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5355819252456813
 0.9906892080810024
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 2.181450050939355
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  …  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 1.428828766128477
 0.0
 0.0
 0.0
 1.4644180751737474
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2668670812079179
 0.0
 0.029521825137055833
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5711712346888628
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2507948246211921
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.73313291915598
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.009310792250020152
 0.9489691808128219
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.14240290615451845
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7147273902746989
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.04585902926499299
 1.8206992022366215
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.2354775855672138
 4.991181884883823
 1.5262711331297056
 0.0
 0.0
 0.0
 0.7645224148532013
 0.0
 3.0
 0.0
 0.0
 2.845751661124678
 0.0
 0.0
 0.0
 7.428828766348326
 0.0
 1.6309163453217757
 0.0
 3.0
 0.9703753148568268
 2.029624685634727
 0.0
 0.5711712343713062
 0.0
 2.74920517616866
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.2668670814380265
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 2.029624685377463
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.2185869966743357
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.124623654015774
 3.0088181155534897
 0.0
 5.181450051138165
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  …  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 2.0
 2.1814500507686527
 0.0
 1.0
 0.5355819252185116
 0.9906892080306664
 0.0
 0.0
 2.0
 0.8575970943388287
 0.1424029055939422
 1.2507948254984405
 0.9541409712271178
 0.7950642032778003
 2.0
 0.0
 0.0
 0.0
 0.7492051752929707
 0.0
 0.0
 2.0
 0.9999999999408005
 0.0
 0.0
 0.0
 6.0
 1.9742184019045237
 0.0
 0.025781597811947353
 1.2852726104118128
 0.9742184028415563
 0.7405089868431368
 2.0
 6.0
 0.0
 2.0
 1.0
 0.0
 0.0
 1.051030819477081
 3.7749867744340393
 0.023485747908382686
 0.0
 4.976514253144194
 3.0234857470451564
 1.976514252480126
 0.0
 0.0
 1.023485747744768
 1.8575970948917024
 3.409269986717181
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  …  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7451591951573996
 0.6238977355992863
 1.0
 0.0
 0.0
 0.0
 0.2548408049402255
 0.0
 1.0
 0.0
 0.0
 0.3557189576281447
 0.0
 0.0
 0.0
 0.9286035957811659
 0.0
 0.3363058503865851
 0.0
 1.0
 0.323458438270701
 0.25370308569311656
 0.0
 0.07139640429590836
 0.0
 1.0
 0.1690648251876383
 0.5695985780241175
 0.0
 0.1757533633918098
 0.0
 0.0
 0.0
 0.0
 0.0
 0.430401422013835
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.676541561761574
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6636941496504177
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.655181811420552
 0.0
 0.0
 0.3905779567391715
 0.37610226443728983
 0.0
 1.0



=====Finished running Instance #922=====





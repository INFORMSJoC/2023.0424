===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.31     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.33
 Total CPU time used:                 0.31

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -169.016
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -614.387
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            19.44     -627.691         -614.387       
*        41             4            50.63     -626.341         -615.013       
       1435            11            80.53     -626.341         -615.013       
       5120            10           110.42     -626.341         -615.013       
       9208            11           140.94     -626.341         -615.013       
      12702            13           170.84     -626.341         -615.013       
      13368+            8           200.73     -626.341         -615.013       
      13853             6           230.62     -625.219         -615.013       
      15670+            2           260.53     -624.203         -615.013       
      15832+            5           290.41     -617.030         -615.013       
      15871             0           300.18     -615.075         -615.013       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   301.39
 Total CPU time used:               300.28

 Total no. of BaR iterations:   15871
 Best solution found at node:      75
 Max. no. of nodes in memory:      19
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -207.699
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -637.593
 Preprocessing found feasible solution with value -637.593
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            17.12     -643.142         -637.593       
         16+            4            47.01     -642.482         -637.593       
         97+            4            76.92     -642.482         -637.593       
        188+           11           106.81     -642.482         -637.593       
       1322            11           136.71     -642.482         -637.593       
       5375            13           166.60     -642.482         -637.593       
       9554            13           196.48     -642.482         -637.593       
      13813            13           226.37     -642.482         -637.593       
      18165            10           256.25     -642.482         -637.593       
      18569+            5           286.14     -642.482         -637.593       
      18746+            5           316.04     -642.482         -637.593       
      18848+            3           345.93     -642.402         -637.593       
      18955+            5           375.82     -642.305         -637.593       
      19144+            5           405.72     -642.305         -637.593       
      19208+            4           435.61     -642.243         -637.593       
      19276+            3           465.51     -642.049         -637.593       
      19364+            3           495.40     -640.597         -637.593       
      19369             0           508.75     -637.657         -637.593       

                         *** Normal completion ***            

 Wall clock time:                   510.73
 Total CPU time used:               508.75

 Total no. of BaR iterations:   19369
 Best solution found at node:    1155
 Max. no. of nodes in memory:      18
 
 All done
===========================================================================



*****Running Instance #333*****


objective value: -615.013492703
objective bound: -615.075000184
BARON solution time: 301.39

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.2312195386667546
 0.42605430609180006
 0.02731370655124454
 0.7687804616386329
 0.2660307246880884
 0.017054833255999366
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.1291952145379973
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.2366530474912962
 1.7288090317287508
 0.29996684066710144
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3314775300591002
 0.9944325901711445
 0.0
 0.750000000074493
 2.2500000002819176
 0.0
 0.46995376298015984
 1.409861288955297
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.44856870717563624
 1.3457061215384598
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9556314609650485
 0.711075546514423
 0.33329299282276126
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.106033069740465
 1.7020110229831085
 0.0
 0.0
 0.0
 0.8939669313599852
 0.2979889770771856
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0264879948832466
 0.0
 0.0
 0.0
 0.6278960845287155
 0.0
 0.7467899657962056
 0.37339498280065747
 0.0
 0.0
 1.2532100344724755
 0.6266050170733778
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9068281587904186
 0.0
 0.0
 0.0
 0.6537697703958749
 0.4394020704265031
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.346230230594087
 0.8980920200990199
 0.7556777496098372
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4488818084736188
 0.7244409039305195
 0.0
 0.5511181919460371
 0.2755590958580933
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5392234745258292
 0.9398438353592312
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3531308628262637
 4.115127037427062
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.09317184192317225
 1.4288395785758132
 0.0
 0.6468691375688893
 0.0
 1.4607765259109835
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2801126303896315
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5711604222936809
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.28892445417345436
 0.3456159210524893
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7198873699881713
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.06015616499443319
 0.7633469528789133
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2611057547528558
 0.0
 0.0
 2.271190968868094
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.7000331594156262
 0.0
 0.0
 0.0
 0.10190798047919622
 4.974621977524411
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.1733227126056534
 0.0
 1.4790673098850604
 0.0
 0.0
 1.3259101202302448
 0.8266772878822489
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 6.8080440927235735
 0.0
 0.0
 0.0
 3.0
 1.1201849485968631
 1.8798150519354568
 0.0
 1.1919559084371707
 0.0
 3.0
 1.0264879948832466
 1.6845875513097992
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0518660195827207
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 1.8798150515458532
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.2654289198871487
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6278960845287155
 0.0
 0.0
 1.7942748287140962
 1.1291952145379973
 0.0
 6.468257900253326
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 1.3531308627292913
 4.115127037106724
 0.0
 1.0
 0.5392234744816553
 0.9398438352835171
 0.0
 0.0
 2.0
 0.9999999996827195
 0.0
 1.3462302304611722
 0.8980920200125572
 0.7556777495380347
 1.9068281586046738
 0.0
 0.0
 0.0
 0.6537697703287794
 0.43940207037980306
 0.0
 2.0
 0.9999999998406681
 1.654384079339245
 0.0
 0.0
 6.0
 1.999999999891123
 0.0
 0.0
 1.955631460825866
 0.7110755464696286
 0.33329299280615476
 2.0
 6.0
 0.0
 2.0
 1.0
 0.0
 0.0
 1.2366530474127548
 1.7288090316201763
 0.29996684064567075
 0.0
 0.0
 1.129195214446038
 0.0
 0.0
 0.0
 3.0
 2.0
 0.6920850307345427
 0.044368539796203185
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7244409041705083
 0.0
 1.0
 0.0
 0.0
 0.16573876501366
 0.2755590959452034
 0.0
 1.0
 0.0
 0.0
 0.375000000018067
 0.0
 0.0
 0.0
 0.8510055115437761
 0.0
 0.0
 0.0
 1.0
 0.3733949828617962
 0.23497688147300175
 0.0
 0.1489944885443132
 0.0
 1.0
 0.6204653488284836
 0.6156097692735734
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3843902307815026
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6266050171753238
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.37953465121579416
 0.0
 0.0
 0.22428435357091653
 1.0
 0.0
 1.0



=====Finished running Instance #333=====




*****Running Instance #334*****


objective value: -637.592971792
objective bound: -637.656737466
BARON solution time: 510.72

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.421139691074617
 0.0
 0.0
 0.5788603092017512
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9544998729670318
 0.0
 0.4307179115119797
 0.6147822157506952
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.45808026818237835
 2.027405393859321
 0.5263225503628763
 0.0
 0.0
 0.0
 0.7586778675362283
 3.357812391553738
 0.8717015289247828
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.23303771350380317
 0.6674465369832635
 0.010224401189964323
 0.0
 0.0
 0.0
 0.8040152633675913
 2.302791231290977
 0.03527572635264689
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.9999999999575918
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.10017705763592437
 0.30053117294856874
 0.0
 0.7500000003106785
 2.2500000008326597
 0.0
 0.543682954500068
 1.6310488634458575
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6061399877570092
 1.8184199632030709
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.9380451295070564
 0.06195487058661994
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.01827117635406
 1.7489605761721103
 0.0
 0.0
 0.0
 0.9141648445592893
 0.3186034027640262
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.449341457634995
 0.0
 0.0
 0.0
 0.5506585424441437
 0.0
 0.5501787883575251
 0.27508939411914707
 0.0
 0.0
 1.4498212119244034
 0.7249106058126089
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.537957557656657
 0.0
 0.0
 0.0
 0.4998441876674581
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.500155813305436
 0.9318871687137725
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4627353325521155
 0.7313676657794214
 0.0
 0.5372646679156557
 0.26863233376208906
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7211719172672624
 0.926801895103265
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8851702774594404
 4.601975922281087
 0.0
 0.8036745749184847
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.4620424430602216
 0.5344732662109792
 0.0
 1.1148297229077835
 0.0
 1.2788280828626166
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2642129017147173
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999999157057
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.24876859882936933
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9621982537021151
 0.0
 0.06756398036603158
 0.061954871056076395
 0.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7357870985951519
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0731981048205913
 0.9629470234273126
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.19632542561941804
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.06811283186202996
 5.507327218473568
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.194102998699657
 3.011808212404576
 1.6479738125752277
 0.0
 0.0
 0.4007082306682851
 0.8058970018764663
 0.0
 2.432042982125126
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 6.7672317530343244
 0.0
 0.9107086516770311
 0.0
 3.0
 0.8252681824766721
 2.174731818002111
 0.0
 1.2327682477507758
 0.0
 2.037801747091767
 1.449341457634995
 1.4211396914095171
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5788603094171302
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 2.1747318177370123
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.1420822210112154
 0.0
 0.0
 4.988191788014749
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5506585424641661
 0.0
 0.0
 2.424559951012484
 0.0
 0.0
 6.290820774762828
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 0.8851702773848482
 4.601975921890736
 0.0
 0.8036745748518681
 0.7211719175117667
 0.9268018954176147
 0.0
 0.0
 2.0
 0.9999999994419516
 0.0
 1.500155813161815
 0.9318871686236301
 0.0
 1.5379575575063629
 0.0
 0.0
 0.0
 0.49984418761854865
 0.0
 0.0
 2.0
 0.999999999893377
 2.0
 0.0
 0.0
 5.932436020568394
 2.067563978977429
 0.0
 0.0
 2.0
 0.9380451295118822
 0.061954870577955956
 2.0
 6.0
 0.0
 2.0
 0.9999999999181447
 0.0
 0.0
 1.0370529768407126
 2.970237768187315
 0.0455001275268393
 1.2167581356772155
 5.38521778512655
 1.398024079235578
 1.9544998728416236
 0.0
 0.43071791151842137
 0.6147822157413433
 2.0
 0.0
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7313676662181526
 0.37647602655123713
 0.9999999996609197
 0.0
 0.0
 0.05008852882252052
 0.26863233394224223
 0.0
 1.0
 0.0
 0.0
 0.3750000001362491
 0.0
 0.0
 0.0
 0.8459039691191863
 0.0
 0.22471148408772473
 0.0
 1.0
 0.2750893941545656
 0.2718414772385836
 0.0
 0.1540960309484716
 0.0
 1.0
 0.724670728811706
 0.7105698454990973
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.289430154585352
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7249106058960313
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7752885159412172
 0.0
 0.0
 0.6235239735012832
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.27532927121987116
 0.0
 0.0
 0.30306999386474676
 0.0
 0.0
 1.0



=====Finished running Instance #334=====





===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.29     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.32
 Total CPU time used:                 0.30

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -183.593
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -632.612
 Preprocessing found feasible solution with value -632.613
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            17.38     -649.031         -632.613       
         16+            3            47.30     -643.232         -632.613       
         30+            2            77.21     -636.336         -632.613       
        117+            3           107.10     -635.011         -632.613       
        125             0           125.30     -632.676         -632.613       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   126.86
 Total CPU time used:               126.40

 Total no. of BaR iterations:     125
 Best solution found at node:      89
 Max. no. of nodes in memory:       7
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -193.825
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -389.872
 Preprocessing found feasible solution with value -421.212
 Preprocessing found feasible solution with value -630.713
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            19.28     -644.211         -630.713       
         19+            6            49.17     -640.563         -630.713       
        471            11            79.07     -640.563         -630.713       
       3671            11           108.96     -640.563         -630.713       
       7754            16           138.85     -640.563         -630.713       
      12249            11           168.73     -640.563         -630.713       
      16427            15           198.63     -640.563         -630.713       
      18867+            3           228.54     -640.563         -630.713       
      18992+            4           258.43     -640.563         -630.713       
      19130+            6           288.33     -640.563         -630.713       
      19324+            6           318.24     -640.563         -630.713       
      19494+            6           348.14     -639.045         -630.713       
      19619+            4           378.03     -639.045         -630.713       
      20853             7           407.92     -638.762         -630.713       
      25604             7           437.81     -638.762         -630.713       
      28503+            5           467.71     -638.762         -630.713       
      28640+            6           497.60     -638.762         -630.713       
      28693+            5           527.50     -636.525         -630.713       
      28880+            5           557.40     -636.525         -630.713       
      30381             7           587.29     -634.689         -630.713       
      31395+            3           617.20     -632.957         -630.713       
      31409             0           633.77     -630.776         -630.713       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   636.18
 Total CPU time used:               633.84

 Total no. of BaR iterations:   31409
 Best solution found at node:      77
 Max. no. of nodes in memory:      19
 
 All done
===========================================================================



*****Running Instance #621*****


objective value: -632.612781006
objective bound: -632.676048611
BARON solution time: 126.86

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.1648736541710045
 1.8351263459412086
 0.0
 0.8237505546967924
 1.2977255859427137
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.999999999772174
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0064606815030503265
 3.0875929592848883
 1.8460950922632962
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.004001645620940983
 1.9124070418244108
 1.1434425783721593
 0.06851920859402609
 0.24802603004705384
 0.0
 0.0
 0.0
 0.0
 0.9078009967030061
 3.286060681485171
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.9999999998629927
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7302241518552058
 2.1906724554548975
 0.0
 0.49019072587331375
 1.4705721775696319
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7795851223690448
 2.3387553669839503
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9356992915466708
 0.7727633891804676
 0.9136749690767111
 0.13483866260114816
 0.11135883382156861
 0.13166485431236113
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.642706588961811
 1.7719248123178697
 0.0
 0.10897738309550314
 0.0
 0.35729341148721194
 0.11219740930347259
 0.0
 0.006900394317848418
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.05524605135597166
 0.0
 0.6928247313268461
 0.34641236558076616
 0.0
 0.0
 1.3071752689261726
 0.65358763429591
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999988792343
 0.0
 0.0
 0.0
 0.4182089330451441
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5817910675693512
 1.0
 0.41820893267407266
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4819225171017396
 0.732532237146664
 0.008429020995391848
 0.5180774830759309
 0.25609197060308264
 0.002946770848655192
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.14327808589807967
 0.761383357140967
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.04706590207624256
 0.061003372283594044
 0.0
 0.023532951037905727
 0.0
 0.0
 0.0
 0.0
 1.9529340981390264
 2.53125002555652
 0.0
 0.9764670490628928
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 1.5131464572830637
 0.0
 0.0
 0.0
 1.8567219141288336
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.25307836593596256
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999998663087
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4763912163560463
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5817910672180687
 0.0
 0.0
 0.0
 1.9447539486147738
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7469216343140325
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.23861664120029102
 1.0236797948677738
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.011375792702253402
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.929462046579172
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.8218082457776328
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.2228837752437953
 4.940148733051235
 0.9046614432325586
 0.0
 0.0
 0.0
 0.7771162245276687
 0.0
 3.0
 0.0
 0.0
 2.920896607399587
 0.0
 0.0
 0.0
 7.523608784638407
 0.0
 0.31654523869650897
 0.0
 3.0
 1.0392370969076208
 1.9607629035443621
 0.0
 0.47639121544733865
 0.0
 2.418208933531826
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.121476140661455
 0.13160222549217945
 0.0
 0.0
 3.0
 0.0
 0.0
 1.9607629032220828
 0.0
 2.622137649803851
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.193861678190196
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.37786235073507585
 0.05524605130779229
 0.0
 0.0
 3.1183404894400626
 3.0598512658175223
 0.0
 5.460651172902948
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 2.0
 2.5922533978057762
 0.0
 1.0
 0.14327808624148883
 0.7613833589730816
 0.0
 0.0
 2.0
 0.9886242077652315
 0.011375791646087072
 1.5817910674235245
 1.0
 0.4182089326489174
 2.0
 0.0
 0.0
 0.0
 0.41820893331338405
 0.0
 0.0
 2.0
 0.9999999998493155
 0.0552460517448084
 0.0
 0.0
 6.0
 1.8841222217696376
 0.0
 0.11587777756873048
 1.070537954039285
 0.8841222229187055
 1.0453398232839084
 2.0
 5.9999999999813
 0.0
 2.0
 0.9999999999358847
 0.0
 0.0
 0.9763202053897383
 3.534086711873184
 0.0
 0.010462327026018571
 5.000000001011439
 2.989537670590225
 2.0
 0.0
 0.0
 0.9999999998414757
 1.9886242087895434
 3.1328519317623447
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7409612584467967
 0.6175185917314667
 0.9999999976009581
 0.0
 0.0
 0.0
 0.2590387414811542
 0.0
 1.0
 0.0
 0.0
 0.36511207591214595
 0.0
 0.0
 0.0
 0.9404510980697707
 0.0
 0.07018108220457386
 0.0
 0.9999999999946704
 0.3464123656317937
 0.24509536293042308
 0.0
 0.05954890191435486
 0.0
 0.9999999993634435
 0.0
 0.5857686178690051
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4142313822434135
 0.02353295103941507
 0.0
 0.0
 0.9999999999977333
 0.0
 0.0
 0.6535876344139923
 0.0
 0.8740458832375345
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.9298189176972202
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.12595411691215183
 0.9999999929190108
 0.0
 0.0
 0.38979256116716066
 0.382481408286898
 0.0
 0.9764670489805745



=====Finished running Instance #621=====




*****Running Instance #622*****


objective value: -630.712863845
objective bound: -630.775941437
BARON solution time: 636.18

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.1182111227525864
 1.8152489500934155
 0.0
 0.8817888775135853
 1.4314527029301223
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 1.000000000290472
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.021320800972051468
 1.3118983370304995
 0.7658182009833567
 0.0
 0.0
 0.0
 0.05993854807091172
 3.6881016637850372
 2.15292244946105
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.21824860631610835
 0.8444965060345186
 0.0
 0.0
 0.0
 0.0
 0.7522060522248445
 2.9106045332594808
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.07871398150707044
 0.2361419445663911
 0.0
 0.7499999999713268
 2.2500000003484213
 0.0
 0.575875877355352
 1.7276276323890305
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5954101410793136
 1.7862304235733697
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.8399326369589547
 0.16006736294394286
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 5.504752804357112
 1.7491100313791716
 0.0
 0.08580756963487483
 0.0
 0.49524719667804173
 0.15736253207125506
 0.0
 0.007719866781271631
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.46433099387106747
 0.23216549689560353
 0.0
 0.0
 1.535669006390307
 0.7678345030630934
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.6615736014811744
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3384263994987518
 0.9980269600659117
 0.663546640733339
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.3428020980436726
 0.6714010487187385
 0.0
 0.6571979023264967
 0.32859895101490594
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.19344646405924185
 0.5813561046040496
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 2.417712710240965
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 1.258411055884425
 0.0
 0.0
 0.0
 1.806553535940856
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3132415802388712
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6603295958405093
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3384263985076685
 0.0
 0.0
 0.06653992721631878
 2.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.6867584201449737
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.41864389448770795
 1.0295453417846256
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0019730405231468276
 2.5932309852233835
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.0142031469626347
 2.0990373389859074
 0.7748025684667337
 0.0
 0.0
 0.31485592606971885
 0.9857968534393985
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 7.339670405189595
 0.0
 1.0627451123288703
 0.0
 3.0
 0.696496490766671
 2.3035035097207057
 0.0
 0.6603295955147124
 0.0
 2.661573602282925
 0.0
 2.9334600727903126
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.3132415803996453
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 2.3035035094534
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.6628105854103032
 0.0
 0.0
 5.900962661316998
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.3816405646274523
 0.0
 0.0
 5.417712710439752
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 2.0
 2.4177127100634084
 0.0
 1.0
 0.1934464644531659
 0.5813561057878974
 0.0
 0.0
 2.0
 0.999999999636598
 0.0
 1.338426399367854
 0.998026959968281
 0.663546640668397
 2.0
 0.0
 0.0
 0.0
 0.6615736014222248
 0.0
 0.0
 2.0
 0.9999999999263348
 0.0
 0.0
 0.0
 6.0
 1.9064725633089663
 0.0
 0.09352743640989897
 2.0
 0.8399326369563818
 0.16006736294345236
 1.999999999813884
 6.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.9704546585061331
 3.755101039156754
 0.0
 0.08125934904056939
 5.0000000006682574
 2.9187406503584326
 2.0
 0.0
 0.0
 1.000000000221436
 2.0
 3.246701652899925
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.6714010489627291
 0.2623796673710324
 0.9999999979636396
 0.0
 0.0
 0.03935699075726084
 0.3285989511343187
 0.0
 1.0
 0.0
 0.0
 0.3750000000223919
 0.0
 0.0
 0.0
 0.9174588006363238
 0.0
 0.22489315127035492
 0.0
 1.0
 0.23216549691270608
 0.28793793870321993
 0.0
 0.08254119943824638
 0.0
 1.0
 0.06479499636865078
 0.5591055613231715
 0.0
 0.1541661392996143
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4408944387149424
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7678345031196562
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7751068487662092
 0.0
 0.0
 0.7376203326584233
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.781038864331735
 0.0
 0.0
 0.29770507056644285
 0.0
 0.0
 1.0



=====Finished running Instance #622=====





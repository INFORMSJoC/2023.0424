===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -1.64505
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -1.64505
 Preprocessing found feasible solution with value -1.64505
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             0             0.33     -1.64521         -1.64505       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                     0.79
 Total CPU time used:                 0.34

 Total no. of BaR iterations:       1
 Best solution found at node:      -1
 Max. no. of nodes in memory:       1
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -623.717
 Solving bounding LP
 Starting multi-start local search
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
          1             1            13.61     -637.382         -623.717       
         28             3            43.51     -635.942         -623.717       
       1217             5            73.40     -635.536         -623.717       
       4916            12           103.28     -635.529         -623.717       
       8823            12           133.17     -635.529         -623.717       
       9411            11           163.05     -635.529         -623.717       
      13885            11           192.93     -635.529         -623.717       
      17913             8           222.81     -635.529         -623.717       
      20167+            4           252.71     -635.529         -623.717       
      24515             9           282.58     -635.529         -623.717       
      26419             6           312.46     -635.008         -623.717       
      29757            14           342.34     -633.474         -623.717       
      34478            15           372.23     -633.474         -623.717       
      35341+            4           402.12     -633.474         -623.717       
      35358+            3           432.02     -633.474         -623.717       
      38195            13           461.90     -632.259         -623.717       
      38531+            5           491.79     -630.743         -623.717       
      38590+            3           521.70     -628.076         -623.717       
      38685             0           551.48     -623.780         -623.717       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   553.81
 Total CPU time used:               551.55

 Total no. of BaR iterations:   38685
 Best solution found at node:       1
 Max. no. of nodes in memory:      23
 
 All done
===========================================================================
===========================================================================
 BARON version 23.6.23. Built: LNX-64 Fri Jun 23 12:56:02 EDT 2023

 BARON is a product of The Optimization Firm.
 For information on BARON, see https://minlp.com/about-baron
 Licensee: Russell Bent at LANL, rbent@lanl.gov.

 If you use this software, please cite publications from
 https://minlp.com/baron-publications, such as: 

 Khajavirad, A. and N. V. Sahinidis,
 A hybrid LP/NLP paradigm for global optimization relaxations,
 Mathematical Programming Computation, 10, 383-421, 2018.
===========================================================================
 This BARON run may utilize the following subsolver(s)
 For LP/MIP/QP: CLP/CBC, ILOG CPLEX                             
 For NLP: IPOPT, FILTERSQP
===========================================================================
 Doing local search
 Preprocessing found feasible solution with value -175.707
 Solving bounding LP
 Starting multi-start local search
 Preprocessing found feasible solution with value -368.246
 Preprocessing found feasible solution with value -631.028
 Done with local search
===========================================================================
  Iteration    Open nodes         Time (s)    Lower bound      Upper bound
*         1             1            11.43     -645.229         -631.260       
          1             1            22.36     -642.653         -631.260       
*         2             2            23.74     -642.653         -631.441       
         23             4            54.11     -640.555         -631.441       
        182             7            84.00     -640.555         -631.441       
        309+            3           113.90     -640.555         -631.441       
        474+            9           143.79     -640.555         -631.441       
        742+           11           173.69     -640.555         -631.441       
       1005+            8           203.58     -640.555         -631.441       
       1271+            8           233.47     -640.555         -631.441       
       1649             3           263.37     -640.555         -631.441       
       1854+            5           293.27     -640.555         -631.441       
       2029+            9           323.16     -640.555         -631.441       
       2218+            5           353.07     -640.555         -631.441       
       2485+            8           382.96     -640.409         -631.441       
       5045+            4           412.85     -640.409         -631.441       
       5172+            4           442.74     -639.956         -631.441       
       7698            11           472.62     -639.956         -631.441       
       8133             7           502.52     -639.956         -631.441       
      11695+            7           532.42     -639.956         -631.441       
      11768+            3           562.30     -637.728         -631.441       
      11851+            2           592.20     -637.728         -631.441       
      12062+            7           622.09     -636.813         -631.441       
      12270+            7           652.00     -636.813         -631.441       
      14411            10           681.88     -636.813         -631.441       
      14869+            4           711.77     -636.623         -631.441       
      17368             8           743.67     -636.623         -631.441       
      19779             6           773.55     -635.796         -631.441       
      23575             9           803.44     -635.796         -631.441       
      25481+            1           833.33     -635.428         -631.441       
      25483             0           835.63     -631.505         -631.441       

 Calculating duals

                         *** Normal completion ***            

 Wall clock time:                   839.06
 Total CPU time used:               835.74

 Total no. of BaR iterations:   25483
 Best solution found at node:   17367
 Max. no. of nodes in memory:      16
 
 All done
===========================================================================



*****Running Instance #569*****


objective value: -623.717271392
objective bound: -623.779649019
BARON solution time: 553.81

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.0791886711383425
 1.9208113289971274
 0.0
 0.797384507497032
 1.4192376518851344
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.8242200336212167
 0.0
 0.0
 1.1757799668133468
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.6256834608378807
 1.7045483915748414
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.1985365734869613
 1.4272520035449343
 0.19533377608617805
 0.6359663788745751
 0.03191553517868688
 0.0
 0.0
 0.0
 0.8804985576691042
 2.8667212119885948
 0.14386443172041227
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.835723547702478
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.20821585074085433
 0.6246475521894912
 0.0
 0.7500000001109842
 2.2500000002135154
 0.0
 0.5536557650988035
 1.6609672951967385
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4881283843446808
 1.4643851529412462
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.82135197259489
 0.9403948943152194
 0.23825313336214057
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.898554695131491
 1.260789270212563
 0.0
 0.038728961224781144
 0.0
 2.1014453059213705
 0.6796056233269097
 0.0
 0.020876145176014833
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.523584626845885
 0.26179231337836245
 0.0
 0.0
 1.4764153734152232
 0.7382076865818994
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.44308248312878595
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5569175178402257
 1.0
 0.4430824823611003
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.5294516745927154
 0.6703381574336175
 0.09438767972896903
 0.4705483258005956
 0.20623502065512572
 0.029039142204015548
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.20249391542328468
 0.7323123733059869
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 2.4251171239287723
 0.0
 1.0
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.0
 1.512786906740591
 0.0
 0.0
 0.0
 1.7975060843246025
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2166221591121049
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4872130941227384
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5569175168493898
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7833778412549887
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2676876246324292
 0.9241676665752248
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.16427645317328526
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.12342682249091273
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.1786480281989969
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.4216978869245946
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.2941775117553016
 4.330231852363837
 0.9348062885319428
 0.0
 0.0
 0.8328634029189544
 0.7058224886597368
 0.0
 3.0
 0.0
 0.0
 3.0
 0.0
 0.0
 0.0
 5.198072926433583
 0.0
 0.86321569013944
 0.0
 3.0
 0.7853769402242473
 2.2146230602698687
 0.0
 2.801927074363735
 0.0
 2.443082483940558
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.216622159338931
 0.0
 0.0
 0.0
 2.8357235477069844
 0.0
 0.0
 2.2146230599971224
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.8910842013781113
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9525135372658537
 3.6257885769909635
 0.0
 5.425117124161772
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 2.0
 2.4251171237473526
 0.0
 1.0
 0.2024939160702524
 0.7323123756465258
 0.0
 0.0
 2.0
 0.8765731780031238
 0.12342682192093286
 1.5569175176952565
 1.0
 0.44308248231940855
 2.0
 0.0
 0.0
 0.0
 0.4430824830928539
 0.0
 0.0
 2.0
 0.9999999999280378
 0.0
 0.0
 0.0
 6.0
 1.9403948933930268
 0.0
 0.05960510639765479
 1.8213519724879672
 0.9403948942600169
 0.2382531333481591
 2.0
 6.0
 0.0
 1.835723547519347
 0.9999999999965709
 0.0
 0.0
 1.075832333716002
 3.5026875907322768
 0.17577996689375802
 0.0
 4.824220034158133
 3.1318003950115547
 1.8242200334909462
 0.0
 0.0
 1.175779966728735
 1.8765731785641195
 3.3400489807531266
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.7647258372206652
 0.5442710826302689
 0.9999999968034385
 0.0
 0.0
 0.10410792536086146
 0.23527416287701058
 0.0
 1.0
 0.0
 0.0
 0.3750000000221393
 0.0
 0.0
 0.0
 0.6497591157914265
 0.0
 0.18156525879079718
 0.0
 1.0
 0.26179231339720027
 0.276827882521786
 0.0
 0.3502408842846362
 0.0
 1.0
 0.5577124843608389
 0.5750847787160683
 0.0
 0.25581472448185755
 0.0
 0.0
 0.0
 0.0
 0.0
 0.4249152213226626
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.7382076866350306
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8184347412465975
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.18647279115730359
 0.0
 0.0
 0.2440641921467092
 0.4557289174042874
 0.0
 1.0



=====Finished running Instance #569=====




*****Running Instance #570*****


objective value: -631.441416222
objective bound: -631.504566667
BARON solution time: 839.05

w_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(25, 1, 2), (25, 1, 1), (25, 1, 14), (20, 1, 2), (20, 1, 1), (20, 1, 14), (1, 1, 2), (1, 1, 1), (1, 1, 14), (2, 1, 2)  â€¦  (20, 15, 23), (20, 15, 3), (8, 15, 30), (8, 15, 29), (8, 15, 23), (8, 15, 3), (2, 15, 30), (2, 15, 29), (2, 15, 23), (2, 15, 3)]
And data, a 261-element Vector{Float64}:
 1.1935670581505986
 1.2007493370484668
 0.0
 0.8064329421255281
 0.811285645007488
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.0
 0.0
 1.0000000003267857
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.0279918811148674
 0.20104126714250387
 0.0
 0.0
 0.0
 0.0
 3.972008119726534
 0.7767936305357583
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.2305987607278939
 0.6765564458459706
 0.0
 0.0
 0.0
 0.0
 0.7889980877217125
 2.314850870509156
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.48580546935748686
 1.4574164080818106
 0.0
 0.488757060213449
 1.4662711806501656
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.025437470689931
 3.0763124121692966
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 2.0
 0.9102850992274525
 0.08971490068473507
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.8951191237981786
 1.2983730384053995
 0.0
 0.0
 0.0
 2.104880877278918
 0.7016269575591128
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5159687079514093
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6966478398013486
 0.34832391984260985
 0.0
 0.0
 1.3033521604558307
 0.6516760801162541
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6241495792235536
 0.0
 0.0
 0.0
 0.3672577321842103
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6327422687915734
 1.0
 0.36725773138423007
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.4440724179362352
 0.7220362086476454
 0.0
 0.5559275824696673
 0.27796379111242475
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.6992824421470719
 0.8683984987327191
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.8479570094808108
 4.654907372452111
 0.0
 0.667810079893721
x_ij_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 30), (43, 22), (43, 6), (44, 22), (45, 30), (45, 29), (45, 28), (45, 24), (45, 23), (40, 29)  â€¦  (5, 7), (5, 14), (6, 4), (6, 3), (1, 14), (1, 10), (1, 23), (1, 1), (3, 2), (3, 1)]
And data, a 116-element Vector{Float64}:
 0.0
 0.3758504214433127
 1.6934562610090174
 0.0
 1.1520429908729564
 0.0
 1.3007175580424795
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.23147428032734385
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.9999999999676692
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3065437397042831
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.008592688642887
 0.0
 0.0
 0.08971489696775826
 1.4840312922181185
 0.0
 0.0
 0.0
 0.0
 6.0
 0.0
 0.0
 0.0
 0.0
 0.7685257199860593
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.13160150127818088
 0.9804031517897364
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.3321899206188154
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.898250118389282
 0.0
 0.0
x_il_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 2.166108626774152
 1.2290331482476045
 1.5676809406885261
 0.0
 0.0
 0.0
 0.8338913736534869
 0.0
 3.0
 0.0
 0.0
 1.943221877408545
 0.0
 0.0
 0.0
 5.193492164814762
 0.0
 0.9071552065470146
 0.0
 3.0
 1.0449717596439587
 1.9550282408325441
 0.0
 2.8065078362541542
 0.0
 1.991407312106639
 0.5159687079066528
 2.394316395133888
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 1.6177185870819097
 0.0
 0.0
 0.0
 3.0
 0.0
 0.0
 1.955028240572085
 0.0
 3.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 3.103848958167996
 0.0
 0.0
 4.748801750250239
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 4.101749882777643
 0.0
 0.0
 6.170674461789108
x_lj_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(15, 30), (15, 29), (15, 23), (15, 3), (14, 28), (14, 27), (14, 10), (14, 24), (13, 26), (13, 25)  â€¦  (3, 6), (3, 5), (3, 29), (2, 4), (2, 3), (2, 1), (2, 5), (1, 2), (1, 1), (1, 14)]
And data, a 53-element Vector{Float64}:
 0.8479570094207615
 4.654907372096187
 0.0
 0.6678100798479492
 0.6992824423352302
 0.8683984989670418
 0.0
 0.0
 2.0
 0.9999999996542313
 0.0
 1.6327422686325823
 1.0
 0.3672577313535671
 1.624149579091358
 0.0
 0.0
 0.0
 0.3672577321478207
 0.0
 0.0
 2.0
 0.9999999999281991
 0.5159687081602113
 0.0
 0.0
 6.0
 1.99999999582222
 0.0
 0.0
 2.0
 0.9102850992289226
 0.08971490069375856
 2.0
 6.0
 0.0
 2.0
 0.9999999999923863
 0.0
 0.0
 1.0195968484816886
 2.9914073164529373
 0.0
 0.0
 5.0000000006076695
 0.9778348976341557
 2.0
 0.0
 0.0
 1.000000000255381
 2.0
 2.012034981957765
 0.0
q_opt: 1-dimensional DenseAxisArray{Float64,1,...} with index sets:
    Dimension 1, [(43, 15), (43, 14), (44, 15), (44, 13), (44, 3), (40, 14), (40, 2), (41, 14), (42, 6), (37, 13)  â€¦  (4, 13), (5, 2), (5, 7), (5, 9), (6, 11), (1, 1), (1, 6), (1, 3), (2, 1), (2, 15)]
And data, a 71-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.722036208905157
 0.2055983761981352
 0.9999999997294745
 0.0
 0.0
 0.0
 0.277963791209234
 0.0
 1.0
 0.0
 0.0
 0.242902734661811
 0.0
 0.0
 0.0
 0.6491865205825992
 0.0
 0.22616660797922203
 0.0
 1.0
 0.34832391986762323
 0.24437853008977806
 0.0
 0.3508134795175042
 0.0
 1.0
 0.999999999593874
 0.5967835290213201
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.40321647102605995
 0.0
 0.0
 0.0
 1.0
 0.0
 0.0
 0.6516760801691577
 0.0
 1.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.7738333919883599
 0.0
 0.0
 0.7944016238489089
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.5127187353265933
 0.0
 0.0
 1.0



=====Finished running Instance #570=====




